// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar(
  input         clock,
  input         reset,
  output        auto_in_3_a_ready,
  input         auto_in_3_a_valid,
  input  [2:0]  auto_in_3_a_bits_opcode,
  input  [2:0]  auto_in_3_a_bits_param,
  input  [2:0]  auto_in_3_a_bits_size,
  input  [2:0]  auto_in_3_a_bits_source,
  input  [35:0] auto_in_3_a_bits_address,
  input  [7:0]  auto_in_3_a_bits_mask,
  input  [63:0] auto_in_3_a_bits_data,
  input         auto_in_3_a_bits_corrupt,
  input         auto_in_3_d_ready,
  output        auto_in_3_d_valid,
  output [2:0]  auto_in_3_d_bits_opcode,
  output [1:0]  auto_in_3_d_bits_param,
  output [2:0]  auto_in_3_d_bits_size,
  output [2:0]  auto_in_3_d_bits_source,
  output        auto_in_3_d_bits_sink,
  output        auto_in_3_d_bits_denied,
  output [63:0] auto_in_3_d_bits_data,
  output        auto_in_3_d_bits_corrupt,
  output        auto_in_2_a_ready,
  input         auto_in_2_a_valid,
  input  [2:0]  auto_in_2_a_bits_opcode,
  input  [2:0]  auto_in_2_a_bits_param,
  input  [2:0]  auto_in_2_a_bits_size,
  input  [2:0]  auto_in_2_a_bits_source,
  input  [35:0] auto_in_2_a_bits_address,
  input  [7:0]  auto_in_2_a_bits_mask,
  input  [63:0] auto_in_2_a_bits_data,
  input         auto_in_2_a_bits_corrupt,
  input         auto_in_2_d_ready,
  output        auto_in_2_d_valid,
  output [2:0]  auto_in_2_d_bits_opcode,
  output [1:0]  auto_in_2_d_bits_param,
  output [2:0]  auto_in_2_d_bits_size,
  output [2:0]  auto_in_2_d_bits_source,
  output        auto_in_2_d_bits_sink,
  output        auto_in_2_d_bits_denied,
  output [63:0] auto_in_2_d_bits_data,
  output        auto_in_2_d_bits_corrupt,
  output        auto_in_1_a_ready,
  input         auto_in_1_a_valid,
  input  [2:0]  auto_in_1_a_bits_opcode,
  input  [2:0]  auto_in_1_a_bits_param,
  input  [2:0]  auto_in_1_a_bits_size,
  input  [2:0]  auto_in_1_a_bits_source,
  input  [35:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  input         auto_in_1_a_bits_corrupt,
  input         auto_in_1_d_ready,
  output        auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [1:0]  auto_in_1_d_bits_param,
  output [2:0]  auto_in_1_d_bits_size,
  output [2:0]  auto_in_1_d_bits_source,
  output        auto_in_1_d_bits_sink,
  output        auto_in_1_d_bits_denied,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
  output        auto_in_0_a_ready,
  input         auto_in_0_a_valid,
  input  [2:0]  auto_in_0_a_bits_opcode,
  input  [2:0]  auto_in_0_a_bits_param,
  input  [2:0]  auto_in_0_a_bits_size,
  input  [2:0]  auto_in_0_a_bits_source,
  input  [35:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_a_bits_corrupt,
  input         auto_in_0_d_ready,
  output        auto_in_0_d_valid,
  output [2:0]  auto_in_0_d_bits_opcode,
  output [1:0]  auto_in_0_d_bits_param,
  output [2:0]  auto_in_0_d_bits_size,
  output [2:0]  auto_in_0_d_bits_source,
  output        auto_in_0_d_bits_sink,
  output        auto_in_0_d_bits_denied,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_in_0_d_bits_corrupt,
  input         auto_out_7_a_ready,
  output        auto_out_7_a_valid,
  output [2:0]  auto_out_7_a_bits_opcode,
  output [1:0]  auto_out_7_a_bits_size,
  output [4:0]  auto_out_7_a_bits_source,
  output [29:0] auto_out_7_a_bits_address,
  output [7:0]  auto_out_7_a_bits_mask,
  output [63:0] auto_out_7_a_bits_data,
  output        auto_out_7_d_ready,
  input         auto_out_7_d_valid,
  input  [2:0]  auto_out_7_d_bits_opcode,
  input  [1:0]  auto_out_7_d_bits_size,
  input  [4:0]  auto_out_7_d_bits_source,
  input  [63:0] auto_out_7_d_bits_data,
  input         auto_out_6_a_ready,
  output        auto_out_6_a_valid,
  output [2:0]  auto_out_6_a_bits_opcode,
  output [2:0]  auto_out_6_a_bits_param,
  output [1:0]  auto_out_6_a_bits_size,
  output [4:0]  auto_out_6_a_bits_source,
  output [29:0] auto_out_6_a_bits_address,
  output [7:0]  auto_out_6_a_bits_mask,
  output [63:0] auto_out_6_a_bits_data,
  output        auto_out_6_a_bits_corrupt,
  output        auto_out_6_d_ready,
  input         auto_out_6_d_valid,
  input  [2:0]  auto_out_6_d_bits_opcode,
  input  [1:0]  auto_out_6_d_bits_param,
  input  [1:0]  auto_out_6_d_bits_size,
  input  [4:0]  auto_out_6_d_bits_source,
  input         auto_out_6_d_bits_sink,
  input         auto_out_6_d_bits_denied,
  input  [63:0] auto_out_6_d_bits_data,
  input         auto_out_6_d_bits_corrupt,
  input         auto_out_5_a_ready,
  output        auto_out_5_a_valid,
  output [2:0]  auto_out_5_a_bits_opcode,
  output [1:0]  auto_out_5_a_bits_size,
  output [4:0]  auto_out_5_a_bits_source,
  output [29:0] auto_out_5_a_bits_address,
  output [7:0]  auto_out_5_a_bits_mask,
  output [63:0] auto_out_5_a_bits_data,
  output        auto_out_5_d_ready,
  input         auto_out_5_d_valid,
  input  [2:0]  auto_out_5_d_bits_opcode,
  input  [1:0]  auto_out_5_d_bits_size,
  input  [4:0]  auto_out_5_d_bits_source,
  input  [63:0] auto_out_5_d_bits_data,
  input         auto_out_4_a_ready,
  output        auto_out_4_a_valid,
  output [2:0]  auto_out_4_a_bits_opcode,
  output [1:0]  auto_out_4_a_bits_size,
  output [4:0]  auto_out_4_a_bits_source,
  output [29:0] auto_out_4_a_bits_address,
  output [7:0]  auto_out_4_a_bits_mask,
  output [63:0] auto_out_4_a_bits_data,
  output        auto_out_4_d_ready,
  input         auto_out_4_d_valid,
  input  [2:0]  auto_out_4_d_bits_opcode,
  input  [1:0]  auto_out_4_d_bits_size,
  input  [4:0]  auto_out_4_d_bits_source,
  input  [63:0] auto_out_4_d_bits_data,
  input         auto_out_3_a_ready,
  output        auto_out_3_a_valid,
  output [2:0]  auto_out_3_a_bits_opcode,
  output [1:0]  auto_out_3_a_bits_size,
  output [4:0]  auto_out_3_a_bits_source,
  output [29:0] auto_out_3_a_bits_address,
  output [7:0]  auto_out_3_a_bits_mask,
  output [63:0] auto_out_3_a_bits_data,
  output        auto_out_3_d_ready,
  input         auto_out_3_d_valid,
  input  [2:0]  auto_out_3_d_bits_opcode,
  input  [1:0]  auto_out_3_d_bits_size,
  input  [4:0]  auto_out_3_d_bits_source,
  input  [63:0] auto_out_3_d_bits_data,
  input         auto_out_2_a_ready,
  output        auto_out_2_a_valid,
  output [2:0]  auto_out_2_a_bits_opcode,
  output [1:0]  auto_out_2_a_bits_size,
  output [4:0]  auto_out_2_a_bits_source,
  output [29:0] auto_out_2_a_bits_address,
  output [7:0]  auto_out_2_a_bits_mask,
  output [63:0] auto_out_2_a_bits_data,
  output        auto_out_2_d_ready,
  input         auto_out_2_d_valid,
  input  [2:0]  auto_out_2_d_bits_opcode,
  input  [1:0]  auto_out_2_d_bits_size,
  input  [4:0]  auto_out_2_d_bits_source,
  input  [63:0] auto_out_2_d_bits_data,
  input         auto_out_1_a_ready,
  output        auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
  output [2:0]  auto_out_1_a_bits_param,
  output [2:0]  auto_out_1_a_bits_size,
  output [4:0]  auto_out_1_a_bits_source,
  output [30:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_a_bits_corrupt,
  output        auto_out_1_d_ready,
  input         auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [4:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
  input         auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
  input         auto_out_0_a_ready,
  output        auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
  output [2:0]  auto_out_0_a_bits_param,
  output [2:0]  auto_out_0_a_bits_size,
  output [4:0]  auto_out_0_a_bits_source,
  output [35:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_a_bits_corrupt,
  output        auto_out_0_d_ready,
  input         auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [2:0]  auto_out_0_d_bits_size,
  input  [4:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
  input         auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt
);

  wire        allowed_11_7;
  wire        allowed_11_6;
  wire        allowed_11_5;
  wire        allowed_11_4;
  wire        allowed_11_3;
  wire        allowed_11_2;
  wire        allowed_11_1;
  wire        allowed_11_0;
  wire        allowed_10_7;
  wire        allowed_10_6;
  wire        allowed_10_5;
  wire        allowed_10_4;
  wire        allowed_10_3;
  wire        allowed_10_2;
  wire        allowed_10_1;
  wire        allowed_10_0;
  wire        allowed_9_7;
  wire        allowed_9_6;
  wire        allowed_9_5;
  wire        allowed_9_4;
  wire        allowed_9_3;
  wire        allowed_9_2;
  wire        allowed_9_1;
  wire        allowed_9_0;
  wire        allowed_8_7;
  wire        allowed_8_6;
  wire        allowed_8_5;
  wire        allowed_8_4;
  wire        allowed_8_3;
  wire        allowed_8_2;
  wire        allowed_8_1;
  wire        allowed_8_0;
  wire        allowed_7_3;
  wire        allowed_7_2;
  wire        allowed_7_1;
  wire        allowed_7_0;
  wire        allowed_6_3;
  wire        allowed_6_2;
  wire        allowed_6_1;
  wire        allowed_6_0;
  wire        allowed_5_3;
  wire        allowed_5_2;
  wire        allowed_5_1;
  wire        allowed_5_0;
  wire        allowed_4_3;
  wire        allowed_4_2;
  wire        allowed_4_1;
  wire        allowed_4_0;
  wire        allowed_3_3;
  wire        allowed_3_2;
  wire        allowed_3_1;
  wire        allowed_3_0;
  wire        allowed_2_3;
  wire        allowed_2_2;
  wire        allowed_2_1;
  wire        allowed_2_0;
  wire        allowed_1_3;
  wire        allowed_1_2;
  wire        allowed_1_1;
  wire        allowed_1_0;
  wire        allowed_3;
  wire        allowed_2;
  wire        allowed_1;
  wire        allowed_0;
  wire [4:0]  in_0_a_bits_source = {2'h3, auto_in_0_a_bits_source};
  wire [4:0]  in_1_a_bits_source = {2'h2, auto_in_1_a_bits_source};
  wire [4:0]  in_2_a_bits_source = {2'h1, auto_in_2_a_bits_source};
  wire [4:0]  in_3_a_bits_source = {2'h0, auto_in_3_a_bits_source};
  wire [2:0]  out_2_d_bits_size = {1'h0, auto_out_2_d_bits_size};
  wire [2:0]  out_3_d_bits_size = {1'h0, auto_out_3_d_bits_size};
  wire [2:0]  out_4_d_bits_size = {1'h0, auto_out_4_d_bits_size};
  wire [2:0]  out_5_d_bits_size = {1'h0, auto_out_5_d_bits_size};
  wire [2:0]  out_6_d_bits_size = {1'h0, auto_out_6_d_bits_size};
  wire [2:0]  out_7_d_bits_size = {1'h0, auto_out_7_d_bits_size};
  wire        requestAIO_0_0 =
    {auto_in_0_a_bits_address[35:32], ~(auto_in_0_a_bits_address[31])} == 5'h0
    | {auto_in_0_a_bits_address[35:33], ~(auto_in_0_a_bits_address[32])} == 4'h0
    | {auto_in_0_a_bits_address[35:34], ~(auto_in_0_a_bits_address[33])} == 3'h0
    | {auto_in_0_a_bits_address[35], ~(auto_in_0_a_bits_address[34])} == 2'h0
    | auto_in_0_a_bits_address[35];
  wire        requestAIO_0_1 =
    auto_in_0_a_bits_address[35:29] == 7'h0
    | {auto_in_0_a_bits_address[35:30], auto_in_0_a_bits_address[29:28] ^ 2'h2} == 8'h0
    | {auto_in_0_a_bits_address[35:30], auto_in_0_a_bits_address[29:27] ^ 3'h6} == 9'h0
    | {auto_in_0_a_bits_address[35:31], ~(auto_in_0_a_bits_address[30])} == 6'h0;
  wire        requestAIO_0_2 =
    {auto_in_0_a_bits_address[35:30],
     auto_in_0_a_bits_address[29:16] ^ 14'h3800} == 20'h0;
  wire        requestAIO_0_3 =
    {auto_in_0_a_bits_address[35:30], ~(auto_in_0_a_bits_address[29:26])} == 10'h0;
  wire        requestAIO_0_4 =
    {auto_in_0_a_bits_address[35:30],
     auto_in_0_a_bits_address[29:12] ^ 18'h3A000} == 24'h0;
  wire        requestAIO_0_5 =
    {auto_in_0_a_bits_address[35:30],
     auto_in_0_a_bits_address[29:12] ^ 18'h38020} == 24'h0;
  wire        requestAIO_0_6 =
    {auto_in_0_a_bits_address[35:30],
     auto_in_0_a_bits_address[29:12] ^ 18'h38021} == 24'h0;
  wire        requestAIO_0_7 =
    {auto_in_0_a_bits_address[35:30],
     auto_in_0_a_bits_address[29:16] ^ 14'h3900} == 20'h0;
  wire        requestAIO_1_0 =
    {auto_in_1_a_bits_address[35:32], ~(auto_in_1_a_bits_address[31])} == 5'h0
    | {auto_in_1_a_bits_address[35:33], ~(auto_in_1_a_bits_address[32])} == 4'h0
    | {auto_in_1_a_bits_address[35:34], ~(auto_in_1_a_bits_address[33])} == 3'h0
    | {auto_in_1_a_bits_address[35], ~(auto_in_1_a_bits_address[34])} == 2'h0
    | auto_in_1_a_bits_address[35];
  wire        requestAIO_1_1 =
    auto_in_1_a_bits_address[35:29] == 7'h0
    | {auto_in_1_a_bits_address[35:30], auto_in_1_a_bits_address[29:28] ^ 2'h2} == 8'h0
    | {auto_in_1_a_bits_address[35:30], auto_in_1_a_bits_address[29:27] ^ 3'h6} == 9'h0
    | {auto_in_1_a_bits_address[35:31], ~(auto_in_1_a_bits_address[30])} == 6'h0;
  wire        requestAIO_1_2 =
    {auto_in_1_a_bits_address[35:30],
     auto_in_1_a_bits_address[29:16] ^ 14'h3800} == 20'h0;
  wire        requestAIO_1_3 =
    {auto_in_1_a_bits_address[35:30], ~(auto_in_1_a_bits_address[29:26])} == 10'h0;
  wire        requestAIO_1_4 =
    {auto_in_1_a_bits_address[35:30],
     auto_in_1_a_bits_address[29:12] ^ 18'h3A000} == 24'h0;
  wire        requestAIO_1_5 =
    {auto_in_1_a_bits_address[35:30],
     auto_in_1_a_bits_address[29:12] ^ 18'h38020} == 24'h0;
  wire        requestAIO_1_6 =
    {auto_in_1_a_bits_address[35:30],
     auto_in_1_a_bits_address[29:12] ^ 18'h38021} == 24'h0;
  wire        requestAIO_1_7 =
    {auto_in_1_a_bits_address[35:30],
     auto_in_1_a_bits_address[29:16] ^ 14'h3900} == 20'h0;
  wire        requestAIO_2_0 =
    {auto_in_2_a_bits_address[35:32], ~(auto_in_2_a_bits_address[31])} == 5'h0
    | {auto_in_2_a_bits_address[35:33], ~(auto_in_2_a_bits_address[32])} == 4'h0
    | {auto_in_2_a_bits_address[35:34], ~(auto_in_2_a_bits_address[33])} == 3'h0
    | {auto_in_2_a_bits_address[35], ~(auto_in_2_a_bits_address[34])} == 2'h0
    | auto_in_2_a_bits_address[35];
  wire        requestAIO_2_1 =
    auto_in_2_a_bits_address[35:29] == 7'h0
    | {auto_in_2_a_bits_address[35:30], auto_in_2_a_bits_address[29:28] ^ 2'h2} == 8'h0
    | {auto_in_2_a_bits_address[35:30], auto_in_2_a_bits_address[29:27] ^ 3'h6} == 9'h0
    | {auto_in_2_a_bits_address[35:31], ~(auto_in_2_a_bits_address[30])} == 6'h0;
  wire        requestAIO_2_2 =
    {auto_in_2_a_bits_address[35:30],
     auto_in_2_a_bits_address[29:16] ^ 14'h3800} == 20'h0;
  wire        requestAIO_2_3 =
    {auto_in_2_a_bits_address[35:30], ~(auto_in_2_a_bits_address[29:26])} == 10'h0;
  wire        requestAIO_2_4 =
    {auto_in_2_a_bits_address[35:30],
     auto_in_2_a_bits_address[29:12] ^ 18'h3A000} == 24'h0;
  wire        requestAIO_2_5 =
    {auto_in_2_a_bits_address[35:30],
     auto_in_2_a_bits_address[29:12] ^ 18'h38020} == 24'h0;
  wire        requestAIO_2_6 =
    {auto_in_2_a_bits_address[35:30],
     auto_in_2_a_bits_address[29:12] ^ 18'h38021} == 24'h0;
  wire        requestAIO_2_7 =
    {auto_in_2_a_bits_address[35:30],
     auto_in_2_a_bits_address[29:16] ^ 14'h3900} == 20'h0;
  wire        requestAIO_3_0 =
    {auto_in_3_a_bits_address[35:32], ~(auto_in_3_a_bits_address[31])} == 5'h0
    | {auto_in_3_a_bits_address[35:33], ~(auto_in_3_a_bits_address[32])} == 4'h0
    | {auto_in_3_a_bits_address[35:34], ~(auto_in_3_a_bits_address[33])} == 3'h0
    | {auto_in_3_a_bits_address[35], ~(auto_in_3_a_bits_address[34])} == 2'h0
    | auto_in_3_a_bits_address[35];
  wire        requestAIO_3_1 =
    auto_in_3_a_bits_address[35:29] == 7'h0
    | {auto_in_3_a_bits_address[35:30], auto_in_3_a_bits_address[29:28] ^ 2'h2} == 8'h0
    | {auto_in_3_a_bits_address[35:30], auto_in_3_a_bits_address[29:27] ^ 3'h6} == 9'h0
    | {auto_in_3_a_bits_address[35:31], ~(auto_in_3_a_bits_address[30])} == 6'h0;
  wire        requestAIO_3_2 =
    {auto_in_3_a_bits_address[35:30],
     auto_in_3_a_bits_address[29:16] ^ 14'h3800} == 20'h0;
  wire        requestAIO_3_3 =
    {auto_in_3_a_bits_address[35:30], ~(auto_in_3_a_bits_address[29:26])} == 10'h0;
  wire        requestAIO_3_4 =
    {auto_in_3_a_bits_address[35:30],
     auto_in_3_a_bits_address[29:12] ^ 18'h3A000} == 24'h0;
  wire        requestAIO_3_5 =
    {auto_in_3_a_bits_address[35:30],
     auto_in_3_a_bits_address[29:12] ^ 18'h38020} == 24'h0;
  wire        requestAIO_3_6 =
    {auto_in_3_a_bits_address[35:30],
     auto_in_3_a_bits_address[29:12] ^ 18'h38021} == 24'h0;
  wire        requestAIO_3_7 =
    {auto_in_3_a_bits_address[35:30],
     auto_in_3_a_bits_address[29:16] ^ 14'h3900} == 20'h0;
  wire        requestDOI_0_1 = auto_out_0_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_0_2 = auto_out_0_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_0_3 = auto_out_0_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_1_1 = auto_out_1_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_1_2 = auto_out_1_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_1_3 = auto_out_1_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_2_1 = auto_out_2_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_2_2 = auto_out_2_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_2_3 = auto_out_2_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_3_1 = auto_out_3_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_3_2 = auto_out_3_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_3_3 = auto_out_3_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_4_1 = auto_out_4_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_4_2 = auto_out_4_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_4_3 = auto_out_4_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_5_1 = auto_out_5_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_5_2 = auto_out_5_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_5_3 = auto_out_5_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_6_1 = auto_out_6_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_6_2 = auto_out_6_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_6_3 = auto_out_6_d_bits_source[4:3] == 2'h0;
  wire        requestDOI_7_1 = auto_out_7_d_bits_source[4:3] == 2'h2;
  wire        requestDOI_7_2 = auto_out_7_d_bits_source[4:3] == 2'h1;
  wire        requestDOI_7_3 = auto_out_7_d_bits_source[4:3] == 2'h0;
  wire        portsAOI_filtered_0_valid = auto_in_0_a_valid & requestAIO_0_0;
  wire        portsAOI_filtered_1_valid = auto_in_0_a_valid & requestAIO_0_1;
  wire        portsAOI_filtered_2_valid = auto_in_0_a_valid & requestAIO_0_2;
  wire        portsAOI_filtered_3_valid = auto_in_0_a_valid & requestAIO_0_3;
  wire        portsAOI_filtered_4_valid = auto_in_0_a_valid & requestAIO_0_4;
  wire        portsAOI_filtered_5_valid = auto_in_0_a_valid & requestAIO_0_5;
  wire        portsAOI_filtered_6_valid = auto_in_0_a_valid & requestAIO_0_6;
  wire        portsAOI_filtered_7_valid = auto_in_0_a_valid & requestAIO_0_7;
  wire        portsAOI_filtered_1_0_valid = auto_in_1_a_valid & requestAIO_1_0;
  wire        portsAOI_filtered_1_1_valid = auto_in_1_a_valid & requestAIO_1_1;
  wire        portsAOI_filtered_1_2_valid = auto_in_1_a_valid & requestAIO_1_2;
  wire        portsAOI_filtered_1_3_valid = auto_in_1_a_valid & requestAIO_1_3;
  wire        portsAOI_filtered_1_4_valid = auto_in_1_a_valid & requestAIO_1_4;
  wire        portsAOI_filtered_1_5_valid = auto_in_1_a_valid & requestAIO_1_5;
  wire        portsAOI_filtered_1_6_valid = auto_in_1_a_valid & requestAIO_1_6;
  wire        portsAOI_filtered_1_7_valid = auto_in_1_a_valid & requestAIO_1_7;
  wire        portsAOI_filtered_2_0_valid = auto_in_2_a_valid & requestAIO_2_0;
  wire        portsAOI_filtered_2_1_valid = auto_in_2_a_valid & requestAIO_2_1;
  wire        portsAOI_filtered_2_2_valid = auto_in_2_a_valid & requestAIO_2_2;
  wire        portsAOI_filtered_2_3_valid = auto_in_2_a_valid & requestAIO_2_3;
  wire        portsAOI_filtered_2_4_valid = auto_in_2_a_valid & requestAIO_2_4;
  wire        portsAOI_filtered_2_5_valid = auto_in_2_a_valid & requestAIO_2_5;
  wire        portsAOI_filtered_2_6_valid = auto_in_2_a_valid & requestAIO_2_6;
  wire        portsAOI_filtered_2_7_valid = auto_in_2_a_valid & requestAIO_2_7;
  wire        portsAOI_filtered_3_0_valid = auto_in_3_a_valid & requestAIO_3_0;
  wire        portsAOI_filtered_3_1_valid = auto_in_3_a_valid & requestAIO_3_1;
  wire        portsAOI_filtered_3_2_valid = auto_in_3_a_valid & requestAIO_3_2;
  wire        portsAOI_filtered_3_3_valid = auto_in_3_a_valid & requestAIO_3_3;
  wire        portsAOI_filtered_3_4_valid = auto_in_3_a_valid & requestAIO_3_4;
  wire        portsAOI_filtered_3_5_valid = auto_in_3_a_valid & requestAIO_3_5;
  wire        portsAOI_filtered_3_6_valid = auto_in_3_a_valid & requestAIO_3_6;
  wire        portsAOI_filtered_3_7_valid = auto_in_3_a_valid & requestAIO_3_7;
  wire        portsDIO_filtered_0_valid =
    auto_out_0_d_valid & (&(auto_out_0_d_bits_source[4:3]));
  wire        portsDIO_filtered_1_valid = auto_out_0_d_valid & requestDOI_0_1;
  wire        portsDIO_filtered_2_valid = auto_out_0_d_valid & requestDOI_0_2;
  wire        portsDIO_filtered_3_valid = auto_out_0_d_valid & requestDOI_0_3;
  wire        portsDIO_filtered_1_0_valid =
    auto_out_1_d_valid & (&(auto_out_1_d_bits_source[4:3]));
  wire        portsDIO_filtered_1_1_valid = auto_out_1_d_valid & requestDOI_1_1;
  wire        portsDIO_filtered_1_2_valid = auto_out_1_d_valid & requestDOI_1_2;
  wire        portsDIO_filtered_1_3_valid = auto_out_1_d_valid & requestDOI_1_3;
  wire        portsDIO_filtered_2_0_valid =
    auto_out_2_d_valid & (&(auto_out_2_d_bits_source[4:3]));
  wire        portsDIO_filtered_2_1_valid = auto_out_2_d_valid & requestDOI_2_1;
  wire        portsDIO_filtered_2_2_valid = auto_out_2_d_valid & requestDOI_2_2;
  wire        portsDIO_filtered_2_3_valid = auto_out_2_d_valid & requestDOI_2_3;
  wire        portsDIO_filtered_3_0_valid =
    auto_out_3_d_valid & (&(auto_out_3_d_bits_source[4:3]));
  wire        portsDIO_filtered_3_1_valid = auto_out_3_d_valid & requestDOI_3_1;
  wire        portsDIO_filtered_3_2_valid = auto_out_3_d_valid & requestDOI_3_2;
  wire        portsDIO_filtered_3_3_valid = auto_out_3_d_valid & requestDOI_3_3;
  wire        portsDIO_filtered_4_0_valid =
    auto_out_4_d_valid & (&(auto_out_4_d_bits_source[4:3]));
  wire        portsDIO_filtered_4_1_valid = auto_out_4_d_valid & requestDOI_4_1;
  wire        portsDIO_filtered_4_2_valid = auto_out_4_d_valid & requestDOI_4_2;
  wire        portsDIO_filtered_4_3_valid = auto_out_4_d_valid & requestDOI_4_3;
  wire        portsDIO_filtered_5_0_valid =
    auto_out_5_d_valid & (&(auto_out_5_d_bits_source[4:3]));
  wire        portsDIO_filtered_5_1_valid = auto_out_5_d_valid & requestDOI_5_1;
  wire        portsDIO_filtered_5_2_valid = auto_out_5_d_valid & requestDOI_5_2;
  wire        portsDIO_filtered_5_3_valid = auto_out_5_d_valid & requestDOI_5_3;
  wire        portsDIO_filtered_6_0_valid =
    auto_out_6_d_valid & (&(auto_out_6_d_bits_source[4:3]));
  wire        portsDIO_filtered_6_1_valid = auto_out_6_d_valid & requestDOI_6_1;
  wire        portsDIO_filtered_6_2_valid = auto_out_6_d_valid & requestDOI_6_2;
  wire        portsDIO_filtered_6_3_valid = auto_out_6_d_valid & requestDOI_6_3;
  wire        portsDIO_filtered_7_0_valid =
    auto_out_7_d_valid & (&(auto_out_7_d_bits_source[4:3]));
  wire        portsDIO_filtered_7_1_valid = auto_out_7_d_valid & requestDOI_7_1;
  wire        portsDIO_filtered_7_2_valid = auto_out_7_d_valid & requestDOI_7_2;
  wire        portsDIO_filtered_7_3_valid = auto_out_7_d_valid & requestDOI_7_3;
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire [3:0]  readys_valid =
    {portsAOI_filtered_3_0_valid,
     portsAOI_filtered_2_0_valid,
     portsAOI_filtered_1_0_valid,
     portsAOI_filtered_0_valid};
  reg  [3:0]  readys_mask;
  wire [3:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [5:0]  _GEN =
    {_readys_filter_T_1[2:0],
     portsAOI_filtered_3_0_valid,
     portsAOI_filtered_2_0_valid,
     portsAOI_filtered_1_0_valid}
    | {_readys_filter_T_1, portsAOI_filtered_3_0_valid, portsAOI_filtered_2_0_valid};
  wire [4:0]  _GEN_0 = _GEN[4:0] | {_readys_filter_T_1[3], _GEN[5:2]};
  wire [3:0]  readys_readys =
    ~({readys_mask[3],
       _readys_filter_T_1[3] | readys_mask[2],
       _GEN[5] | readys_mask[1],
       _GEN_0[4] | readys_mask[0]} & _GEN_0[3:0]);
  wire        winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire        winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  wire        winner_2 = readys_readys[2] & portsAOI_filtered_2_0_valid;
  wire        winner_3 = readys_readys[3] & portsAOI_filtered_3_0_valid;
  reg         state_0;
  reg         state_1;
  reg         state_2;
  reg         state_3;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        muxState_2 = idle ? winner_2 : state_2;
  wire        muxState_3 = idle ? winner_3 : state_3;
  assign allowed_0 = idle ? readys_readys[0] : state_0;
  assign allowed_1 = idle ? readys_readys[1] : state_1;
  assign allowed_2 = idle ? readys_readys[2] : state_2;
  assign allowed_3 = idle ? readys_readys[3] : state_3;
  wire        out_0_a_valid =
    idle
      ? portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid
        | portsAOI_filtered_2_0_valid | portsAOI_filtered_3_0_valid
      : state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid
        | state_2 & portsAOI_filtered_2_0_valid | state_3 & portsAOI_filtered_3_0_valid;
  reg  [2:0]  beatsLeft_1;
  wire        idle_1 = beatsLeft_1 == 3'h0;
  wire [3:0]  readys_valid_1 =
    {portsAOI_filtered_3_1_valid,
     portsAOI_filtered_2_1_valid,
     portsAOI_filtered_1_1_valid,
     portsAOI_filtered_1_valid};
  reg  [3:0]  readys_mask_1;
  wire [3:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [5:0]  _GEN_1 =
    {_readys_filter_T_3[2:0],
     portsAOI_filtered_3_1_valid,
     portsAOI_filtered_2_1_valid,
     portsAOI_filtered_1_1_valid}
    | {_readys_filter_T_3, portsAOI_filtered_3_1_valid, portsAOI_filtered_2_1_valid};
  wire [4:0]  _GEN_2 = _GEN_1[4:0] | {_readys_filter_T_3[3], _GEN_1[5:2]};
  wire [3:0]  readys_readys_1 =
    ~({readys_mask_1[3],
       _readys_filter_T_3[3] | readys_mask_1[2],
       _GEN_1[5] | readys_mask_1[1],
       _GEN_2[4] | readys_mask_1[0]} & _GEN_2[3:0]);
  wire        winner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_valid;
  wire        winner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_valid;
  wire        winner_1_2 = readys_readys_1[2] & portsAOI_filtered_2_1_valid;
  wire        winner_1_3 = readys_readys_1[3] & portsAOI_filtered_3_1_valid;
  reg         state_1_0;
  reg         state_1_1;
  reg         state_1_2;
  reg         state_1_3;
  wire        muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  wire        muxState_1_1 = idle_1 ? winner_1_1 : state_1_1;
  wire        muxState_1_2 = idle_1 ? winner_1_2 : state_1_2;
  wire        muxState_1_3 = idle_1 ? winner_1_3 : state_1_3;
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;
  assign allowed_1_2 = idle_1 ? readys_readys_1[2] : state_1_2;
  assign allowed_1_3 = idle_1 ? readys_readys_1[3] : state_1_3;
  wire        out_1_a_valid =
    idle_1
      ? portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid
        | portsAOI_filtered_2_1_valid | portsAOI_filtered_3_1_valid
      : state_1_0 & portsAOI_filtered_1_valid | state_1_1 & portsAOI_filtered_1_1_valid
        | state_1_2 & portsAOI_filtered_2_1_valid | state_1_3
        & portsAOI_filtered_3_1_valid;
  reg  [2:0]  beatsLeft_2;
  wire        idle_2 = beatsLeft_2 == 3'h0;
  wire [3:0]  readys_valid_2 =
    {portsAOI_filtered_3_2_valid,
     portsAOI_filtered_2_2_valid,
     portsAOI_filtered_1_2_valid,
     portsAOI_filtered_2_valid};
  reg  [3:0]  readys_mask_2;
  wire [3:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [5:0]  _GEN_3 =
    {_readys_filter_T_5[2:0],
     portsAOI_filtered_3_2_valid,
     portsAOI_filtered_2_2_valid,
     portsAOI_filtered_1_2_valid}
    | {_readys_filter_T_5, portsAOI_filtered_3_2_valid, portsAOI_filtered_2_2_valid};
  wire [4:0]  _GEN_4 = _GEN_3[4:0] | {_readys_filter_T_5[3], _GEN_3[5:2]};
  wire [3:0]  readys_readys_2 =
    ~({readys_mask_2[3],
       _readys_filter_T_5[3] | readys_mask_2[2],
       _GEN_3[5] | readys_mask_2[1],
       _GEN_4[4] | readys_mask_2[0]} & _GEN_4[3:0]);
  wire        winner_2_0 = readys_readys_2[0] & portsAOI_filtered_2_valid;
  wire        winner_2_1 = readys_readys_2[1] & portsAOI_filtered_1_2_valid;
  wire        winner_2_2 = readys_readys_2[2] & portsAOI_filtered_2_2_valid;
  wire        winner_2_3 = readys_readys_2[3] & portsAOI_filtered_3_2_valid;
  reg         state_2_0;
  reg         state_2_1;
  reg         state_2_2;
  reg         state_2_3;
  wire        muxState_2_0 = idle_2 ? winner_2_0 : state_2_0;
  wire        muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  wire        muxState_2_2 = idle_2 ? winner_2_2 : state_2_2;
  wire        muxState_2_3 = idle_2 ? winner_2_3 : state_2_3;
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;
  assign allowed_2_2 = idle_2 ? readys_readys_2[2] : state_2_2;
  assign allowed_2_3 = idle_2 ? readys_readys_2[3] : state_2_3;
  wire        out_2_a_valid =
    idle_2
      ? portsAOI_filtered_2_valid | portsAOI_filtered_1_2_valid
        | portsAOI_filtered_2_2_valid | portsAOI_filtered_3_2_valid
      : state_2_0 & portsAOI_filtered_2_valid | state_2_1 & portsAOI_filtered_1_2_valid
        | state_2_2 & portsAOI_filtered_2_2_valid | state_2_3
        & portsAOI_filtered_3_2_valid;
  reg  [2:0]  beatsLeft_3;
  wire        idle_3 = beatsLeft_3 == 3'h0;
  wire [3:0]  readys_valid_3 =
    {portsAOI_filtered_3_3_valid,
     portsAOI_filtered_2_3_valid,
     portsAOI_filtered_1_3_valid,
     portsAOI_filtered_3_valid};
  reg  [3:0]  readys_mask_3;
  wire [3:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [5:0]  _GEN_5 =
    {_readys_filter_T_7[2:0],
     portsAOI_filtered_3_3_valid,
     portsAOI_filtered_2_3_valid,
     portsAOI_filtered_1_3_valid}
    | {_readys_filter_T_7, portsAOI_filtered_3_3_valid, portsAOI_filtered_2_3_valid};
  wire [4:0]  _GEN_6 = _GEN_5[4:0] | {_readys_filter_T_7[3], _GEN_5[5:2]};
  wire [3:0]  readys_readys_3 =
    ~({readys_mask_3[3],
       _readys_filter_T_7[3] | readys_mask_3[2],
       _GEN_5[5] | readys_mask_3[1],
       _GEN_6[4] | readys_mask_3[0]} & _GEN_6[3:0]);
  wire        winner_3_0 = readys_readys_3[0] & portsAOI_filtered_3_valid;
  wire        winner_3_1 = readys_readys_3[1] & portsAOI_filtered_1_3_valid;
  wire        winner_3_2 = readys_readys_3[2] & portsAOI_filtered_2_3_valid;
  wire        winner_3_3 = readys_readys_3[3] & portsAOI_filtered_3_3_valid;
  reg         state_3_0;
  reg         state_3_1;
  reg         state_3_2;
  reg         state_3_3;
  wire        muxState_3_0 = idle_3 ? winner_3_0 : state_3_0;
  wire        muxState_3_1 = idle_3 ? winner_3_1 : state_3_1;
  wire        muxState_3_2 = idle_3 ? winner_3_2 : state_3_2;
  wire        muxState_3_3 = idle_3 ? winner_3_3 : state_3_3;
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;
  assign allowed_3_1 = idle_3 ? readys_readys_3[1] : state_3_1;
  assign allowed_3_2 = idle_3 ? readys_readys_3[2] : state_3_2;
  assign allowed_3_3 = idle_3 ? readys_readys_3[3] : state_3_3;
  wire        out_3_a_valid =
    idle_3
      ? portsAOI_filtered_3_valid | portsAOI_filtered_1_3_valid
        | portsAOI_filtered_2_3_valid | portsAOI_filtered_3_3_valid
      : state_3_0 & portsAOI_filtered_3_valid | state_3_1 & portsAOI_filtered_1_3_valid
        | state_3_2 & portsAOI_filtered_2_3_valid | state_3_3
        & portsAOI_filtered_3_3_valid;
  reg  [2:0]  beatsLeft_4;
  wire        idle_4 = beatsLeft_4 == 3'h0;
  wire [3:0]  readys_valid_4 =
    {portsAOI_filtered_3_4_valid,
     portsAOI_filtered_2_4_valid,
     portsAOI_filtered_1_4_valid,
     portsAOI_filtered_4_valid};
  reg  [3:0]  readys_mask_4;
  wire [3:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [5:0]  _GEN_7 =
    {_readys_filter_T_9[2:0],
     portsAOI_filtered_3_4_valid,
     portsAOI_filtered_2_4_valid,
     portsAOI_filtered_1_4_valid}
    | {_readys_filter_T_9, portsAOI_filtered_3_4_valid, portsAOI_filtered_2_4_valid};
  wire [4:0]  _GEN_8 = _GEN_7[4:0] | {_readys_filter_T_9[3], _GEN_7[5:2]};
  wire [3:0]  readys_readys_4 =
    ~({readys_mask_4[3],
       _readys_filter_T_9[3] | readys_mask_4[2],
       _GEN_7[5] | readys_mask_4[1],
       _GEN_8[4] | readys_mask_4[0]} & _GEN_8[3:0]);
  wire        winner_4_0 = readys_readys_4[0] & portsAOI_filtered_4_valid;
  wire        winner_4_1 = readys_readys_4[1] & portsAOI_filtered_1_4_valid;
  wire        winner_4_2 = readys_readys_4[2] & portsAOI_filtered_2_4_valid;
  wire        winner_4_3 = readys_readys_4[3] & portsAOI_filtered_3_4_valid;
  reg         state_4_0;
  reg         state_4_1;
  reg         state_4_2;
  reg         state_4_3;
  wire        muxState_4_0 = idle_4 ? winner_4_0 : state_4_0;
  wire        muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;
  wire        muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;
  wire        muxState_4_3 = idle_4 ? winner_4_3 : state_4_3;
  assign allowed_4_0 = idle_4 ? readys_readys_4[0] : state_4_0;
  assign allowed_4_1 = idle_4 ? readys_readys_4[1] : state_4_1;
  assign allowed_4_2 = idle_4 ? readys_readys_4[2] : state_4_2;
  assign allowed_4_3 = idle_4 ? readys_readys_4[3] : state_4_3;
  wire        out_4_a_valid =
    idle_4
      ? portsAOI_filtered_4_valid | portsAOI_filtered_1_4_valid
        | portsAOI_filtered_2_4_valid | portsAOI_filtered_3_4_valid
      : state_4_0 & portsAOI_filtered_4_valid | state_4_1 & portsAOI_filtered_1_4_valid
        | state_4_2 & portsAOI_filtered_2_4_valid | state_4_3
        & portsAOI_filtered_3_4_valid;
  reg  [2:0]  beatsLeft_5;
  wire        idle_5 = beatsLeft_5 == 3'h0;
  wire [3:0]  readys_valid_5 =
    {portsAOI_filtered_3_5_valid,
     portsAOI_filtered_2_5_valid,
     portsAOI_filtered_1_5_valid,
     portsAOI_filtered_5_valid};
  reg  [3:0]  readys_mask_5;
  wire [3:0]  _readys_filter_T_11 = readys_valid_5 & ~readys_mask_5;
  wire [5:0]  _GEN_9 =
    {_readys_filter_T_11[2:0],
     portsAOI_filtered_3_5_valid,
     portsAOI_filtered_2_5_valid,
     portsAOI_filtered_1_5_valid}
    | {_readys_filter_T_11, portsAOI_filtered_3_5_valid, portsAOI_filtered_2_5_valid};
  wire [4:0]  _GEN_10 = _GEN_9[4:0] | {_readys_filter_T_11[3], _GEN_9[5:2]};
  wire [3:0]  readys_readys_5 =
    ~({readys_mask_5[3],
       _readys_filter_T_11[3] | readys_mask_5[2],
       _GEN_9[5] | readys_mask_5[1],
       _GEN_10[4] | readys_mask_5[0]} & _GEN_10[3:0]);
  wire        winner_5_0 = readys_readys_5[0] & portsAOI_filtered_5_valid;
  wire        winner_5_1 = readys_readys_5[1] & portsAOI_filtered_1_5_valid;
  wire        winner_5_2 = readys_readys_5[2] & portsAOI_filtered_2_5_valid;
  wire        winner_5_3 = readys_readys_5[3] & portsAOI_filtered_3_5_valid;
  reg         state_5_0;
  reg         state_5_1;
  reg         state_5_2;
  reg         state_5_3;
  wire        muxState_5_0 = idle_5 ? winner_5_0 : state_5_0;
  wire        muxState_5_1 = idle_5 ? winner_5_1 : state_5_1;
  wire        muxState_5_2 = idle_5 ? winner_5_2 : state_5_2;
  wire        muxState_5_3 = idle_5 ? winner_5_3 : state_5_3;
  assign allowed_5_0 = idle_5 ? readys_readys_5[0] : state_5_0;
  assign allowed_5_1 = idle_5 ? readys_readys_5[1] : state_5_1;
  assign allowed_5_2 = idle_5 ? readys_readys_5[2] : state_5_2;
  assign allowed_5_3 = idle_5 ? readys_readys_5[3] : state_5_3;
  wire        out_5_a_valid =
    idle_5
      ? portsAOI_filtered_5_valid | portsAOI_filtered_1_5_valid
        | portsAOI_filtered_2_5_valid | portsAOI_filtered_3_5_valid
      : state_5_0 & portsAOI_filtered_5_valid | state_5_1 & portsAOI_filtered_1_5_valid
        | state_5_2 & portsAOI_filtered_2_5_valid | state_5_3
        & portsAOI_filtered_3_5_valid;
  reg  [2:0]  beatsLeft_6;
  wire        idle_6 = beatsLeft_6 == 3'h0;
  wire [3:0]  readys_valid_6 =
    {portsAOI_filtered_3_6_valid,
     portsAOI_filtered_2_6_valid,
     portsAOI_filtered_1_6_valid,
     portsAOI_filtered_6_valid};
  reg  [3:0]  readys_mask_6;
  wire [3:0]  _readys_filter_T_13 = readys_valid_6 & ~readys_mask_6;
  wire [5:0]  _GEN_11 =
    {_readys_filter_T_13[2:0],
     portsAOI_filtered_3_6_valid,
     portsAOI_filtered_2_6_valid,
     portsAOI_filtered_1_6_valid}
    | {_readys_filter_T_13, portsAOI_filtered_3_6_valid, portsAOI_filtered_2_6_valid};
  wire [4:0]  _GEN_12 = _GEN_11[4:0] | {_readys_filter_T_13[3], _GEN_11[5:2]};
  wire [3:0]  readys_readys_6 =
    ~({readys_mask_6[3],
       _readys_filter_T_13[3] | readys_mask_6[2],
       _GEN_11[5] | readys_mask_6[1],
       _GEN_12[4] | readys_mask_6[0]} & _GEN_12[3:0]);
  wire        winner_6_0 = readys_readys_6[0] & portsAOI_filtered_6_valid;
  wire        winner_6_1 = readys_readys_6[1] & portsAOI_filtered_1_6_valid;
  wire        winner_6_2 = readys_readys_6[2] & portsAOI_filtered_2_6_valid;
  wire        winner_6_3 = readys_readys_6[3] & portsAOI_filtered_3_6_valid;
  reg         state_6_0;
  reg         state_6_1;
  reg         state_6_2;
  reg         state_6_3;
  wire        muxState_6_0 = idle_6 ? winner_6_0 : state_6_0;
  wire        muxState_6_1 = idle_6 ? winner_6_1 : state_6_1;
  wire        muxState_6_2 = idle_6 ? winner_6_2 : state_6_2;
  wire        muxState_6_3 = idle_6 ? winner_6_3 : state_6_3;
  assign allowed_6_0 = idle_6 ? readys_readys_6[0] : state_6_0;
  assign allowed_6_1 = idle_6 ? readys_readys_6[1] : state_6_1;
  assign allowed_6_2 = idle_6 ? readys_readys_6[2] : state_6_2;
  assign allowed_6_3 = idle_6 ? readys_readys_6[3] : state_6_3;
  wire        out_6_a_valid =
    idle_6
      ? portsAOI_filtered_6_valid | portsAOI_filtered_1_6_valid
        | portsAOI_filtered_2_6_valid | portsAOI_filtered_3_6_valid
      : state_6_0 & portsAOI_filtered_6_valid | state_6_1 & portsAOI_filtered_1_6_valid
        | state_6_2 & portsAOI_filtered_2_6_valid | state_6_3
        & portsAOI_filtered_3_6_valid;
  reg  [2:0]  beatsLeft_7;
  wire        idle_7 = beatsLeft_7 == 3'h0;
  wire [3:0]  readys_valid_7 =
    {portsAOI_filtered_3_7_valid,
     portsAOI_filtered_2_7_valid,
     portsAOI_filtered_1_7_valid,
     portsAOI_filtered_7_valid};
  reg  [3:0]  readys_mask_7;
  wire [3:0]  _readys_filter_T_15 = readys_valid_7 & ~readys_mask_7;
  wire [5:0]  _GEN_13 =
    {_readys_filter_T_15[2:0],
     portsAOI_filtered_3_7_valid,
     portsAOI_filtered_2_7_valid,
     portsAOI_filtered_1_7_valid}
    | {_readys_filter_T_15, portsAOI_filtered_3_7_valid, portsAOI_filtered_2_7_valid};
  wire [4:0]  _GEN_14 = _GEN_13[4:0] | {_readys_filter_T_15[3], _GEN_13[5:2]};
  wire [3:0]  readys_readys_7 =
    ~({readys_mask_7[3],
       _readys_filter_T_15[3] | readys_mask_7[2],
       _GEN_13[5] | readys_mask_7[1],
       _GEN_14[4] | readys_mask_7[0]} & _GEN_14[3:0]);
  wire        winner_7_0 = readys_readys_7[0] & portsAOI_filtered_7_valid;
  wire        winner_7_1 = readys_readys_7[1] & portsAOI_filtered_1_7_valid;
  wire        winner_7_2 = readys_readys_7[2] & portsAOI_filtered_2_7_valid;
  wire        winner_7_3 = readys_readys_7[3] & portsAOI_filtered_3_7_valid;
  reg         state_7_0;
  reg         state_7_1;
  reg         state_7_2;
  reg         state_7_3;
  wire        muxState_7_0 = idle_7 ? winner_7_0 : state_7_0;
  wire        muxState_7_1 = idle_7 ? winner_7_1 : state_7_1;
  wire        muxState_7_2 = idle_7 ? winner_7_2 : state_7_2;
  wire        muxState_7_3 = idle_7 ? winner_7_3 : state_7_3;
  assign allowed_7_0 = idle_7 ? readys_readys_7[0] : state_7_0;
  assign allowed_7_1 = idle_7 ? readys_readys_7[1] : state_7_1;
  assign allowed_7_2 = idle_7 ? readys_readys_7[2] : state_7_2;
  assign allowed_7_3 = idle_7 ? readys_readys_7[3] : state_7_3;
  wire        out_7_a_valid =
    idle_7
      ? portsAOI_filtered_7_valid | portsAOI_filtered_1_7_valid
        | portsAOI_filtered_2_7_valid | portsAOI_filtered_3_7_valid
      : state_7_0 & portsAOI_filtered_7_valid | state_7_1 & portsAOI_filtered_1_7_valid
        | state_7_2 & portsAOI_filtered_2_7_valid | state_7_3
        & portsAOI_filtered_3_7_valid;
  reg  [2:0]  beatsLeft_8;
  wire        idle_8 = beatsLeft_8 == 3'h0;
  wire [7:0]  readys_valid_8 =
    {portsDIO_filtered_7_0_valid,
     portsDIO_filtered_6_0_valid,
     portsDIO_filtered_5_0_valid,
     portsDIO_filtered_4_0_valid,
     portsDIO_filtered_3_0_valid,
     portsDIO_filtered_2_0_valid,
     portsDIO_filtered_1_0_valid,
     portsDIO_filtered_0_valid};
  reg  [7:0]  readys_mask_8;
  wire [7:0]  _readys_filter_T_17 = readys_valid_8 & ~readys_mask_8;
  wire [13:0] _GEN_15 =
    {_readys_filter_T_17[6:0],
     portsDIO_filtered_7_0_valid,
     portsDIO_filtered_6_0_valid,
     portsDIO_filtered_5_0_valid,
     portsDIO_filtered_4_0_valid,
     portsDIO_filtered_3_0_valid,
     portsDIO_filtered_2_0_valid,
     portsDIO_filtered_1_0_valid}
    | {_readys_filter_T_17,
       portsDIO_filtered_7_0_valid,
       portsDIO_filtered_6_0_valid,
       portsDIO_filtered_5_0_valid,
       portsDIO_filtered_4_0_valid,
       portsDIO_filtered_3_0_valid,
       portsDIO_filtered_2_0_valid};
  wire [12:0] _GEN_16 = _GEN_15[12:0] | {_readys_filter_T_17[7], _GEN_15[13:2]};
  wire [10:0] _GEN_17 =
    _GEN_16[10:0] | {_readys_filter_T_17[7], _GEN_15[13], _GEN_16[12:4]};
  wire [7:0]  readys_readys_8 =
    ~({readys_mask_8[7],
       _readys_filter_T_17[7] | readys_mask_8[6],
       _GEN_15[13] | readys_mask_8[5],
       _GEN_16[12:11] | readys_mask_8[4:3],
       _GEN_17[10:8] | readys_mask_8[2:0]} & _GEN_17[7:0]);
  wire        winner_8_0 = readys_readys_8[0] & portsDIO_filtered_0_valid;
  wire        winner_8_1 = readys_readys_8[1] & portsDIO_filtered_1_0_valid;
  wire        winner_8_2 = readys_readys_8[2] & portsDIO_filtered_2_0_valid;
  wire        winner_8_3 = readys_readys_8[3] & portsDIO_filtered_3_0_valid;
  wire        winner_8_4 = readys_readys_8[4] & portsDIO_filtered_4_0_valid;
  wire        winner_8_5 = readys_readys_8[5] & portsDIO_filtered_5_0_valid;
  wire        winner_8_6 = readys_readys_8[6] & portsDIO_filtered_6_0_valid;
  wire        winner_8_7 = readys_readys_8[7] & portsDIO_filtered_7_0_valid;
  reg         state_8_0;
  reg         state_8_1;
  reg         state_8_2;
  reg         state_8_3;
  reg         state_8_4;
  reg         state_8_5;
  reg         state_8_6;
  reg         state_8_7;
  wire        muxState_8_0 = idle_8 ? winner_8_0 : state_8_0;
  wire        muxState_8_1 = idle_8 ? winner_8_1 : state_8_1;
  wire        muxState_8_2 = idle_8 ? winner_8_2 : state_8_2;
  wire        muxState_8_3 = idle_8 ? winner_8_3 : state_8_3;
  wire        muxState_8_4 = idle_8 ? winner_8_4 : state_8_4;
  wire        muxState_8_5 = idle_8 ? winner_8_5 : state_8_5;
  wire        muxState_8_6 = idle_8 ? winner_8_6 : state_8_6;
  wire        muxState_8_7 = idle_8 ? winner_8_7 : state_8_7;
  assign allowed_8_0 = idle_8 ? readys_readys_8[0] : state_8_0;
  assign allowed_8_1 = idle_8 ? readys_readys_8[1] : state_8_1;
  assign allowed_8_2 = idle_8 ? readys_readys_8[2] : state_8_2;
  assign allowed_8_3 = idle_8 ? readys_readys_8[3] : state_8_3;
  assign allowed_8_4 = idle_8 ? readys_readys_8[4] : state_8_4;
  assign allowed_8_5 = idle_8 ? readys_readys_8[5] : state_8_5;
  assign allowed_8_6 = idle_8 ? readys_readys_8[6] : state_8_6;
  assign allowed_8_7 = idle_8 ? readys_readys_8[7] : state_8_7;
  wire        in_0_d_valid =
    idle_8
      ? portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid
        | portsDIO_filtered_2_0_valid | portsDIO_filtered_3_0_valid
        | portsDIO_filtered_4_0_valid | portsDIO_filtered_5_0_valid
        | portsDIO_filtered_6_0_valid | portsDIO_filtered_7_0_valid
      : state_8_0 & portsDIO_filtered_0_valid | state_8_1 & portsDIO_filtered_1_0_valid
        | state_8_2 & portsDIO_filtered_2_0_valid | state_8_3
        & portsDIO_filtered_3_0_valid | state_8_4 & portsDIO_filtered_4_0_valid
        | state_8_5 & portsDIO_filtered_5_0_valid | state_8_6
        & portsDIO_filtered_6_0_valid | state_8_7 & portsDIO_filtered_7_0_valid;
  reg  [2:0]  beatsLeft_9;
  wire        idle_9 = beatsLeft_9 == 3'h0;
  wire [7:0]  readys_valid_9 =
    {portsDIO_filtered_7_1_valid,
     portsDIO_filtered_6_1_valid,
     portsDIO_filtered_5_1_valid,
     portsDIO_filtered_4_1_valid,
     portsDIO_filtered_3_1_valid,
     portsDIO_filtered_2_1_valid,
     portsDIO_filtered_1_1_valid,
     portsDIO_filtered_1_valid};
  reg  [7:0]  readys_mask_9;
  wire [7:0]  _readys_filter_T_19 = readys_valid_9 & ~readys_mask_9;
  wire [13:0] _GEN_18 =
    {_readys_filter_T_19[6:0],
     portsDIO_filtered_7_1_valid,
     portsDIO_filtered_6_1_valid,
     portsDIO_filtered_5_1_valid,
     portsDIO_filtered_4_1_valid,
     portsDIO_filtered_3_1_valid,
     portsDIO_filtered_2_1_valid,
     portsDIO_filtered_1_1_valid}
    | {_readys_filter_T_19,
       portsDIO_filtered_7_1_valid,
       portsDIO_filtered_6_1_valid,
       portsDIO_filtered_5_1_valid,
       portsDIO_filtered_4_1_valid,
       portsDIO_filtered_3_1_valid,
       portsDIO_filtered_2_1_valid};
  wire [12:0] _GEN_19 = _GEN_18[12:0] | {_readys_filter_T_19[7], _GEN_18[13:2]};
  wire [10:0] _GEN_20 =
    _GEN_19[10:0] | {_readys_filter_T_19[7], _GEN_18[13], _GEN_19[12:4]};
  wire [7:0]  readys_readys_9 =
    ~({readys_mask_9[7],
       _readys_filter_T_19[7] | readys_mask_9[6],
       _GEN_18[13] | readys_mask_9[5],
       _GEN_19[12:11] | readys_mask_9[4:3],
       _GEN_20[10:8] | readys_mask_9[2:0]} & _GEN_20[7:0]);
  wire        winner_9_0 = readys_readys_9[0] & portsDIO_filtered_1_valid;
  wire        winner_9_1 = readys_readys_9[1] & portsDIO_filtered_1_1_valid;
  wire        winner_9_2 = readys_readys_9[2] & portsDIO_filtered_2_1_valid;
  wire        winner_9_3 = readys_readys_9[3] & portsDIO_filtered_3_1_valid;
  wire        winner_9_4 = readys_readys_9[4] & portsDIO_filtered_4_1_valid;
  wire        winner_9_5 = readys_readys_9[5] & portsDIO_filtered_5_1_valid;
  wire        winner_9_6 = readys_readys_9[6] & portsDIO_filtered_6_1_valid;
  wire        winner_9_7 = readys_readys_9[7] & portsDIO_filtered_7_1_valid;
  reg         state_9_0;
  reg         state_9_1;
  reg         state_9_2;
  reg         state_9_3;
  reg         state_9_4;
  reg         state_9_5;
  reg         state_9_6;
  reg         state_9_7;
  wire        muxState_9_0 = idle_9 ? winner_9_0 : state_9_0;
  wire        muxState_9_1 = idle_9 ? winner_9_1 : state_9_1;
  wire        muxState_9_2 = idle_9 ? winner_9_2 : state_9_2;
  wire        muxState_9_3 = idle_9 ? winner_9_3 : state_9_3;
  wire        muxState_9_4 = idle_9 ? winner_9_4 : state_9_4;
  wire        muxState_9_5 = idle_9 ? winner_9_5 : state_9_5;
  wire        muxState_9_6 = idle_9 ? winner_9_6 : state_9_6;
  wire        muxState_9_7 = idle_9 ? winner_9_7 : state_9_7;
  assign allowed_9_0 = idle_9 ? readys_readys_9[0] : state_9_0;
  assign allowed_9_1 = idle_9 ? readys_readys_9[1] : state_9_1;
  assign allowed_9_2 = idle_9 ? readys_readys_9[2] : state_9_2;
  assign allowed_9_3 = idle_9 ? readys_readys_9[3] : state_9_3;
  assign allowed_9_4 = idle_9 ? readys_readys_9[4] : state_9_4;
  assign allowed_9_5 = idle_9 ? readys_readys_9[5] : state_9_5;
  assign allowed_9_6 = idle_9 ? readys_readys_9[6] : state_9_6;
  assign allowed_9_7 = idle_9 ? readys_readys_9[7] : state_9_7;
  wire        in_1_d_valid =
    idle_9
      ? portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid
        | portsDIO_filtered_2_1_valid | portsDIO_filtered_3_1_valid
        | portsDIO_filtered_4_1_valid | portsDIO_filtered_5_1_valid
        | portsDIO_filtered_6_1_valid | portsDIO_filtered_7_1_valid
      : state_9_0 & portsDIO_filtered_1_valid | state_9_1 & portsDIO_filtered_1_1_valid
        | state_9_2 & portsDIO_filtered_2_1_valid | state_9_3
        & portsDIO_filtered_3_1_valid | state_9_4 & portsDIO_filtered_4_1_valid
        | state_9_5 & portsDIO_filtered_5_1_valid | state_9_6
        & portsDIO_filtered_6_1_valid | state_9_7 & portsDIO_filtered_7_1_valid;
  reg  [2:0]  beatsLeft_10;
  wire        idle_10 = beatsLeft_10 == 3'h0;
  wire [7:0]  readys_valid_10 =
    {portsDIO_filtered_7_2_valid,
     portsDIO_filtered_6_2_valid,
     portsDIO_filtered_5_2_valid,
     portsDIO_filtered_4_2_valid,
     portsDIO_filtered_3_2_valid,
     portsDIO_filtered_2_2_valid,
     portsDIO_filtered_1_2_valid,
     portsDIO_filtered_2_valid};
  reg  [7:0]  readys_mask_10;
  wire [7:0]  _readys_filter_T_21 = readys_valid_10 & ~readys_mask_10;
  wire [13:0] _GEN_21 =
    {_readys_filter_T_21[6:0],
     portsDIO_filtered_7_2_valid,
     portsDIO_filtered_6_2_valid,
     portsDIO_filtered_5_2_valid,
     portsDIO_filtered_4_2_valid,
     portsDIO_filtered_3_2_valid,
     portsDIO_filtered_2_2_valid,
     portsDIO_filtered_1_2_valid}
    | {_readys_filter_T_21,
       portsDIO_filtered_7_2_valid,
       portsDIO_filtered_6_2_valid,
       portsDIO_filtered_5_2_valid,
       portsDIO_filtered_4_2_valid,
       portsDIO_filtered_3_2_valid,
       portsDIO_filtered_2_2_valid};
  wire [12:0] _GEN_22 = _GEN_21[12:0] | {_readys_filter_T_21[7], _GEN_21[13:2]};
  wire [10:0] _GEN_23 =
    _GEN_22[10:0] | {_readys_filter_T_21[7], _GEN_21[13], _GEN_22[12:4]};
  wire [7:0]  readys_readys_10 =
    ~({readys_mask_10[7],
       _readys_filter_T_21[7] | readys_mask_10[6],
       _GEN_21[13] | readys_mask_10[5],
       _GEN_22[12:11] | readys_mask_10[4:3],
       _GEN_23[10:8] | readys_mask_10[2:0]} & _GEN_23[7:0]);
  wire        winner_10_0 = readys_readys_10[0] & portsDIO_filtered_2_valid;
  wire        winner_10_1 = readys_readys_10[1] & portsDIO_filtered_1_2_valid;
  wire        winner_10_2 = readys_readys_10[2] & portsDIO_filtered_2_2_valid;
  wire        winner_10_3 = readys_readys_10[3] & portsDIO_filtered_3_2_valid;
  wire        winner_10_4 = readys_readys_10[4] & portsDIO_filtered_4_2_valid;
  wire        winner_10_5 = readys_readys_10[5] & portsDIO_filtered_5_2_valid;
  wire        winner_10_6 = readys_readys_10[6] & portsDIO_filtered_6_2_valid;
  wire        winner_10_7 = readys_readys_10[7] & portsDIO_filtered_7_2_valid;
  reg         state_10_0;
  reg         state_10_1;
  reg         state_10_2;
  reg         state_10_3;
  reg         state_10_4;
  reg         state_10_5;
  reg         state_10_6;
  reg         state_10_7;
  wire        muxState_10_0 = idle_10 ? winner_10_0 : state_10_0;
  wire        muxState_10_1 = idle_10 ? winner_10_1 : state_10_1;
  wire        muxState_10_2 = idle_10 ? winner_10_2 : state_10_2;
  wire        muxState_10_3 = idle_10 ? winner_10_3 : state_10_3;
  wire        muxState_10_4 = idle_10 ? winner_10_4 : state_10_4;
  wire        muxState_10_5 = idle_10 ? winner_10_5 : state_10_5;
  wire        muxState_10_6 = idle_10 ? winner_10_6 : state_10_6;
  wire        muxState_10_7 = idle_10 ? winner_10_7 : state_10_7;
  assign allowed_10_0 = idle_10 ? readys_readys_10[0] : state_10_0;
  assign allowed_10_1 = idle_10 ? readys_readys_10[1] : state_10_1;
  assign allowed_10_2 = idle_10 ? readys_readys_10[2] : state_10_2;
  assign allowed_10_3 = idle_10 ? readys_readys_10[3] : state_10_3;
  assign allowed_10_4 = idle_10 ? readys_readys_10[4] : state_10_4;
  assign allowed_10_5 = idle_10 ? readys_readys_10[5] : state_10_5;
  assign allowed_10_6 = idle_10 ? readys_readys_10[6] : state_10_6;
  assign allowed_10_7 = idle_10 ? readys_readys_10[7] : state_10_7;
  wire        in_2_d_valid =
    idle_10
      ? portsDIO_filtered_2_valid | portsDIO_filtered_1_2_valid
        | portsDIO_filtered_2_2_valid | portsDIO_filtered_3_2_valid
        | portsDIO_filtered_4_2_valid | portsDIO_filtered_5_2_valid
        | portsDIO_filtered_6_2_valid | portsDIO_filtered_7_2_valid
      : state_10_0 & portsDIO_filtered_2_valid | state_10_1 & portsDIO_filtered_1_2_valid
        | state_10_2 & portsDIO_filtered_2_2_valid | state_10_3
        & portsDIO_filtered_3_2_valid | state_10_4 & portsDIO_filtered_4_2_valid
        | state_10_5 & portsDIO_filtered_5_2_valid | state_10_6
        & portsDIO_filtered_6_2_valid | state_10_7 & portsDIO_filtered_7_2_valid;
  reg  [2:0]  beatsLeft_11;
  wire        idle_11 = beatsLeft_11 == 3'h0;
  wire [7:0]  readys_valid_11 =
    {portsDIO_filtered_7_3_valid,
     portsDIO_filtered_6_3_valid,
     portsDIO_filtered_5_3_valid,
     portsDIO_filtered_4_3_valid,
     portsDIO_filtered_3_3_valid,
     portsDIO_filtered_2_3_valid,
     portsDIO_filtered_1_3_valid,
     portsDIO_filtered_3_valid};
  reg  [7:0]  readys_mask_11;
  wire [7:0]  _readys_filter_T_23 = readys_valid_11 & ~readys_mask_11;
  wire [13:0] _GEN_24 =
    {_readys_filter_T_23[6:0],
     portsDIO_filtered_7_3_valid,
     portsDIO_filtered_6_3_valid,
     portsDIO_filtered_5_3_valid,
     portsDIO_filtered_4_3_valid,
     portsDIO_filtered_3_3_valid,
     portsDIO_filtered_2_3_valid,
     portsDIO_filtered_1_3_valid}
    | {_readys_filter_T_23,
       portsDIO_filtered_7_3_valid,
       portsDIO_filtered_6_3_valid,
       portsDIO_filtered_5_3_valid,
       portsDIO_filtered_4_3_valid,
       portsDIO_filtered_3_3_valid,
       portsDIO_filtered_2_3_valid};
  wire [12:0] _GEN_25 = _GEN_24[12:0] | {_readys_filter_T_23[7], _GEN_24[13:2]};
  wire [10:0] _GEN_26 =
    _GEN_25[10:0] | {_readys_filter_T_23[7], _GEN_24[13], _GEN_25[12:4]};
  wire [7:0]  readys_readys_11 =
    ~({readys_mask_11[7],
       _readys_filter_T_23[7] | readys_mask_11[6],
       _GEN_24[13] | readys_mask_11[5],
       _GEN_25[12:11] | readys_mask_11[4:3],
       _GEN_26[10:8] | readys_mask_11[2:0]} & _GEN_26[7:0]);
  wire        winner_11_0 = readys_readys_11[0] & portsDIO_filtered_3_valid;
  wire        winner_11_1 = readys_readys_11[1] & portsDIO_filtered_1_3_valid;
  wire        winner_11_2 = readys_readys_11[2] & portsDIO_filtered_2_3_valid;
  wire        winner_11_3 = readys_readys_11[3] & portsDIO_filtered_3_3_valid;
  wire        winner_11_4 = readys_readys_11[4] & portsDIO_filtered_4_3_valid;
  wire        winner_11_5 = readys_readys_11[5] & portsDIO_filtered_5_3_valid;
  wire        winner_11_6 = readys_readys_11[6] & portsDIO_filtered_6_3_valid;
  wire        winner_11_7 = readys_readys_11[7] & portsDIO_filtered_7_3_valid;
  reg         state_11_0;
  reg         state_11_1;
  reg         state_11_2;
  reg         state_11_3;
  reg         state_11_4;
  reg         state_11_5;
  reg         state_11_6;
  reg         state_11_7;
  wire        muxState_11_0 = idle_11 ? winner_11_0 : state_11_0;
  wire        muxState_11_1 = idle_11 ? winner_11_1 : state_11_1;
  wire        muxState_11_2 = idle_11 ? winner_11_2 : state_11_2;
  wire        muxState_11_3 = idle_11 ? winner_11_3 : state_11_3;
  wire        muxState_11_4 = idle_11 ? winner_11_4 : state_11_4;
  wire        muxState_11_5 = idle_11 ? winner_11_5 : state_11_5;
  wire        muxState_11_6 = idle_11 ? winner_11_6 : state_11_6;
  wire        muxState_11_7 = idle_11 ? winner_11_7 : state_11_7;
  assign allowed_11_0 = idle_11 ? readys_readys_11[0] : state_11_0;
  assign allowed_11_1 = idle_11 ? readys_readys_11[1] : state_11_1;
  assign allowed_11_2 = idle_11 ? readys_readys_11[2] : state_11_2;
  assign allowed_11_3 = idle_11 ? readys_readys_11[3] : state_11_3;
  assign allowed_11_4 = idle_11 ? readys_readys_11[4] : state_11_4;
  assign allowed_11_5 = idle_11 ? readys_readys_11[5] : state_11_5;
  assign allowed_11_6 = idle_11 ? readys_readys_11[6] : state_11_6;
  assign allowed_11_7 = idle_11 ? readys_readys_11[7] : state_11_7;
  wire        in_3_d_valid =
    idle_11
      ? portsDIO_filtered_3_valid | portsDIO_filtered_1_3_valid
        | portsDIO_filtered_2_3_valid | portsDIO_filtered_3_3_valid
        | portsDIO_filtered_4_3_valid | portsDIO_filtered_5_3_valid
        | portsDIO_filtered_6_3_valid | portsDIO_filtered_7_3_valid
      : state_11_0 & portsDIO_filtered_3_valid | state_11_1 & portsDIO_filtered_1_3_valid
        | state_11_2 & portsDIO_filtered_2_3_valid | state_11_3
        & portsDIO_filtered_3_3_valid | state_11_4 & portsDIO_filtered_4_3_valid
        | state_11_5 & portsDIO_filtered_5_3_valid | state_11_6
        & portsDIO_filtered_6_3_valid | state_11_7 & portsDIO_filtered_7_3_valid;
  wire [3:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [3:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_8 = readys_readys_1 & readys_valid_1;
  wire [3:0]  _readys_mask_T_11 = _readys_mask_T_8 | {_readys_mask_T_8[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_16 = readys_readys_2 & readys_valid_2;
  wire [3:0]  _readys_mask_T_19 = _readys_mask_T_16 | {_readys_mask_T_16[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_24 = readys_readys_3 & readys_valid_3;
  wire [3:0]  _readys_mask_T_27 = _readys_mask_T_24 | {_readys_mask_T_24[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_32 = readys_readys_4 & readys_valid_4;
  wire [3:0]  _readys_mask_T_35 = _readys_mask_T_32 | {_readys_mask_T_32[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_40 = readys_readys_5 & readys_valid_5;
  wire [3:0]  _readys_mask_T_43 = _readys_mask_T_40 | {_readys_mask_T_40[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_48 = readys_readys_6 & readys_valid_6;
  wire [3:0]  _readys_mask_T_51 = _readys_mask_T_48 | {_readys_mask_T_48[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_56 = readys_readys_7 & readys_valid_7;
  wire [3:0]  _readys_mask_T_59 = _readys_mask_T_56 | {_readys_mask_T_56[2:0], 1'h0};
  wire [7:0]  _readys_mask_T_64 = readys_readys_8 & readys_valid_8;
  wire [7:0]  _readys_mask_T_67 = _readys_mask_T_64 | {_readys_mask_T_64[6:0], 1'h0};
  wire [7:0]  _readys_mask_T_70 = _readys_mask_T_67 | {_readys_mask_T_67[5:0], 2'h0};
  wire [7:0]  _readys_mask_T_75 = readys_readys_9 & readys_valid_9;
  wire [7:0]  _readys_mask_T_78 = _readys_mask_T_75 | {_readys_mask_T_75[6:0], 1'h0};
  wire [7:0]  _readys_mask_T_81 = _readys_mask_T_78 | {_readys_mask_T_78[5:0], 2'h0};
  wire [7:0]  _readys_mask_T_86 = readys_readys_10 & readys_valid_10;
  wire [7:0]  _readys_mask_T_89 = _readys_mask_T_86 | {_readys_mask_T_86[6:0], 1'h0};
  wire [7:0]  _readys_mask_T_92 = _readys_mask_T_89 | {_readys_mask_T_89[5:0], 2'h0};
  wire [7:0]  _readys_mask_T_97 = readys_readys_11 & readys_valid_11;
  wire [7:0]  _readys_mask_T_100 = _readys_mask_T_97 | {_readys_mask_T_97[6:0], 1'h0};
  wire [7:0]  _readys_mask_T_103 = _readys_mask_T_100 | {_readys_mask_T_100[5:0], 2'h0};
  wire [12:0] _beatsAI_decode_T = 13'h3F << auto_in_0_a_bits_size;
  wire [12:0] _beatsAI_decode_T_3 = 13'h3F << auto_in_1_a_bits_size;
  wire [12:0] _beatsAI_decode_T_6 = 13'h3F << auto_in_2_a_bits_size;
  wire [12:0] _beatsAI_decode_T_9 = 13'h3F << auto_in_3_a_bits_size;
  wire [12:0] _beatsDO_decode_T = 13'h3F << auto_out_0_d_bits_size;
  wire [11:0] _beatsDO_decode_T_3 = 12'h1F << auto_out_1_d_bits_size;
  wire        latch = idle & auto_out_0_a_ready;
  wire        latch_1 = idle_1 & auto_out_1_a_ready;
  wire        latch_2 = idle_2 & auto_out_2_a_ready;
  wire        latch_3 = idle_3 & auto_out_3_a_ready;
  wire        latch_4 = idle_4 & auto_out_4_a_ready;
  wire        latch_5 = idle_5 & auto_out_5_a_ready;
  wire        latch_6 = idle_6 & auto_out_6_a_ready;
  wire        latch_7 = idle_7 & auto_out_7_a_ready;
  wire        latch_8 = idle_8 & auto_in_0_d_ready;
  wire        latch_9 = idle_9 & auto_in_1_d_ready;
  wire        latch_10 = idle_10 & auto_in_2_d_ready;
  wire        latch_11 = idle_11 & auto_in_3_d_ready;
  wire [2:0]  maskedBeats_0_8 =
    winner_8_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T[5:3]) : 3'h0;
  wire [2:0]  maskedBeats_0_9 =
    winner_9_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T[5:3]) : 3'h0;
  wire [2:0]  maskedBeats_0_10 =
    winner_10_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T[5:3]) : 3'h0;
  wire [2:0]  maskedBeats_0_11 =
    winner_11_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T[5:3]) : 3'h0;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 3'h0;
      readys_mask <= 4'hF;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      beatsLeft_1 <= 3'h0;
      readys_mask_1 <= 4'hF;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      state_1_2 <= 1'h0;
      state_1_3 <= 1'h0;
      beatsLeft_2 <= 3'h0;
      readys_mask_2 <= 4'hF;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      state_2_2 <= 1'h0;
      state_2_3 <= 1'h0;
      beatsLeft_3 <= 3'h0;
      readys_mask_3 <= 4'hF;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
      state_3_2 <= 1'h0;
      state_3_3 <= 1'h0;
      beatsLeft_4 <= 3'h0;
      readys_mask_4 <= 4'hF;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
      state_4_3 <= 1'h0;
      beatsLeft_5 <= 3'h0;
      readys_mask_5 <= 4'hF;
      state_5_0 <= 1'h0;
      state_5_1 <= 1'h0;
      state_5_2 <= 1'h0;
      state_5_3 <= 1'h0;
      beatsLeft_6 <= 3'h0;
      readys_mask_6 <= 4'hF;
      state_6_0 <= 1'h0;
      state_6_1 <= 1'h0;
      state_6_2 <= 1'h0;
      state_6_3 <= 1'h0;
      beatsLeft_7 <= 3'h0;
      readys_mask_7 <= 4'hF;
      state_7_0 <= 1'h0;
      state_7_1 <= 1'h0;
      state_7_2 <= 1'h0;
      state_7_3 <= 1'h0;
      beatsLeft_8 <= 3'h0;
      readys_mask_8 <= 8'hFF;
      state_8_0 <= 1'h0;
      state_8_1 <= 1'h0;
      state_8_2 <= 1'h0;
      state_8_3 <= 1'h0;
      state_8_4 <= 1'h0;
      state_8_5 <= 1'h0;
      state_8_6 <= 1'h0;
      state_8_7 <= 1'h0;
      beatsLeft_9 <= 3'h0;
      readys_mask_9 <= 8'hFF;
      state_9_0 <= 1'h0;
      state_9_1 <= 1'h0;
      state_9_2 <= 1'h0;
      state_9_3 <= 1'h0;
      state_9_4 <= 1'h0;
      state_9_5 <= 1'h0;
      state_9_6 <= 1'h0;
      state_9_7 <= 1'h0;
      beatsLeft_10 <= 3'h0;
      readys_mask_10 <= 8'hFF;
      state_10_0 <= 1'h0;
      state_10_1 <= 1'h0;
      state_10_2 <= 1'h0;
      state_10_3 <= 1'h0;
      state_10_4 <= 1'h0;
      state_10_5 <= 1'h0;
      state_10_6 <= 1'h0;
      state_10_7 <= 1'h0;
      beatsLeft_11 <= 3'h0;
      readys_mask_11 <= 8'hFF;
      state_11_0 <= 1'h0;
      state_11_1 <= 1'h0;
      state_11_2 <= 1'h0;
      state_11_3 <= 1'h0;
      state_11_4 <= 1'h0;
      state_11_5 <= 1'h0;
      state_11_6 <= 1'h0;
      state_11_7 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          (winner_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft <= 3'(beatsLeft - {2'h0, auto_out_0_a_ready & out_0_a_valid});
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_3 | {_readys_mask_T_3[1:0], 2'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
      end
      if (latch_1)
        beatsLeft_1 <=
          (winner_1_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_1_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_1_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_1_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_1 <= 3'(beatsLeft_1 - {2'h0, auto_out_1_a_ready & out_1_a_valid});
      if (latch_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_11 | {_readys_mask_T_11[1:0], 2'h0};
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
        state_1_2 <= winner_1_2;
        state_1_3 <= winner_1_3;
      end
      if (latch_2)
        beatsLeft_2 <=
          (winner_2_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_2_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_2_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_2_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_2 <= 3'(beatsLeft_2 - {2'h0, auto_out_2_a_ready & out_2_a_valid});
      if (latch_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_19 | {_readys_mask_T_19[1:0], 2'h0};
      if (idle_2) begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
        state_2_2 <= winner_2_2;
        state_2_3 <= winner_2_3;
      end
      if (latch_3)
        beatsLeft_3 <=
          (winner_3_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_3_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_3_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_3_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_3 <= 3'(beatsLeft_3 - {2'h0, auto_out_3_a_ready & out_3_a_valid});
      if (latch_3 & (|readys_valid_3))
        readys_mask_3 <= _readys_mask_T_27 | {_readys_mask_T_27[1:0], 2'h0};
      if (idle_3) begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
        state_3_2 <= winner_3_2;
        state_3_3 <= winner_3_3;
      end
      if (latch_4)
        beatsLeft_4 <=
          (winner_4_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_4_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_4_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_4_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_4 <= 3'(beatsLeft_4 - {2'h0, auto_out_4_a_ready & out_4_a_valid});
      if (latch_4 & (|readys_valid_4))
        readys_mask_4 <= _readys_mask_T_35 | {_readys_mask_T_35[1:0], 2'h0};
      if (idle_4) begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
        state_4_3 <= winner_4_3;
      end
      if (latch_5)
        beatsLeft_5 <=
          (winner_5_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_5_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_5_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_5_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_5 <= 3'(beatsLeft_5 - {2'h0, auto_out_5_a_ready & out_5_a_valid});
      if (latch_5 & (|readys_valid_5))
        readys_mask_5 <= _readys_mask_T_43 | {_readys_mask_T_43[1:0], 2'h0};
      if (idle_5) begin
        state_5_0 <= winner_5_0;
        state_5_1 <= winner_5_1;
        state_5_2 <= winner_5_2;
        state_5_3 <= winner_5_3;
      end
      if (latch_6)
        beatsLeft_6 <=
          (winner_6_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_6_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_6_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_6_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_6 <= 3'(beatsLeft_6 - {2'h0, auto_out_6_a_ready & out_6_a_valid});
      if (latch_6 & (|readys_valid_6))
        readys_mask_6 <= _readys_mask_T_51 | {_readys_mask_T_51[1:0], 2'h0};
      if (idle_6) begin
        state_6_0 <= winner_6_0;
        state_6_1 <= winner_6_1;
        state_6_2 <= winner_6_2;
        state_6_3 <= winner_6_3;
      end
      if (latch_7)
        beatsLeft_7 <=
          (winner_7_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T[5:3]) : 3'h0)
          | (winner_7_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_3[5:3])
               : 3'h0)
          | (winner_7_2 & ~(auto_in_2_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_6[5:3])
               : 3'h0)
          | (winner_7_3 & ~(auto_in_3_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft_7 <= 3'(beatsLeft_7 - {2'h0, auto_out_7_a_ready & out_7_a_valid});
      if (latch_7 & (|readys_valid_7))
        readys_mask_7 <= _readys_mask_T_59 | {_readys_mask_T_59[1:0], 2'h0};
      if (idle_7) begin
        state_7_0 <= winner_7_0;
        state_7_1 <= winner_7_1;
        state_7_2 <= winner_7_2;
        state_7_3 <= winner_7_3;
      end
      if (latch_8)
        beatsLeft_8 <=
          {maskedBeats_0_8[2],
           maskedBeats_0_8[1:0]
             | (winner_8_1 & auto_out_1_d_bits_opcode[0]
                  ? ~(_beatsDO_decode_T_3[4:3])
                  : 2'h0)};
      else
        beatsLeft_8 <= 3'(beatsLeft_8 - {2'h0, auto_in_0_d_ready & in_0_d_valid});
      if (latch_8 & (|readys_valid_8))
        readys_mask_8 <= _readys_mask_T_70 | {_readys_mask_T_70[3:0], 4'h0};
      if (idle_8) begin
        state_8_0 <= winner_8_0;
        state_8_1 <= winner_8_1;
        state_8_2 <= winner_8_2;
        state_8_3 <= winner_8_3;
        state_8_4 <= winner_8_4;
        state_8_5 <= winner_8_5;
        state_8_6 <= winner_8_6;
        state_8_7 <= winner_8_7;
      end
      if (latch_9)
        beatsLeft_9 <=
          {maskedBeats_0_9[2],
           maskedBeats_0_9[1:0]
             | (winner_9_1 & auto_out_1_d_bits_opcode[0]
                  ? ~(_beatsDO_decode_T_3[4:3])
                  : 2'h0)};
      else
        beatsLeft_9 <= 3'(beatsLeft_9 - {2'h0, auto_in_1_d_ready & in_1_d_valid});
      if (latch_9 & (|readys_valid_9))
        readys_mask_9 <= _readys_mask_T_81 | {_readys_mask_T_81[3:0], 4'h0};
      if (idle_9) begin
        state_9_0 <= winner_9_0;
        state_9_1 <= winner_9_1;
        state_9_2 <= winner_9_2;
        state_9_3 <= winner_9_3;
        state_9_4 <= winner_9_4;
        state_9_5 <= winner_9_5;
        state_9_6 <= winner_9_6;
        state_9_7 <= winner_9_7;
      end
      if (latch_10)
        beatsLeft_10 <=
          {maskedBeats_0_10[2],
           maskedBeats_0_10[1:0]
             | (winner_10_1 & auto_out_1_d_bits_opcode[0]
                  ? ~(_beatsDO_decode_T_3[4:3])
                  : 2'h0)};
      else
        beatsLeft_10 <= 3'(beatsLeft_10 - {2'h0, auto_in_2_d_ready & in_2_d_valid});
      if (latch_10 & (|readys_valid_10))
        readys_mask_10 <= _readys_mask_T_92 | {_readys_mask_T_92[3:0], 4'h0};
      if (idle_10) begin
        state_10_0 <= winner_10_0;
        state_10_1 <= winner_10_1;
        state_10_2 <= winner_10_2;
        state_10_3 <= winner_10_3;
        state_10_4 <= winner_10_4;
        state_10_5 <= winner_10_5;
        state_10_6 <= winner_10_6;
        state_10_7 <= winner_10_7;
      end
      if (latch_11)
        beatsLeft_11 <=
          {maskedBeats_0_11[2],
           maskedBeats_0_11[1:0]
             | (winner_11_1 & auto_out_1_d_bits_opcode[0]
                  ? ~(_beatsDO_decode_T_3[4:3])
                  : 2'h0)};
      else
        beatsLeft_11 <= 3'(beatsLeft_11 - {2'h0, auto_in_3_d_ready & in_3_d_valid});
      if (latch_11 & (|readys_valid_11))
        readys_mask_11 <= _readys_mask_T_103 | {_readys_mask_T_103[3:0], 4'h0};
      if (idle_11) begin
        state_11_0 <= winner_11_0;
        state_11_1 <= winner_11_1;
        state_11_2 <= winner_11_2;
        state_11_3 <= winner_11_3;
        state_11_4 <= winner_11_4;
        state_11_5 <= winner_11_5;
        state_11_6 <= winner_11_6;
        state_11_7 <= winner_11_7;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:5];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        beatsLeft = _RANDOM[3'h0][2:0];
        readys_mask = _RANDOM[3'h0][6:3];
        state_0 = _RANDOM[3'h0][7];
        state_1 = _RANDOM[3'h0][8];
        state_2 = _RANDOM[3'h0][9];
        state_3 = _RANDOM[3'h0][10];
        beatsLeft_1 = _RANDOM[3'h0][13:11];
        readys_mask_1 = _RANDOM[3'h0][17:14];
        state_1_0 = _RANDOM[3'h0][18];
        state_1_1 = _RANDOM[3'h0][19];
        state_1_2 = _RANDOM[3'h0][20];
        state_1_3 = _RANDOM[3'h0][21];
        beatsLeft_2 = _RANDOM[3'h0][24:22];
        readys_mask_2 = _RANDOM[3'h0][28:25];
        state_2_0 = _RANDOM[3'h0][29];
        state_2_1 = _RANDOM[3'h0][30];
        state_2_2 = _RANDOM[3'h0][31];
        state_2_3 = _RANDOM[3'h1][0];
        beatsLeft_3 = _RANDOM[3'h1][3:1];
        readys_mask_3 = _RANDOM[3'h1][7:4];
        state_3_0 = _RANDOM[3'h1][8];
        state_3_1 = _RANDOM[3'h1][9];
        state_3_2 = _RANDOM[3'h1][10];
        state_3_3 = _RANDOM[3'h1][11];
        beatsLeft_4 = _RANDOM[3'h1][14:12];
        readys_mask_4 = _RANDOM[3'h1][18:15];
        state_4_0 = _RANDOM[3'h1][19];
        state_4_1 = _RANDOM[3'h1][20];
        state_4_2 = _RANDOM[3'h1][21];
        state_4_3 = _RANDOM[3'h1][22];
        beatsLeft_5 = _RANDOM[3'h1][25:23];
        readys_mask_5 = _RANDOM[3'h1][29:26];
        state_5_0 = _RANDOM[3'h1][30];
        state_5_1 = _RANDOM[3'h1][31];
        state_5_2 = _RANDOM[3'h2][0];
        state_5_3 = _RANDOM[3'h2][1];
        beatsLeft_6 = _RANDOM[3'h2][4:2];
        readys_mask_6 = _RANDOM[3'h2][8:5];
        state_6_0 = _RANDOM[3'h2][9];
        state_6_1 = _RANDOM[3'h2][10];
        state_6_2 = _RANDOM[3'h2][11];
        state_6_3 = _RANDOM[3'h2][12];
        beatsLeft_7 = _RANDOM[3'h2][15:13];
        readys_mask_7 = _RANDOM[3'h2][19:16];
        state_7_0 = _RANDOM[3'h2][20];
        state_7_1 = _RANDOM[3'h2][21];
        state_7_2 = _RANDOM[3'h2][22];
        state_7_3 = _RANDOM[3'h2][23];
        beatsLeft_8 = _RANDOM[3'h2][26:24];
        readys_mask_8 = {_RANDOM[3'h2][31:27], _RANDOM[3'h3][2:0]};
        state_8_0 = _RANDOM[3'h3][3];
        state_8_1 = _RANDOM[3'h3][4];
        state_8_2 = _RANDOM[3'h3][5];
        state_8_3 = _RANDOM[3'h3][6];
        state_8_4 = _RANDOM[3'h3][7];
        state_8_5 = _RANDOM[3'h3][8];
        state_8_6 = _RANDOM[3'h3][9];
        state_8_7 = _RANDOM[3'h3][10];
        beatsLeft_9 = _RANDOM[3'h3][13:11];
        readys_mask_9 = _RANDOM[3'h3][21:14];
        state_9_0 = _RANDOM[3'h3][22];
        state_9_1 = _RANDOM[3'h3][23];
        state_9_2 = _RANDOM[3'h3][24];
        state_9_3 = _RANDOM[3'h3][25];
        state_9_4 = _RANDOM[3'h3][26];
        state_9_5 = _RANDOM[3'h3][27];
        state_9_6 = _RANDOM[3'h3][28];
        state_9_7 = _RANDOM[3'h3][29];
        beatsLeft_10 = {_RANDOM[3'h3][31:30], _RANDOM[3'h4][0]};
        readys_mask_10 = _RANDOM[3'h4][8:1];
        state_10_0 = _RANDOM[3'h4][9];
        state_10_1 = _RANDOM[3'h4][10];
        state_10_2 = _RANDOM[3'h4][11];
        state_10_3 = _RANDOM[3'h4][12];
        state_10_4 = _RANDOM[3'h4][13];
        state_10_5 = _RANDOM[3'h4][14];
        state_10_6 = _RANDOM[3'h4][15];
        state_10_7 = _RANDOM[3'h4][16];
        beatsLeft_11 = _RANDOM[3'h4][19:17];
        readys_mask_11 = _RANDOM[3'h4][27:20];
        state_11_0 = _RANDOM[3'h4][28];
        state_11_1 = _RANDOM[3'h4][29];
        state_11_2 = _RANDOM[3'h4][30];
        state_11_3 = _RANDOM[3'h4][31];
        state_11_4 = _RANDOM[3'h5][0];
        state_11_5 = _RANDOM[3'h5][1];
        state_11_6 = _RANDOM[3'h5][2];
        state_11_7 = _RANDOM[3'h5][3];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 3'h0;
        readys_mask = 4'hF;
        state_0 = 1'h0;
        state_1 = 1'h0;
        state_2 = 1'h0;
        state_3 = 1'h0;
        beatsLeft_1 = 3'h0;
        readys_mask_1 = 4'hF;
        state_1_0 = 1'h0;
        state_1_1 = 1'h0;
        state_1_2 = 1'h0;
        state_1_3 = 1'h0;
        beatsLeft_2 = 3'h0;
        readys_mask_2 = 4'hF;
        state_2_0 = 1'h0;
        state_2_1 = 1'h0;
        state_2_2 = 1'h0;
        state_2_3 = 1'h0;
        beatsLeft_3 = 3'h0;
        readys_mask_3 = 4'hF;
        state_3_0 = 1'h0;
        state_3_1 = 1'h0;
        state_3_2 = 1'h0;
        state_3_3 = 1'h0;
        beatsLeft_4 = 3'h0;
        readys_mask_4 = 4'hF;
        state_4_0 = 1'h0;
        state_4_1 = 1'h0;
        state_4_2 = 1'h0;
        state_4_3 = 1'h0;
        beatsLeft_5 = 3'h0;
        readys_mask_5 = 4'hF;
        state_5_0 = 1'h0;
        state_5_1 = 1'h0;
        state_5_2 = 1'h0;
        state_5_3 = 1'h0;
        beatsLeft_6 = 3'h0;
        readys_mask_6 = 4'hF;
        state_6_0 = 1'h0;
        state_6_1 = 1'h0;
        state_6_2 = 1'h0;
        state_6_3 = 1'h0;
        beatsLeft_7 = 3'h0;
        readys_mask_7 = 4'hF;
        state_7_0 = 1'h0;
        state_7_1 = 1'h0;
        state_7_2 = 1'h0;
        state_7_3 = 1'h0;
        beatsLeft_8 = 3'h0;
        readys_mask_8 = 8'hFF;
        state_8_0 = 1'h0;
        state_8_1 = 1'h0;
        state_8_2 = 1'h0;
        state_8_3 = 1'h0;
        state_8_4 = 1'h0;
        state_8_5 = 1'h0;
        state_8_6 = 1'h0;
        state_8_7 = 1'h0;
        beatsLeft_9 = 3'h0;
        readys_mask_9 = 8'hFF;
        state_9_0 = 1'h0;
        state_9_1 = 1'h0;
        state_9_2 = 1'h0;
        state_9_3 = 1'h0;
        state_9_4 = 1'h0;
        state_9_5 = 1'h0;
        state_9_6 = 1'h0;
        state_9_7 = 1'h0;
        beatsLeft_10 = 3'h0;
        readys_mask_10 = 8'hFF;
        state_10_0 = 1'h0;
        state_10_1 = 1'h0;
        state_10_2 = 1'h0;
        state_10_3 = 1'h0;
        state_10_4 = 1'h0;
        state_10_5 = 1'h0;
        state_10_6 = 1'h0;
        state_10_7 = 1'h0;
        beatsLeft_11 = 3'h0;
        readys_mask_11 = 8'hFF;
        state_11_0 = 1'h0;
        state_11_1 = 1'h0;
        state_11_2 = 1'h0;
        state_11_3 = 1'h0;
        state_11_4 = 1'h0;
        state_11_5 = 1'h0;
        state_11_6 = 1'h0;
        state_11_7 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_3_a_ready =
    requestAIO_3_0 & auto_out_0_a_ready & allowed_3 | requestAIO_3_1 & auto_out_1_a_ready
    & allowed_1_3 | requestAIO_3_2 & auto_out_2_a_ready & allowed_2_3 | requestAIO_3_3
    & auto_out_3_a_ready & allowed_3_3 | requestAIO_3_4 & auto_out_4_a_ready & allowed_4_3
    | requestAIO_3_5 & auto_out_5_a_ready & allowed_5_3 | requestAIO_3_6
    & auto_out_6_a_ready & allowed_6_3 | requestAIO_3_7 & auto_out_7_a_ready
    & allowed_7_3;
  assign auto_in_3_d_valid = in_3_d_valid;
  assign auto_in_3_d_bits_opcode =
    (muxState_11_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_11_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_11_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_11_3 ? auto_out_3_d_bits_opcode : 3'h0)
    | (muxState_11_4 ? auto_out_4_d_bits_opcode : 3'h0)
    | (muxState_11_5 ? auto_out_5_d_bits_opcode : 3'h0)
    | (muxState_11_6 ? auto_out_6_d_bits_opcode : 3'h0)
    | (muxState_11_7 ? auto_out_7_d_bits_opcode : 3'h0);
  assign auto_in_3_d_bits_param =
    (muxState_11_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_11_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_11_6 ? auto_out_6_d_bits_param : 2'h0);
  assign auto_in_3_d_bits_size =
    (muxState_11_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_11_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_11_2 ? out_2_d_bits_size : 3'h0)
    | (muxState_11_3 ? out_3_d_bits_size : 3'h0)
    | (muxState_11_4 ? out_4_d_bits_size : 3'h0)
    | (muxState_11_5 ? out_5_d_bits_size : 3'h0)
    | (muxState_11_6 ? out_6_d_bits_size : 3'h0)
    | (muxState_11_7 ? out_7_d_bits_size : 3'h0);
  assign auto_in_3_d_bits_source =
    (muxState_11_0 ? auto_out_0_d_bits_source[2:0] : 3'h0)
    | (muxState_11_1 ? auto_out_1_d_bits_source[2:0] : 3'h0)
    | (muxState_11_2 ? auto_out_2_d_bits_source[2:0] : 3'h0)
    | (muxState_11_3 ? auto_out_3_d_bits_source[2:0] : 3'h0)
    | (muxState_11_4 ? auto_out_4_d_bits_source[2:0] : 3'h0)
    | (muxState_11_5 ? auto_out_5_d_bits_source[2:0] : 3'h0)
    | (muxState_11_6 ? auto_out_6_d_bits_source[2:0] : 3'h0)
    | (muxState_11_7 ? auto_out_7_d_bits_source[2:0] : 3'h0);
  assign auto_in_3_d_bits_sink =
    muxState_11_0 & auto_out_0_d_bits_sink | muxState_11_1 & auto_out_1_d_bits_sink
    | muxState_11_6 & auto_out_6_d_bits_sink;
  assign auto_in_3_d_bits_denied =
    muxState_11_0 & auto_out_0_d_bits_denied | muxState_11_1 & auto_out_1_d_bits_denied
    | muxState_11_6 & auto_out_6_d_bits_denied;
  assign auto_in_3_d_bits_data =
    (muxState_11_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_11_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_11_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_11_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_11_4 ? auto_out_4_d_bits_data : 64'h0)
    | (muxState_11_5 ? auto_out_5_d_bits_data : 64'h0)
    | (muxState_11_6 ? auto_out_6_d_bits_data : 64'h0)
    | (muxState_11_7 ? auto_out_7_d_bits_data : 64'h0);
  assign auto_in_3_d_bits_corrupt =
    muxState_11_0 & auto_out_0_d_bits_corrupt | muxState_11_1 & auto_out_1_d_bits_corrupt
    | muxState_11_6 & auto_out_6_d_bits_corrupt;
  assign auto_in_2_a_ready =
    requestAIO_2_0 & auto_out_0_a_ready & allowed_2 | requestAIO_2_1 & auto_out_1_a_ready
    & allowed_1_2 | requestAIO_2_2 & auto_out_2_a_ready & allowed_2_2 | requestAIO_2_3
    & auto_out_3_a_ready & allowed_3_2 | requestAIO_2_4 & auto_out_4_a_ready & allowed_4_2
    | requestAIO_2_5 & auto_out_5_a_ready & allowed_5_2 | requestAIO_2_6
    & auto_out_6_a_ready & allowed_6_2 | requestAIO_2_7 & auto_out_7_a_ready
    & allowed_7_2;
  assign auto_in_2_d_valid = in_2_d_valid;
  assign auto_in_2_d_bits_opcode =
    (muxState_10_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_10_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_10_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_10_3 ? auto_out_3_d_bits_opcode : 3'h0)
    | (muxState_10_4 ? auto_out_4_d_bits_opcode : 3'h0)
    | (muxState_10_5 ? auto_out_5_d_bits_opcode : 3'h0)
    | (muxState_10_6 ? auto_out_6_d_bits_opcode : 3'h0)
    | (muxState_10_7 ? auto_out_7_d_bits_opcode : 3'h0);
  assign auto_in_2_d_bits_param =
    (muxState_10_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_10_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_10_6 ? auto_out_6_d_bits_param : 2'h0);
  assign auto_in_2_d_bits_size =
    (muxState_10_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_10_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_10_2 ? out_2_d_bits_size : 3'h0)
    | (muxState_10_3 ? out_3_d_bits_size : 3'h0)
    | (muxState_10_4 ? out_4_d_bits_size : 3'h0)
    | (muxState_10_5 ? out_5_d_bits_size : 3'h0)
    | (muxState_10_6 ? out_6_d_bits_size : 3'h0)
    | (muxState_10_7 ? out_7_d_bits_size : 3'h0);
  assign auto_in_2_d_bits_source =
    (muxState_10_0 ? auto_out_0_d_bits_source[2:0] : 3'h0)
    | (muxState_10_1 ? auto_out_1_d_bits_source[2:0] : 3'h0)
    | (muxState_10_2 ? auto_out_2_d_bits_source[2:0] : 3'h0)
    | (muxState_10_3 ? auto_out_3_d_bits_source[2:0] : 3'h0)
    | (muxState_10_4 ? auto_out_4_d_bits_source[2:0] : 3'h0)
    | (muxState_10_5 ? auto_out_5_d_bits_source[2:0] : 3'h0)
    | (muxState_10_6 ? auto_out_6_d_bits_source[2:0] : 3'h0)
    | (muxState_10_7 ? auto_out_7_d_bits_source[2:0] : 3'h0);
  assign auto_in_2_d_bits_sink =
    muxState_10_0 & auto_out_0_d_bits_sink | muxState_10_1 & auto_out_1_d_bits_sink
    | muxState_10_6 & auto_out_6_d_bits_sink;
  assign auto_in_2_d_bits_denied =
    muxState_10_0 & auto_out_0_d_bits_denied | muxState_10_1 & auto_out_1_d_bits_denied
    | muxState_10_6 & auto_out_6_d_bits_denied;
  assign auto_in_2_d_bits_data =
    (muxState_10_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_10_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_10_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_10_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_10_4 ? auto_out_4_d_bits_data : 64'h0)
    | (muxState_10_5 ? auto_out_5_d_bits_data : 64'h0)
    | (muxState_10_6 ? auto_out_6_d_bits_data : 64'h0)
    | (muxState_10_7 ? auto_out_7_d_bits_data : 64'h0);
  assign auto_in_2_d_bits_corrupt =
    muxState_10_0 & auto_out_0_d_bits_corrupt | muxState_10_1 & auto_out_1_d_bits_corrupt
    | muxState_10_6 & auto_out_6_d_bits_corrupt;
  assign auto_in_1_a_ready =
    requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready
    & allowed_1_1 | requestAIO_1_2 & auto_out_2_a_ready & allowed_2_1 | requestAIO_1_3
    & auto_out_3_a_ready & allowed_3_1 | requestAIO_1_4 & auto_out_4_a_ready & allowed_4_1
    | requestAIO_1_5 & auto_out_5_a_ready & allowed_5_1 | requestAIO_1_6
    & auto_out_6_a_ready & allowed_6_1 | requestAIO_1_7 & auto_out_7_a_ready
    & allowed_7_1;
  assign auto_in_1_d_valid = in_1_d_valid;
  assign auto_in_1_d_bits_opcode =
    (muxState_9_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_9_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_9_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_9_3 ? auto_out_3_d_bits_opcode : 3'h0)
    | (muxState_9_4 ? auto_out_4_d_bits_opcode : 3'h0)
    | (muxState_9_5 ? auto_out_5_d_bits_opcode : 3'h0)
    | (muxState_9_6 ? auto_out_6_d_bits_opcode : 3'h0)
    | (muxState_9_7 ? auto_out_7_d_bits_opcode : 3'h0);
  assign auto_in_1_d_bits_param =
    (muxState_9_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_9_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_9_6 ? auto_out_6_d_bits_param : 2'h0);
  assign auto_in_1_d_bits_size =
    (muxState_9_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_9_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_9_2 ? out_2_d_bits_size : 3'h0)
    | (muxState_9_3 ? out_3_d_bits_size : 3'h0)
    | (muxState_9_4 ? out_4_d_bits_size : 3'h0)
    | (muxState_9_5 ? out_5_d_bits_size : 3'h0)
    | (muxState_9_6 ? out_6_d_bits_size : 3'h0)
    | (muxState_9_7 ? out_7_d_bits_size : 3'h0);
  assign auto_in_1_d_bits_source =
    (muxState_9_0 ? auto_out_0_d_bits_source[2:0] : 3'h0)
    | (muxState_9_1 ? auto_out_1_d_bits_source[2:0] : 3'h0)
    | (muxState_9_2 ? auto_out_2_d_bits_source[2:0] : 3'h0)
    | (muxState_9_3 ? auto_out_3_d_bits_source[2:0] : 3'h0)
    | (muxState_9_4 ? auto_out_4_d_bits_source[2:0] : 3'h0)
    | (muxState_9_5 ? auto_out_5_d_bits_source[2:0] : 3'h0)
    | (muxState_9_6 ? auto_out_6_d_bits_source[2:0] : 3'h0)
    | (muxState_9_7 ? auto_out_7_d_bits_source[2:0] : 3'h0);
  assign auto_in_1_d_bits_sink =
    muxState_9_0 & auto_out_0_d_bits_sink | muxState_9_1 & auto_out_1_d_bits_sink
    | muxState_9_6 & auto_out_6_d_bits_sink;
  assign auto_in_1_d_bits_denied =
    muxState_9_0 & auto_out_0_d_bits_denied | muxState_9_1 & auto_out_1_d_bits_denied
    | muxState_9_6 & auto_out_6_d_bits_denied;
  assign auto_in_1_d_bits_data =
    (muxState_9_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_9_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_9_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_9_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_9_4 ? auto_out_4_d_bits_data : 64'h0)
    | (muxState_9_5 ? auto_out_5_d_bits_data : 64'h0)
    | (muxState_9_6 ? auto_out_6_d_bits_data : 64'h0)
    | (muxState_9_7 ? auto_out_7_d_bits_data : 64'h0);
  assign auto_in_1_d_bits_corrupt =
    muxState_9_0 & auto_out_0_d_bits_corrupt | muxState_9_1 & auto_out_1_d_bits_corrupt
    | muxState_9_6 & auto_out_6_d_bits_corrupt;
  assign auto_in_0_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready
    & allowed_1_0 | requestAIO_0_2 & auto_out_2_a_ready & allowed_2_0 | requestAIO_0_3
    & auto_out_3_a_ready & allowed_3_0 | requestAIO_0_4 & auto_out_4_a_ready & allowed_4_0
    | requestAIO_0_5 & auto_out_5_a_ready & allowed_5_0 | requestAIO_0_6
    & auto_out_6_a_ready & allowed_6_0 | requestAIO_0_7 & auto_out_7_a_ready
    & allowed_7_0;
  assign auto_in_0_d_valid = in_0_d_valid;
  assign auto_in_0_d_bits_opcode =
    (muxState_8_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_8_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_8_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_8_3 ? auto_out_3_d_bits_opcode : 3'h0)
    | (muxState_8_4 ? auto_out_4_d_bits_opcode : 3'h0)
    | (muxState_8_5 ? auto_out_5_d_bits_opcode : 3'h0)
    | (muxState_8_6 ? auto_out_6_d_bits_opcode : 3'h0)
    | (muxState_8_7 ? auto_out_7_d_bits_opcode : 3'h0);
  assign auto_in_0_d_bits_param =
    (muxState_8_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_8_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_8_6 ? auto_out_6_d_bits_param : 2'h0);
  assign auto_in_0_d_bits_size =
    (muxState_8_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_8_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_8_2 ? out_2_d_bits_size : 3'h0)
    | (muxState_8_3 ? out_3_d_bits_size : 3'h0)
    | (muxState_8_4 ? out_4_d_bits_size : 3'h0)
    | (muxState_8_5 ? out_5_d_bits_size : 3'h0)
    | (muxState_8_6 ? out_6_d_bits_size : 3'h0)
    | (muxState_8_7 ? out_7_d_bits_size : 3'h0);
  assign auto_in_0_d_bits_source =
    (muxState_8_0 ? auto_out_0_d_bits_source[2:0] : 3'h0)
    | (muxState_8_1 ? auto_out_1_d_bits_source[2:0] : 3'h0)
    | (muxState_8_2 ? auto_out_2_d_bits_source[2:0] : 3'h0)
    | (muxState_8_3 ? auto_out_3_d_bits_source[2:0] : 3'h0)
    | (muxState_8_4 ? auto_out_4_d_bits_source[2:0] : 3'h0)
    | (muxState_8_5 ? auto_out_5_d_bits_source[2:0] : 3'h0)
    | (muxState_8_6 ? auto_out_6_d_bits_source[2:0] : 3'h0)
    | (muxState_8_7 ? auto_out_7_d_bits_source[2:0] : 3'h0);
  assign auto_in_0_d_bits_sink =
    muxState_8_0 & auto_out_0_d_bits_sink | muxState_8_1 & auto_out_1_d_bits_sink
    | muxState_8_6 & auto_out_6_d_bits_sink;
  assign auto_in_0_d_bits_denied =
    muxState_8_0 & auto_out_0_d_bits_denied | muxState_8_1 & auto_out_1_d_bits_denied
    | muxState_8_6 & auto_out_6_d_bits_denied;
  assign auto_in_0_d_bits_data =
    (muxState_8_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_8_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_8_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_8_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_8_4 ? auto_out_4_d_bits_data : 64'h0)
    | (muxState_8_5 ? auto_out_5_d_bits_data : 64'h0)
    | (muxState_8_6 ? auto_out_6_d_bits_data : 64'h0)
    | (muxState_8_7 ? auto_out_7_d_bits_data : 64'h0);
  assign auto_in_0_d_bits_corrupt =
    muxState_8_0 & auto_out_0_d_bits_corrupt | muxState_8_1 & auto_out_1_d_bits_corrupt
    | muxState_8_6 & auto_out_6_d_bits_corrupt;
  assign auto_out_7_a_valid = out_7_a_valid;
  assign auto_out_7_a_bits_opcode =
    (muxState_7_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_7_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_7_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_7_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_7_a_bits_size =
    (muxState_7_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_7_1 ? auto_in_1_a_bits_size[1:0] : 2'h0)
    | (muxState_7_2 ? auto_in_2_a_bits_size[1:0] : 2'h0)
    | (muxState_7_3 ? auto_in_3_a_bits_size[1:0] : 2'h0);
  assign auto_out_7_a_bits_source =
    (muxState_7_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_7_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_7_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_7_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_7_a_bits_address =
    (muxState_7_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_7_1 ? auto_in_1_a_bits_address[29:0] : 30'h0)
    | (muxState_7_2 ? auto_in_2_a_bits_address[29:0] : 30'h0)
    | (muxState_7_3 ? auto_in_3_a_bits_address[29:0] : 30'h0);
  assign auto_out_7_a_bits_mask =
    (muxState_7_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_7_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_7_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_7_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_7_a_bits_data =
    (muxState_7_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_7_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_7_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_7_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_7_d_ready =
    (&(auto_out_7_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_7 | requestDOI_7_1
    & auto_in_1_d_ready & allowed_9_7 | requestDOI_7_2 & auto_in_2_d_ready & allowed_10_7
    | requestDOI_7_3 & auto_in_3_d_ready & allowed_11_7;
  assign auto_out_6_a_valid = out_6_a_valid;
  assign auto_out_6_a_bits_opcode =
    (muxState_6_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_6_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_6_a_bits_param =
    (muxState_6_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_param : 3'h0)
    | (muxState_6_3 ? auto_in_3_a_bits_param : 3'h0);
  assign auto_out_6_a_bits_size =
    (muxState_6_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_size[1:0] : 2'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_size[1:0] : 2'h0)
    | (muxState_6_3 ? auto_in_3_a_bits_size[1:0] : 2'h0);
  assign auto_out_6_a_bits_source =
    (muxState_6_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_6_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_6_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_6_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_6_a_bits_address =
    (muxState_6_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_address[29:0] : 30'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_address[29:0] : 30'h0)
    | (muxState_6_3 ? auto_in_3_a_bits_address[29:0] : 30'h0);
  assign auto_out_6_a_bits_mask =
    (muxState_6_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_6_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_6_a_bits_data =
    (muxState_6_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_6_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_6_a_bits_corrupt =
    muxState_6_0 & auto_in_0_a_bits_corrupt | muxState_6_1 & auto_in_1_a_bits_corrupt
    | muxState_6_2 & auto_in_2_a_bits_corrupt | muxState_6_3 & auto_in_3_a_bits_corrupt;
  assign auto_out_6_d_ready =
    (&(auto_out_6_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_6 | requestDOI_6_1
    & auto_in_1_d_ready & allowed_9_6 | requestDOI_6_2 & auto_in_2_d_ready & allowed_10_6
    | requestDOI_6_3 & auto_in_3_d_ready & allowed_11_6;
  assign auto_out_5_a_valid = out_5_a_valid;
  assign auto_out_5_a_bits_opcode =
    (muxState_5_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_5_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_5_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_5_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_5_a_bits_size =
    (muxState_5_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_5_1 ? auto_in_1_a_bits_size[1:0] : 2'h0)
    | (muxState_5_2 ? auto_in_2_a_bits_size[1:0] : 2'h0)
    | (muxState_5_3 ? auto_in_3_a_bits_size[1:0] : 2'h0);
  assign auto_out_5_a_bits_source =
    (muxState_5_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_5_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_5_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_5_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_5_a_bits_address =
    (muxState_5_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_5_1 ? auto_in_1_a_bits_address[29:0] : 30'h0)
    | (muxState_5_2 ? auto_in_2_a_bits_address[29:0] : 30'h0)
    | (muxState_5_3 ? auto_in_3_a_bits_address[29:0] : 30'h0);
  assign auto_out_5_a_bits_mask =
    (muxState_5_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_5_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_5_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_5_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_5_a_bits_data =
    (muxState_5_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_5_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_5_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_5_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_5_d_ready =
    (&(auto_out_5_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_5 | requestDOI_5_1
    & auto_in_1_d_ready & allowed_9_5 | requestDOI_5_2 & auto_in_2_d_ready & allowed_10_5
    | requestDOI_5_3 & auto_in_3_d_ready & allowed_11_5;
  assign auto_out_4_a_valid = out_4_a_valid;
  assign auto_out_4_a_bits_opcode =
    (muxState_4_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_4_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_4_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_4_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_4_a_bits_size =
    (muxState_4_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_4_1 ? auto_in_1_a_bits_size[1:0] : 2'h0)
    | (muxState_4_2 ? auto_in_2_a_bits_size[1:0] : 2'h0)
    | (muxState_4_3 ? auto_in_3_a_bits_size[1:0] : 2'h0);
  assign auto_out_4_a_bits_source =
    (muxState_4_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_4_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_4_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_4_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_4_a_bits_address =
    (muxState_4_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_4_1 ? auto_in_1_a_bits_address[29:0] : 30'h0)
    | (muxState_4_2 ? auto_in_2_a_bits_address[29:0] : 30'h0)
    | (muxState_4_3 ? auto_in_3_a_bits_address[29:0] : 30'h0);
  assign auto_out_4_a_bits_mask =
    (muxState_4_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_4_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_4_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_4_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_4_a_bits_data =
    (muxState_4_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_4_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_4_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_4_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_4_d_ready =
    (&(auto_out_4_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_4 | requestDOI_4_1
    & auto_in_1_d_ready & allowed_9_4 | requestDOI_4_2 & auto_in_2_d_ready & allowed_10_4
    | requestDOI_4_3 & auto_in_3_d_ready & allowed_11_4;
  assign auto_out_3_a_valid = out_3_a_valid;
  assign auto_out_3_a_bits_opcode =
    (muxState_3_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_3_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_3_a_bits_size =
    (muxState_3_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_size[1:0] : 2'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_size[1:0] : 2'h0)
    | (muxState_3_3 ? auto_in_3_a_bits_size[1:0] : 2'h0);
  assign auto_out_3_a_bits_source =
    (muxState_3_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_3_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_3_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_3_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_3_a_bits_address =
    (muxState_3_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_address[29:0] : 30'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_address[29:0] : 30'h0)
    | (muxState_3_3 ? auto_in_3_a_bits_address[29:0] : 30'h0);
  assign auto_out_3_a_bits_mask =
    (muxState_3_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_3_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_3_a_bits_data =
    (muxState_3_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_3_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_3_d_ready =
    (&(auto_out_3_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_3 | requestDOI_3_1
    & auto_in_1_d_ready & allowed_9_3 | requestDOI_3_2 & auto_in_2_d_ready & allowed_10_3
    | requestDOI_3_3 & auto_in_3_d_ready & allowed_11_3;
  assign auto_out_2_a_valid = out_2_a_valid;
  assign auto_out_2_a_bits_opcode =
    (muxState_2_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_2_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_2_a_bits_size =
    (muxState_2_0 ? auto_in_0_a_bits_size[1:0] : 2'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_size[1:0] : 2'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_size[1:0] : 2'h0)
    | (muxState_2_3 ? auto_in_3_a_bits_size[1:0] : 2'h0);
  assign auto_out_2_a_bits_source =
    (muxState_2_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_2_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_2_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_2_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_2_a_bits_address =
    (muxState_2_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_address[29:0] : 30'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_address[29:0] : 30'h0)
    | (muxState_2_3 ? auto_in_3_a_bits_address[29:0] : 30'h0);
  assign auto_out_2_a_bits_mask =
    (muxState_2_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_2_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_2_a_bits_data =
    (muxState_2_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_2_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_2_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_2_d_ready =
    (&(auto_out_2_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_2 | requestDOI_2_1
    & auto_in_1_d_ready & allowed_9_2 | requestDOI_2_2 & auto_in_2_d_ready & allowed_10_2
    | requestDOI_2_3 & auto_in_3_d_ready & allowed_11_2;
  assign auto_out_1_a_valid = out_1_a_valid;
  assign auto_out_1_a_bits_opcode =
    (muxState_1_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_1_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_1_a_bits_param =
    (muxState_1_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_param : 3'h0)
    | (muxState_1_3 ? auto_in_3_a_bits_param : 3'h0);
  assign auto_out_1_a_bits_size =
    (muxState_1_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_size : 3'h0)
    | (muxState_1_3 ? auto_in_3_a_bits_size : 3'h0);
  assign auto_out_1_a_bits_source =
    (muxState_1_0 ? in_0_a_bits_source : 5'h0)
    | (muxState_1_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_1_2 ? in_2_a_bits_source : 5'h0)
    | (muxState_1_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_1_a_bits_address =
    (muxState_1_0 ? auto_in_0_a_bits_address[30:0] : 31'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_address[30:0] : 31'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_address[30:0] : 31'h0)
    | (muxState_1_3 ? auto_in_3_a_bits_address[30:0] : 31'h0);
  assign auto_out_1_a_bits_mask =
    (muxState_1_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_1_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_1_a_bits_data =
    (muxState_1_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_1_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_1_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_1_a_bits_corrupt =
    muxState_1_0 & auto_in_0_a_bits_corrupt | muxState_1_1 & auto_in_1_a_bits_corrupt
    | muxState_1_2 & auto_in_2_a_bits_corrupt | muxState_1_3 & auto_in_3_a_bits_corrupt;
  assign auto_out_1_d_ready =
    (&(auto_out_1_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_1 | requestDOI_1_1
    & auto_in_1_d_ready & allowed_9_1 | requestDOI_1_2 & auto_in_2_d_ready & allowed_10_1
    | requestDOI_1_3 & auto_in_3_d_ready & allowed_11_1;
  assign auto_out_0_a_valid = out_0_a_valid;
  assign auto_out_0_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_opcode : 3'h0)
    | (muxState_3 ? auto_in_3_a_bits_opcode : 3'h0);
  assign auto_out_0_a_bits_param =
    (muxState_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_param : 3'h0)
    | (muxState_3 ? auto_in_3_a_bits_param : 3'h0);
  assign auto_out_0_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_size : 3'h0)
    | (muxState_3 ? auto_in_3_a_bits_size : 3'h0);
  assign auto_out_0_a_bits_source =
    (muxState_0 ? in_0_a_bits_source : 5'h0) | (muxState_1 ? in_1_a_bits_source : 5'h0)
    | (muxState_2 ? in_2_a_bits_source : 5'h0) | (muxState_3 ? in_3_a_bits_source : 5'h0);
  assign auto_out_0_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 36'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 36'h0)
    | (muxState_2 ? auto_in_2_a_bits_address : 36'h0)
    | (muxState_3 ? auto_in_3_a_bits_address : 36'h0);
  assign auto_out_0_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 8'h0)
    | (muxState_2 ? auto_in_2_a_bits_mask : 8'h0)
    | (muxState_3 ? auto_in_3_a_bits_mask : 8'h0);
  assign auto_out_0_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 64'h0)
    | (muxState_2 ? auto_in_2_a_bits_data : 64'h0)
    | (muxState_3 ? auto_in_3_a_bits_data : 64'h0);
  assign auto_out_0_a_bits_corrupt =
    muxState_0 & auto_in_0_a_bits_corrupt | muxState_1 & auto_in_1_a_bits_corrupt
    | muxState_2 & auto_in_2_a_bits_corrupt | muxState_3 & auto_in_3_a_bits_corrupt;
  assign auto_out_0_d_ready =
    (&(auto_out_0_d_bits_source[4:3])) & auto_in_0_d_ready & allowed_8_0 | requestDOI_0_1
    & auto_in_1_d_ready & allowed_9_0 | requestDOI_0_2 & auto_in_2_d_ready & allowed_10_0
    | requestDOI_0_3 & auto_in_3_d_ready & allowed_11_0;
endmodule

