// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module VPPU(
  input          clock,
  input          reset,
  input          io_flush_valid,
  input          io_flush_bits_robIdx_flag,
  input  [7:0]   io_flush_bits_robIdx_value,
  input          io_flush_bits_level,
  input          io_in_valid,
  input  [8:0]   io_in_bits_ctrl_fuOpType,
  input          io_in_bits_ctrl_robIdx_flag,
  input  [7:0]   io_in_bits_ctrl_robIdx_value,
  input  [7:0]   io_in_bits_ctrl_pdest,
  input          io_in_bits_ctrl_vecWen,
  input          io_in_bits_ctrl_v0Wen,
  input          io_in_bits_ctrl_vpu_vma,
  input          io_in_bits_ctrl_vpu_vta,
  input  [1:0]   io_in_bits_ctrl_vpu_vsew,
  input  [2:0]   io_in_bits_ctrl_vpu_vlmul,
  input          io_in_bits_ctrl_vpu_vm,
  input  [7:0]   io_in_bits_ctrl_vpu_vstart,
  input  [6:0]   io_in_bits_ctrl_vpu_vuopIdx,
  input  [7:0]   io_in_bits_data_src_4,
  input  [127:0] io_in_bits_data_src_3,
  input  [127:0] io_in_bits_data_src_2,
  input  [127:0] io_in_bits_data_src_1,
  input  [127:0] io_in_bits_data_src_0,
  output         io_out_valid,
  output         io_out_bits_ctrl_robIdx_flag,
  output [7:0]   io_out_bits_ctrl_robIdx_value,
  output [7:0]   io_out_bits_ctrl_pdest,
  output         io_out_bits_ctrl_vecWen,
  output         io_out_bits_ctrl_v0Wen,
  output         io_out_bits_ctrl_exceptionVec_2,
  output [127:0] io_out_bits_res_data
);

  wire [3:0] _typeMod_io_out_vs1Type;
  wire [3:0] _typeMod_io_out_vs2Type;
  reg        validVec_1;
  reg        validVec_2;
  reg        ctrlVec_1_robIdx_flag;
  reg  [7:0] ctrlVec_1_robIdx_value;
  reg  [7:0] ctrlVec_1_pdest;
  reg        ctrlVec_1_vecWen;
  reg        ctrlVec_1_v0Wen;
  reg  [7:0] ctrlVec_1_vpu_vstart;
  reg        ctrlVec_2_robIdx_flag;
  reg  [7:0] ctrlVec_2_robIdx_value;
  reg  [7:0] ctrlVec_2_pdest;
  reg        ctrlVec_2_vecWen;
  reg        ctrlVec_2_v0Wen;
  reg  [7:0] ctrlVec_2_vpu_vstart;
  wire [8:0] _fixflushVec_flushItself_T_2 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  wire       _GEN =
    io_in_valid
    & ~(io_in_valid & io_flush_valid
        & (io_flush_bits_level
           & {io_in_bits_ctrl_robIdx_flag,
              io_in_bits_ctrl_robIdx_value} == _fixflushVec_flushItself_T_2
           | io_in_bits_ctrl_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ io_in_bits_ctrl_robIdx_value > io_flush_bits_robIdx_value));
  wire       _GEN_0 =
    validVec_1
    & ~(validVec_1 & io_flush_valid
        & (io_flush_bits_level
           & {ctrlVec_1_robIdx_flag,
              ctrlVec_1_robIdx_value} == _fixflushVec_flushItself_T_2
           | ctrlVec_1_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ ctrlVec_1_robIdx_value > io_flush_bits_robIdx_value));
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVec_1 <= 1'h0;
      validVec_2 <= 1'h0;
    end
    else begin
      validVec_1 <= _GEN & io_in_valid;
      validVec_2 <= _GEN_0 & validVec_1;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN) begin
      ctrlVec_1_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      ctrlVec_1_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      ctrlVec_1_pdest <= io_in_bits_ctrl_pdest;
      ctrlVec_1_vecWen <= io_in_bits_ctrl_vecWen;
      ctrlVec_1_v0Wen <= io_in_bits_ctrl_v0Wen;
      ctrlVec_1_vpu_vstart <= io_in_bits_ctrl_vpu_vstart;
    end
    if (_GEN_0) begin
      ctrlVec_2_robIdx_flag <= ctrlVec_1_robIdx_flag;
      ctrlVec_2_robIdx_value <= ctrlVec_1_robIdx_value;
      ctrlVec_2_pdest <= ctrlVec_1_pdest;
      ctrlVec_2_vecWen <= ctrlVec_1_vecWen;
      ctrlVec_2_v0Wen <= ctrlVec_1_v0Wen;
      ctrlVec_2_vpu_vstart <= ctrlVec_1_vpu_vstart;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:8];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'h9; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        validVec_1 = _RANDOM[4'h0][0];
        validVec_2 = _RANDOM[4'h0][1];
        ctrlVec_1_robIdx_flag = _RANDOM[4'h0][11];
        ctrlVec_1_robIdx_value = _RANDOM[4'h0][19:12];
        ctrlVec_1_pdest = _RANDOM[4'h0][27:20];
        ctrlVec_1_vecWen = _RANDOM[4'h0][28];
        ctrlVec_1_v0Wen = _RANDOM[4'h0][29];
        ctrlVec_1_vpu_vstart = _RANDOM[4'h1][22:15];
        ctrlVec_2_robIdx_flag = _RANDOM[4'h7][9];
        ctrlVec_2_robIdx_value = _RANDOM[4'h7][17:10];
        ctrlVec_2_pdest = _RANDOM[4'h7][25:18];
        ctrlVec_2_vecWen = _RANDOM[4'h7][26];
        ctrlVec_2_v0Wen = _RANDOM[4'h7][27];
        ctrlVec_2_vpu_vstart = _RANDOM[4'h8][20:13];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVec_1 = 1'h0;
        validVec_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  VPermSrcTypeModule typeMod (
    .io_in_fuOpType (io_in_bits_ctrl_fuOpType),
    .io_in_vsew     (io_in_bits_ctrl_vpu_vsew),
    .io_out_vs1Type (_typeMod_io_out_vs1Type),
    .io_out_vs2Type (_typeMod_io_out_vs2Type)
  );
  Permutation vperms (
    .clock                  (clock),
    .reset                  (reset),
    .io_in_valid            (io_in_valid),
    .io_in_bits_opcode_op   ({3'h0, io_in_bits_ctrl_fuOpType[2:0]}),
    .io_in_bits_info_vm     (io_in_bits_ctrl_vpu_vm),
    .io_in_bits_info_ma     (io_in_bits_ctrl_vpu_vma),
    .io_in_bits_info_ta     (io_in_bits_ctrl_vpu_vta),
    .io_in_bits_info_vlmul
      ((&(io_in_bits_ctrl_fuOpType[2:0])) & io_in_bits_ctrl_fuOpType[7:5] == 3'h0
         ? {1'h0, io_in_bits_ctrl_fuOpType[4:3]}
         : io_in_bits_ctrl_vpu_vlmul),
    .io_in_bits_info_vl     (io_in_bits_data_src_4),
    .io_in_bits_info_vstart (io_in_bits_ctrl_vpu_vstart[6:0]),
    .io_in_bits_info_uopIdx (io_in_bits_ctrl_vpu_vuopIdx[5:0]),
    .io_in_bits_srcType_0   (_typeMod_io_out_vs2Type),
    .io_in_bits_srcType_1   (_typeMod_io_out_vs1Type),
    .io_in_bits_vs1         (io_in_bits_data_src_0),
    .io_in_bits_vs2         (io_in_bits_data_src_1),
    .io_in_bits_old_vd      (io_in_bits_data_src_2),
    .io_in_bits_mask
      (io_in_bits_ctrl_fuOpType == 9'h26 & io_in_bits_ctrl_vpu_vuopIdx[6:1] == 6'h0
         ? 128'h0
         : io_in_bits_data_src_3),
    .io_out_vd              (io_out_bits_res_data)
  );
  assign io_out_valid = validVec_2;
  assign io_out_bits_ctrl_robIdx_flag = ctrlVec_2_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = ctrlVec_2_robIdx_value;
  assign io_out_bits_ctrl_pdest = ctrlVec_2_pdest;
  assign io_out_bits_ctrl_vecWen = ctrlVec_2_vecWen;
  assign io_out_bits_ctrl_v0Wen = ctrlVec_2_v0Wen;
  assign io_out_bits_ctrl_exceptionVec_2 = |ctrlVec_2_vpu_vstart;
endmodule

