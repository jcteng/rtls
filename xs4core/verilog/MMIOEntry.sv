// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MMIOEntry(
  input          clock,
  input          reset,
  input  [5:0]   io_hartId,
  input          io_enableOutstanding,
  output         io_req_ready,
  input          io_req_valid,
  input  [4:0]   io_req_bits_cmd,
  input  [35:0]  io_req_bits_addr,
  input  [63:0]  io_req_bits_data,
  input  [7:0]   io_req_bits_mask,
  input  [6:0]   io_req_bits_id,
  input          io_req_bits_atomic,
  input          io_resp_ready,
  output         io_resp_valid,
  output [127:0] io_resp_bits_data,
  output [5:0]   io_resp_bits_id,
  output         io_resp_bits_nderr,
  input          io_mem_acquire_ready,
  output         io_mem_acquire_valid,
  output [2:0]   io_mem_acquire_bits_opcode,
  output [2:0]   io_mem_acquire_bits_size,
  output [1:0]   io_mem_acquire_bits_source,
  output [35:0]  io_mem_acquire_bits_address,
  output [7:0]   io_mem_acquire_bits_mask,
  output [63:0]  io_mem_acquire_bits_data,
  output         io_mem_grant_ready,
  input          io_mem_grant_valid,
  input          io_mem_grant_bits_denied,
  input  [63:0]  io_mem_grant_bits_data,
  output         io_invalid,
  input          io_select,
  output         io_atomic
);

  reg  [1:0]  state;
  reg  [4:0]  req_cmd;
  reg  [35:0] req_addr;
  reg  [63:0] req_data;
  reg  [7:0]  req_mask;
  reg  [6:0]  req_id;
  reg         req_atomic;
  reg  [63:0] resp_data;
  reg         resp_nderr;
  wire        io_invalid_0 = state == 2'h0;
  wire        _GEN = io_invalid_0 & io_req_valid;
  wire [3:0]  size =
    4'({1'h0,
        3'({1'h0, 2'({1'h0, req_mask[0]} + {1'h0, req_mask[1]})}
           + {1'h0, 2'({1'h0, req_mask[2]} + {1'h0, req_mask[3]})})}
       + {1'h0,
          3'({1'h0, 2'({1'h0, req_mask[4]} + {1'h0, req_mask[5]})}
             + {1'h0, 2'({1'h0, req_mask[6]} + {1'h0, req_mask[7]})})});
  wire [1:0]  lgSize = size == 4'h1 ? 2'h0 : size == 4'h2 ? 2'h1 : {1'h1, size != 4'h4};
  wire        load_a_mask_sub_sub_size = lgSize == 2'h2;
  wire        load_a_mask_sub_sub_0_1 =
    (&lgSize) | load_a_mask_sub_sub_size & ~(req_addr[2]);
  wire        load_a_mask_sub_sub_1_1 =
    (&lgSize) | load_a_mask_sub_sub_size & req_addr[2];
  wire        load_a_mask_sub_size = lgSize == 2'h1;
  wire        load_a_mask_sub_0_2 = ~(req_addr[2]) & ~(req_addr[1]);
  wire        load_a_mask_sub_0_1 =
    load_a_mask_sub_sub_0_1 | load_a_mask_sub_size & load_a_mask_sub_0_2;
  wire        load_a_mask_sub_1_2 = ~(req_addr[2]) & req_addr[1];
  wire        load_a_mask_sub_1_1 =
    load_a_mask_sub_sub_0_1 | load_a_mask_sub_size & load_a_mask_sub_1_2;
  wire        load_a_mask_sub_2_2 = req_addr[2] & ~(req_addr[1]);
  wire        load_a_mask_sub_2_1 =
    load_a_mask_sub_sub_1_1 | load_a_mask_sub_size & load_a_mask_sub_2_2;
  wire        load_a_mask_sub_3_2 = req_addr[2] & req_addr[1];
  wire        load_a_mask_sub_3_1 =
    load_a_mask_sub_sub_1_1 | load_a_mask_sub_size & load_a_mask_sub_3_2;
  wire        _GEN_0 = state == 2'h1;
  wire        io_mem_acquire_valid_0 = _GEN_0 & io_select;
  wire        _io_mem_acquire_bits_T = req_cmd == 5'h1;
  wire        io_mem_grant_ready_0 = state == 2'h2;
  wire        _GEN_1 = io_mem_grant_ready_0 & io_mem_grant_valid;
  always @(posedge clock or posedge reset) begin
    if (reset)
      state <= 2'h0;
    else if ((&state) & io_resp_ready)
      state <= 2'h0;
    else if (_GEN_1)
      state <= req_cmd == 5'h1 & io_enableOutstanding ? 2'h0 : 2'h3;
    else if (_GEN_0 & io_mem_acquire_ready & io_mem_acquire_valid_0)
      state <= 2'h2;
    else if (_GEN)
      state <= 2'h1;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN) begin
      req_cmd <= io_req_bits_cmd;
      req_addr <= io_req_bits_addr;
      req_data <= io_req_bits_data;
      req_mask <= io_req_bits_mask;
      req_id <= io_req_bits_id;
      req_atomic <= io_req_bits_atomic;
    end
    if (_GEN_1) begin
      resp_data <= io_mem_grant_bits_data;
      resp_nderr <= io_mem_grant_bits_denied;
    end
    else
      resp_nderr <= ~_GEN & resp_nderr;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[3'h0][1:0];
        req_cmd = _RANDOM[3'h0][6:2];
        req_addr = {_RANDOM[3'h0][31:7], _RANDOM[3'h1][10:0]};
        req_data = {_RANDOM[3'h1][31:11], _RANDOM[3'h2], _RANDOM[3'h3][10:0]};
        req_mask = _RANDOM[3'h3][18:11];
        req_id = _RANDOM[3'h3][25:19];
        req_atomic = _RANDOM[3'h3][30];
        resp_data = {_RANDOM[3'h4][31:9], _RANDOM[3'h5], _RANDOM[3'h6][8:0]};
        resp_nderr = _RANDOM[3'h6][9];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        state = 2'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_req_ready = io_invalid_0;
  assign io_resp_valid = &state;
  assign io_resp_bits_data = {64'h0, resp_data};
  assign io_resp_bits_id = req_id[5:0];
  assign io_resp_bits_nderr = resp_nderr;
  assign io_mem_acquire_valid = io_mem_acquire_valid_0;
  assign io_mem_acquire_bits_opcode = _io_mem_acquire_bits_T ? 3'h1 : 3'h4;
  assign io_mem_acquire_bits_size = {1'h0, lgSize};
  assign io_mem_acquire_bits_source = io_hartId[1:0];
  assign io_mem_acquire_bits_address = req_addr;
  assign io_mem_acquire_bits_mask =
    _io_mem_acquire_bits_T
      ? req_mask
      : {load_a_mask_sub_3_1 | load_a_mask_sub_3_2 & req_addr[0],
         load_a_mask_sub_3_1 | load_a_mask_sub_3_2 & ~(req_addr[0]),
         load_a_mask_sub_2_1 | load_a_mask_sub_2_2 & req_addr[0],
         load_a_mask_sub_2_1 | load_a_mask_sub_2_2 & ~(req_addr[0]),
         load_a_mask_sub_1_1 | load_a_mask_sub_1_2 & req_addr[0],
         load_a_mask_sub_1_1 | load_a_mask_sub_1_2 & ~(req_addr[0]),
         load_a_mask_sub_0_1 | load_a_mask_sub_0_2 & req_addr[0],
         load_a_mask_sub_0_1 | load_a_mask_sub_0_2 & ~(req_addr[0])};
  assign io_mem_acquire_bits_data = _io_mem_acquire_bits_T ? req_data : 64'h0;
  assign io_mem_grant_ready = io_mem_grant_ready_0;
  assign io_invalid = io_invalid_0;
  assign io_atomic = req_atomic;
endmodule

