// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TrainFilter(
  input         clock,
  input         reset,
  input         io_ld_in_0_valid,
  input  [40:0] io_ld_in_0_bits_uop_pc,
  input         io_ld_in_0_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_0_bits_uop_robIdx_value,
  input  [40:0] io_ld_in_0_bits_vaddr,
  input         io_ld_in_1_valid,
  input  [40:0] io_ld_in_1_bits_uop_pc,
  input         io_ld_in_1_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_1_bits_uop_robIdx_value,
  input  [40:0] io_ld_in_1_bits_vaddr,
  input         io_ld_in_2_valid,
  input  [40:0] io_ld_in_2_bits_uop_pc,
  input         io_ld_in_2_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_2_bits_uop_robIdx_value,
  input  [40:0] io_ld_in_2_bits_vaddr,
  input         io_train_req_ready,
  output        io_train_req_valid,
  output [40:0] io_train_req_bits_vaddr,
  output [40:0] io_train_req_bits_pc
);

  reg  [40:0]      entries_0_vaddr;
  reg  [40:0]      entries_0_pc;
  reg  [40:0]      entries_1_vaddr;
  reg  [40:0]      entries_1_pc;
  reg  [40:0]      entries_2_vaddr;
  reg  [40:0]      entries_2_pc;
  reg  [40:0]      entries_3_vaddr;
  reg  [40:0]      entries_3_pc;
  reg  [40:0]      entries_4_vaddr;
  reg  [40:0]      entries_4_pc;
  reg  [40:0]      entries_5_vaddr;
  reg  [40:0]      entries_5_pc;
  reg              valids_0;
  reg              valids_1;
  reg              valids_2;
  reg              valids_3;
  reg              valids_4;
  reg              valids_5;
  reg              enqPtrExt_0_flag;
  reg  [2:0]       enqPtrExt_0_value;
  reg              enqPtrExt_1_flag;
  reg  [2:0]       enqPtrExt_1_value;
  reg              enqPtrExt_2_flag;
  reg  [2:0]       enqPtrExt_2_value;
  reg              deqPtrExt_flag;
  reg  [2:0]       deqPtrExt_value;
  reg              ld_in_reordered_res_0_1_0_valid;
  reg  [40:0]      ld_in_reordered_res_0_1_0_bits_uop_pc;
  reg              ld_in_reordered_res_0_1_0_bits_uop_robIdx_flag;
  reg  [7:0]       ld_in_reordered_res_0_1_0_bits_uop_robIdx_value;
  reg  [40:0]      ld_in_reordered_res_0_1_0_bits_vaddr;
  reg              ld_in_reordered_res_0_1_1_valid;
  reg  [40:0]      ld_in_reordered_res_0_1_1_bits_uop_pc;
  reg              ld_in_reordered_res_0_1_1_bits_uop_robIdx_flag;
  reg  [7:0]       ld_in_reordered_res_0_1_1_bits_uop_robIdx_value;
  reg  [40:0]      ld_in_reordered_res_0_1_1_bits_vaddr;
  reg              ld_in_reordered_res_0_1_2_valid;
  reg  [40:0]      ld_in_reordered_res_0_1_2_bits_uop_pc;
  reg              ld_in_reordered_res_0_1_2_bits_uop_robIdx_flag;
  reg  [7:0]       ld_in_reordered_res_0_1_2_bits_uop_robIdx_value;
  reg  [40:0]      ld_in_reordered_res_0_1_2_bits_vaddr;
  reg              ld_in_reordered_res_1_2_0_valid;
  reg  [40:0]      ld_in_reordered_res_1_2_0_bits_uop_pc;
  reg              ld_in_reordered_res_1_2_0_bits_uop_robIdx_flag;
  reg  [7:0]       ld_in_reordered_res_1_2_0_bits_uop_robIdx_value;
  reg  [40:0]      ld_in_reordered_res_1_2_0_bits_vaddr;
  reg              ld_in_reordered_res_1_2_1_valid;
  reg  [40:0]      ld_in_reordered_res_1_2_1_bits_uop_pc;
  reg              ld_in_reordered_res_1_2_1_bits_uop_robIdx_flag;
  reg  [7:0]       ld_in_reordered_res_1_2_1_bits_uop_robIdx_value;
  reg  [40:0]      ld_in_reordered_res_1_2_1_bits_vaddr;
  reg              ld_in_reordered_res_1_2_2_valid;
  reg  [40:0]      ld_in_reordered_res_1_2_2_bits_uop_pc;
  reg  [40:0]      ld_in_reordered_res_1_2_2_bits_vaddr;
  reg              ld_in_reordered_0_valid;
  reg  [40:0]      ld_in_reordered_0_bits_uop_pc;
  reg  [40:0]      ld_in_reordered_0_bits_vaddr;
  reg              ld_in_reordered_1_valid;
  reg  [40:0]      ld_in_reordered_1_bits_uop_pc;
  reg  [40:0]      ld_in_reordered_1_bits_vaddr;
  reg              ld_in_reordered_2_valid;
  reg  [40:0]      ld_in_reordered_2_bits_uop_pc;
  reg  [40:0]      ld_in_reordered_2_bits_vaddr;
  wire             needAlloc_0 =
    ld_in_reordered_0_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_in_reordered_0_bits_vaddr[20:16]
                                         ^ ld_in_reordered_0_bits_vaddr[25:21]
                                         ^ ld_in_reordered_0_bits_vaddr[30:26],
                                       ld_in_reordered_0_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_in_reordered_0_bits_vaddr[20:16]
                                         ^ ld_in_reordered_0_bits_vaddr[25:21]
                                         ^ ld_in_reordered_0_bits_vaddr[30:26],
                                       ld_in_reordered_0_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_in_reordered_0_bits_vaddr[20:16]
                                         ^ ld_in_reordered_0_bits_vaddr[25:21]
                                         ^ ld_in_reordered_0_bits_vaddr[30:26],
                                       ld_in_reordered_0_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_in_reordered_0_bits_vaddr[20:16]
                                         ^ ld_in_reordered_0_bits_vaddr[25:21]
                                         ^ ld_in_reordered_0_bits_vaddr[30:26],
                                       ld_in_reordered_0_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_in_reordered_0_bits_vaddr[20:16]
                                         ^ ld_in_reordered_0_bits_vaddr[25:21]
                                         ^ ld_in_reordered_0_bits_vaddr[30:26],
                                       ld_in_reordered_0_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_in_reordered_0_bits_vaddr[20:16]
                                         ^ ld_in_reordered_0_bits_vaddr[25:21]
                                         ^ ld_in_reordered_0_bits_vaddr[30:26],
                                       ld_in_reordered_0_bits_vaddr[15:6]}} == 6'h0;
  wire             canAlloc_0 =
    needAlloc_0
    & (enqPtrExt_0_flag ^ deqPtrExt_flag ^ enqPtrExt_0_value >= deqPtrExt_value);
  wire             _GEN = canAlloc_0 & enqPtrExt_0_value == 3'h0;
  wire             _GEN_0 = canAlloc_0 & enqPtrExt_0_value == 3'h1;
  wire             _GEN_1 = canAlloc_0 & enqPtrExt_0_value == 3'h2;
  wire             _GEN_2 = canAlloc_0 & enqPtrExt_0_value == 3'h3;
  wire             _GEN_3 = canAlloc_0 & enqPtrExt_0_value == 3'h4;
  wire             _GEN_4 = canAlloc_0 & enqPtrExt_0_value == 3'h5;
  wire             needAlloc_1 =
    ld_in_reordered_1_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                         ^ ld_in_reordered_1_bits_vaddr[25:21]
                                         ^ ld_in_reordered_1_bits_vaddr[30:26],
                                       ld_in_reordered_1_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                         ^ ld_in_reordered_1_bits_vaddr[25:21]
                                         ^ ld_in_reordered_1_bits_vaddr[30:26],
                                       ld_in_reordered_1_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                         ^ ld_in_reordered_1_bits_vaddr[25:21]
                                         ^ ld_in_reordered_1_bits_vaddr[30:26],
                                       ld_in_reordered_1_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                         ^ ld_in_reordered_1_bits_vaddr[25:21]
                                         ^ ld_in_reordered_1_bits_vaddr[30:26],
                                       ld_in_reordered_1_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                         ^ ld_in_reordered_1_bits_vaddr[25:21]
                                         ^ ld_in_reordered_1_bits_vaddr[30:26],
                                       ld_in_reordered_1_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                         ^ ld_in_reordered_1_bits_vaddr[25:21]
                                         ^ ld_in_reordered_1_bits_vaddr[30:26],
                                       ld_in_reordered_1_bits_vaddr[15:6]}} == 6'h0
    & ~(ld_in_reordered_0_valid
        & {ld_in_reordered_0_bits_vaddr[20:16] ^ ld_in_reordered_0_bits_vaddr[25:21]
             ^ ld_in_reordered_0_bits_vaddr[30:26],
           ld_in_reordered_0_bits_vaddr[15:6]} == {ld_in_reordered_1_bits_vaddr[20:16]
                                                     ^ ld_in_reordered_1_bits_vaddr[25:21]
                                                     ^ ld_in_reordered_1_bits_vaddr[30:26],
                                                   ld_in_reordered_1_bits_vaddr[15:6]});
  wire [1:0]       _GEN_5 = {1'h0, needAlloc_0};
  wire [3:0]       _GEN_6 =
    {{enqPtrExt_0_flag}, {enqPtrExt_2_flag}, {enqPtrExt_1_flag}, {enqPtrExt_0_flag}};
  wire [3:0][2:0]  _GEN_7 =
    {{enqPtrExt_0_value}, {enqPtrExt_2_value}, {enqPtrExt_1_value}, {enqPtrExt_0_value}};
  wire             canAlloc_1 =
    needAlloc_1 & (_GEN_6[_GEN_5] ^ deqPtrExt_flag ^ _GEN_7[_GEN_5] >= deqPtrExt_value);
  wire             _GEN_8 = _GEN_7[_GEN_5] == 3'h0;
  wire             _GEN_9 = _GEN_7[_GEN_5] == 3'h1;
  wire             _GEN_10 = _GEN_7[_GEN_5] == 3'h2;
  wire             _GEN_11 = _GEN_7[_GEN_5] == 3'h3;
  wire             _GEN_12 = _GEN_7[_GEN_5] == 3'h4;
  wire             _GEN_13 = _GEN_7[_GEN_5] == 3'h5;
  wire [1:0]       index = 2'(_GEN_5 + {1'h0, needAlloc_1});
  wire             canAlloc_2 =
    ld_in_reordered_2_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                         ^ ld_in_reordered_2_bits_vaddr[25:21]
                                         ^ ld_in_reordered_2_bits_vaddr[30:26],
                                       ld_in_reordered_2_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                         ^ ld_in_reordered_2_bits_vaddr[25:21]
                                         ^ ld_in_reordered_2_bits_vaddr[30:26],
                                       ld_in_reordered_2_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                         ^ ld_in_reordered_2_bits_vaddr[25:21]
                                         ^ ld_in_reordered_2_bits_vaddr[30:26],
                                       ld_in_reordered_2_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                         ^ ld_in_reordered_2_bits_vaddr[25:21]
                                         ^ ld_in_reordered_2_bits_vaddr[30:26],
                                       ld_in_reordered_2_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                         ^ ld_in_reordered_2_bits_vaddr[25:21]
                                         ^ ld_in_reordered_2_bits_vaddr[30:26],
                                       ld_in_reordered_2_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                         ^ ld_in_reordered_2_bits_vaddr[25:21]
                                         ^ ld_in_reordered_2_bits_vaddr[30:26],
                                       ld_in_reordered_2_bits_vaddr[15:6]}} == 6'h0
    & {ld_in_reordered_0_valid
         & {ld_in_reordered_0_bits_vaddr[20:16] ^ ld_in_reordered_0_bits_vaddr[25:21]
              ^ ld_in_reordered_0_bits_vaddr[30:26],
            ld_in_reordered_0_bits_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                                      ^ ld_in_reordered_2_bits_vaddr[25:21]
                                                      ^ ld_in_reordered_2_bits_vaddr[30:26],
                                                    ld_in_reordered_2_bits_vaddr[15:6]},
       ld_in_reordered_1_valid
         & {ld_in_reordered_1_bits_vaddr[20:16] ^ ld_in_reordered_1_bits_vaddr[25:21]
              ^ ld_in_reordered_1_bits_vaddr[30:26],
            ld_in_reordered_1_bits_vaddr[15:6]} == {ld_in_reordered_2_bits_vaddr[20:16]
                                                      ^ ld_in_reordered_2_bits_vaddr[25:21]
                                                      ^ ld_in_reordered_2_bits_vaddr[30:26],
                                                    ld_in_reordered_2_bits_vaddr[15:6]}} == 2'h0
    & (_GEN_6[index] ^ deqPtrExt_flag ^ _GEN_7[index] >= deqPtrExt_value);
  wire             _GEN_14 = canAlloc_2 & _GEN_7[index] == 3'h0;
  wire             _GEN_15 = canAlloc_2 & _GEN_7[index] == 3'h1;
  wire             _GEN_16 = canAlloc_2 & _GEN_7[index] == 3'h2;
  wire             _GEN_17 = canAlloc_2 & _GEN_7[index] == 3'h3;
  wire             _GEN_18 = canAlloc_2 & _GEN_7[index] == 3'h4;
  wire             _GEN_19 = canAlloc_2 & _GEN_7[index] == 3'h5;
  wire             _GEN_20 = deqPtrExt_value == 3'h0;
  wire             _GEN_21 = _GEN_20 & valids_0;
  wire [7:0]       _GEN_22 =
    {{_GEN_21},
     {_GEN_21},
     {valids_5},
     {valids_4},
     {valids_3},
     {valids_2},
     {valids_1},
     {_GEN_21}};
  wire             io_train_req_valid_0 = _GEN_22[deqPtrExt_value];
  wire [7:0][40:0] _GEN_23 =
    {{entries_0_vaddr},
     {entries_0_vaddr},
     {entries_5_vaddr},
     {entries_4_vaddr},
     {entries_3_vaddr},
     {entries_2_vaddr},
     {entries_1_vaddr},
     {entries_0_vaddr}};
  wire [7:0][40:0] _GEN_24 =
    {{entries_0_pc},
     {entries_0_pc},
     {entries_5_pc},
     {entries_4_pc},
     {entries_3_pc},
     {entries_2_pc},
     {entries_1_pc},
     {entries_0_pc}};
  reg              REG;
  wire             ld_in_reordered_tmp_source_1_older =
    (&{io_ld_in_0_valid, io_ld_in_1_valid})
    & (io_ld_in_1_bits_uop_robIdx_flag ^ io_ld_in_0_bits_uop_robIdx_flag
       ^ io_ld_in_1_bits_uop_robIdx_value < io_ld_in_0_bits_uop_robIdx_value);
  wire             ld_in_reordered_tmp_1_source_1_older =
    (&{ld_in_reordered_res_0_1_1_valid, ld_in_reordered_res_0_1_2_valid})
    & (ld_in_reordered_res_0_1_2_bits_uop_robIdx_flag
       ^ ld_in_reordered_res_0_1_1_bits_uop_robIdx_flag
       ^ ld_in_reordered_res_0_1_2_bits_uop_robIdx_value < ld_in_reordered_res_0_1_1_bits_uop_robIdx_value);
  wire             ld_in_reordered_tmp_2_source_1_older =
    (&{ld_in_reordered_res_1_2_0_valid, ld_in_reordered_res_1_2_1_valid})
    & (ld_in_reordered_res_1_2_1_bits_uop_robIdx_flag
       ^ ld_in_reordered_res_1_2_0_bits_uop_robIdx_flag
       ^ ld_in_reordered_res_1_2_1_bits_uop_robIdx_value < ld_in_reordered_res_1_2_0_bits_uop_robIdx_value);
  always @(posedge clock) begin
    if (_GEN_14) begin
      entries_0_vaddr <= ld_in_reordered_2_bits_vaddr;
      entries_0_pc <= ld_in_reordered_2_bits_uop_pc;
    end
    else if (canAlloc_1 & _GEN_8) begin
      entries_0_vaddr <= ld_in_reordered_1_bits_vaddr;
      entries_0_pc <= ld_in_reordered_1_bits_uop_pc;
    end
    else if (_GEN) begin
      entries_0_vaddr <= ld_in_reordered_0_bits_vaddr;
      entries_0_pc <= ld_in_reordered_0_bits_uop_pc;
    end
    if (_GEN_15) begin
      entries_1_vaddr <= ld_in_reordered_2_bits_vaddr;
      entries_1_pc <= ld_in_reordered_2_bits_uop_pc;
    end
    else if (canAlloc_1 & _GEN_9) begin
      entries_1_vaddr <= ld_in_reordered_1_bits_vaddr;
      entries_1_pc <= ld_in_reordered_1_bits_uop_pc;
    end
    else if (_GEN_0) begin
      entries_1_vaddr <= ld_in_reordered_0_bits_vaddr;
      entries_1_pc <= ld_in_reordered_0_bits_uop_pc;
    end
    if (_GEN_16) begin
      entries_2_vaddr <= ld_in_reordered_2_bits_vaddr;
      entries_2_pc <= ld_in_reordered_2_bits_uop_pc;
    end
    else if (canAlloc_1 & _GEN_10) begin
      entries_2_vaddr <= ld_in_reordered_1_bits_vaddr;
      entries_2_pc <= ld_in_reordered_1_bits_uop_pc;
    end
    else if (_GEN_1) begin
      entries_2_vaddr <= ld_in_reordered_0_bits_vaddr;
      entries_2_pc <= ld_in_reordered_0_bits_uop_pc;
    end
    if (_GEN_17) begin
      entries_3_vaddr <= ld_in_reordered_2_bits_vaddr;
      entries_3_pc <= ld_in_reordered_2_bits_uop_pc;
    end
    else if (canAlloc_1 & _GEN_11) begin
      entries_3_vaddr <= ld_in_reordered_1_bits_vaddr;
      entries_3_pc <= ld_in_reordered_1_bits_uop_pc;
    end
    else if (_GEN_2) begin
      entries_3_vaddr <= ld_in_reordered_0_bits_vaddr;
      entries_3_pc <= ld_in_reordered_0_bits_uop_pc;
    end
    if (_GEN_18) begin
      entries_4_vaddr <= ld_in_reordered_2_bits_vaddr;
      entries_4_pc <= ld_in_reordered_2_bits_uop_pc;
    end
    else if (canAlloc_1 & _GEN_12) begin
      entries_4_vaddr <= ld_in_reordered_1_bits_vaddr;
      entries_4_pc <= ld_in_reordered_1_bits_uop_pc;
    end
    else if (_GEN_3) begin
      entries_4_vaddr <= ld_in_reordered_0_bits_vaddr;
      entries_4_pc <= ld_in_reordered_0_bits_uop_pc;
    end
    if (_GEN_19) begin
      entries_5_vaddr <= ld_in_reordered_2_bits_vaddr;
      entries_5_pc <= ld_in_reordered_2_bits_uop_pc;
    end
    else if (canAlloc_1 & _GEN_13) begin
      entries_5_vaddr <= ld_in_reordered_1_bits_vaddr;
      entries_5_pc <= ld_in_reordered_1_bits_uop_pc;
    end
    else if (_GEN_4) begin
      entries_5_vaddr <= ld_in_reordered_0_bits_vaddr;
      entries_5_pc <= ld_in_reordered_0_bits_uop_pc;
    end
    ld_in_reordered_res_0_1_0_valid <=
      ld_in_reordered_tmp_source_1_older ? io_ld_in_1_valid : io_ld_in_0_valid;
    ld_in_reordered_res_0_1_0_bits_uop_pc <=
      ld_in_reordered_tmp_source_1_older
        ? io_ld_in_1_bits_uop_pc
        : io_ld_in_0_bits_uop_pc;
    ld_in_reordered_res_0_1_0_bits_uop_robIdx_flag <=
      ld_in_reordered_tmp_source_1_older
        ? io_ld_in_1_bits_uop_robIdx_flag
        : io_ld_in_0_bits_uop_robIdx_flag;
    ld_in_reordered_res_0_1_0_bits_uop_robIdx_value <=
      ld_in_reordered_tmp_source_1_older
        ? io_ld_in_1_bits_uop_robIdx_value
        : io_ld_in_0_bits_uop_robIdx_value;
    ld_in_reordered_res_0_1_0_bits_vaddr <=
      ld_in_reordered_tmp_source_1_older ? io_ld_in_1_bits_vaddr : io_ld_in_0_bits_vaddr;
    ld_in_reordered_res_0_1_1_valid <=
      ld_in_reordered_tmp_source_1_older ? io_ld_in_0_valid : io_ld_in_1_valid;
    ld_in_reordered_res_0_1_1_bits_uop_pc <=
      ld_in_reordered_tmp_source_1_older
        ? io_ld_in_0_bits_uop_pc
        : io_ld_in_1_bits_uop_pc;
    ld_in_reordered_res_0_1_1_bits_uop_robIdx_flag <=
      ld_in_reordered_tmp_source_1_older
        ? io_ld_in_0_bits_uop_robIdx_flag
        : io_ld_in_1_bits_uop_robIdx_flag;
    ld_in_reordered_res_0_1_1_bits_uop_robIdx_value <=
      ld_in_reordered_tmp_source_1_older
        ? io_ld_in_0_bits_uop_robIdx_value
        : io_ld_in_1_bits_uop_robIdx_value;
    ld_in_reordered_res_0_1_1_bits_vaddr <=
      ld_in_reordered_tmp_source_1_older ? io_ld_in_0_bits_vaddr : io_ld_in_1_bits_vaddr;
    ld_in_reordered_res_0_1_2_valid <= io_ld_in_2_valid;
    ld_in_reordered_res_0_1_2_bits_uop_pc <= io_ld_in_2_bits_uop_pc;
    ld_in_reordered_res_0_1_2_bits_uop_robIdx_flag <= io_ld_in_2_bits_uop_robIdx_flag;
    ld_in_reordered_res_0_1_2_bits_uop_robIdx_value <= io_ld_in_2_bits_uop_robIdx_value;
    ld_in_reordered_res_0_1_2_bits_vaddr <= io_ld_in_2_bits_vaddr;
    ld_in_reordered_res_1_2_0_valid <= ld_in_reordered_res_0_1_0_valid;
    ld_in_reordered_res_1_2_0_bits_uop_pc <= ld_in_reordered_res_0_1_0_bits_uop_pc;
    ld_in_reordered_res_1_2_0_bits_uop_robIdx_flag <=
      ld_in_reordered_res_0_1_0_bits_uop_robIdx_flag;
    ld_in_reordered_res_1_2_0_bits_uop_robIdx_value <=
      ld_in_reordered_res_0_1_0_bits_uop_robIdx_value;
    ld_in_reordered_res_1_2_0_bits_vaddr <= ld_in_reordered_res_0_1_0_bits_vaddr;
    ld_in_reordered_res_1_2_1_valid <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_2_valid
        : ld_in_reordered_res_0_1_1_valid;
    ld_in_reordered_res_1_2_1_bits_uop_pc <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_2_bits_uop_pc
        : ld_in_reordered_res_0_1_1_bits_uop_pc;
    ld_in_reordered_res_1_2_1_bits_uop_robIdx_flag <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_2_bits_uop_robIdx_flag
        : ld_in_reordered_res_0_1_1_bits_uop_robIdx_flag;
    ld_in_reordered_res_1_2_1_bits_uop_robIdx_value <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_2_bits_uop_robIdx_value
        : ld_in_reordered_res_0_1_1_bits_uop_robIdx_value;
    ld_in_reordered_res_1_2_1_bits_vaddr <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_2_bits_vaddr
        : ld_in_reordered_res_0_1_1_bits_vaddr;
    ld_in_reordered_res_1_2_2_valid <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_1_valid
        : ld_in_reordered_res_0_1_2_valid;
    ld_in_reordered_res_1_2_2_bits_uop_pc <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_1_bits_uop_pc
        : ld_in_reordered_res_0_1_2_bits_uop_pc;
    ld_in_reordered_res_1_2_2_bits_vaddr <=
      ld_in_reordered_tmp_1_source_1_older
        ? ld_in_reordered_res_0_1_1_bits_vaddr
        : ld_in_reordered_res_0_1_2_bits_vaddr;
    ld_in_reordered_0_valid <=
      ld_in_reordered_tmp_2_source_1_older
        ? ld_in_reordered_res_1_2_1_valid
        : ld_in_reordered_res_1_2_0_valid;
    ld_in_reordered_0_bits_uop_pc <=
      ld_in_reordered_tmp_2_source_1_older
        ? ld_in_reordered_res_1_2_1_bits_uop_pc
        : ld_in_reordered_res_1_2_0_bits_uop_pc;
    ld_in_reordered_0_bits_vaddr <=
      ld_in_reordered_tmp_2_source_1_older
        ? ld_in_reordered_res_1_2_1_bits_vaddr
        : ld_in_reordered_res_1_2_0_bits_vaddr;
    ld_in_reordered_1_valid <=
      ld_in_reordered_tmp_2_source_1_older
        ? ld_in_reordered_res_1_2_0_valid
        : ld_in_reordered_res_1_2_1_valid;
    ld_in_reordered_1_bits_uop_pc <=
      ld_in_reordered_tmp_2_source_1_older
        ? ld_in_reordered_res_1_2_0_bits_uop_pc
        : ld_in_reordered_res_1_2_1_bits_uop_pc;
    ld_in_reordered_1_bits_vaddr <=
      ld_in_reordered_tmp_2_source_1_older
        ? ld_in_reordered_res_1_2_0_bits_vaddr
        : ld_in_reordered_res_1_2_1_bits_vaddr;
    ld_in_reordered_2_valid <= ld_in_reordered_res_1_2_2_valid;
    ld_in_reordered_2_bits_uop_pc <= ld_in_reordered_res_1_2_2_bits_uop_pc;
    ld_in_reordered_2_bits_vaddr <= ld_in_reordered_res_1_2_2_bits_vaddr;
    REG <= 1'h0;
  end // always @(posedge)
  wire [2:0]       _GEN_25 = {canAlloc_2, canAlloc_1, canAlloc_0};
  wire [3:0]       _GEN_26 =
    {2'h0, 2'({1'h0, canAlloc_0} + 2'({1'h0, canAlloc_1} + {1'h0, canAlloc_2}))};
  wire [3:0]       enqPtrExt_0_new_value = 4'({1'h0, enqPtrExt_0_value} + _GEN_26);
  wire [4:0]       _enqPtrExt_0_diff_T_4 = 5'({1'h0, enqPtrExt_0_new_value} - 5'h6);
  wire             enqPtrExt_0_reverse_flag = $signed(_enqPtrExt_0_diff_T_4) > -5'sh1;
  wire [3:0]       enqPtrExt_1_new_value = 4'({1'h0, enqPtrExt_1_value} + _GEN_26);
  wire [4:0]       _enqPtrExt_1_diff_T_4 = 5'({1'h0, enqPtrExt_1_new_value} - 5'h6);
  wire             enqPtrExt_1_reverse_flag = $signed(_enqPtrExt_1_diff_T_4) > -5'sh1;
  wire [3:0]       enqPtrExt_2_new_value = 4'({1'h0, enqPtrExt_2_value} + _GEN_26);
  wire [4:0]       _enqPtrExt_2_diff_T_4 = 5'({1'h0, enqPtrExt_2_new_value} - 5'h6);
  wire             enqPtrExt_2_reverse_flag = $signed(_enqPtrExt_2_diff_T_4) > -5'sh1;
  wire             _GEN_27 = io_train_req_ready & io_train_req_valid_0;
  wire [3:0]       deqPtrExt_new_value = 4'({1'h0, deqPtrExt_value} + 4'h1);
  wire [4:0]       _deqPtrExt_diff_T_4 = 5'({1'h0, deqPtrExt_new_value} - 5'h6);
  wire             deqPtrExt_reverse_flag = $signed(_deqPtrExt_diff_T_4) > -5'sh1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valids_0 <= 1'h0;
      valids_1 <= 1'h0;
      valids_2 <= 1'h0;
      valids_3 <= 1'h0;
      valids_4 <= 1'h0;
      valids_5 <= 1'h0;
      enqPtrExt_0_flag <= 1'h0;
      enqPtrExt_0_value <= 3'h0;
      enqPtrExt_1_flag <= 1'h0;
      enqPtrExt_1_value <= 3'h1;
      enqPtrExt_2_flag <= 1'h0;
      enqPtrExt_2_value <= 3'h2;
      deqPtrExt_flag <= 1'h0;
      deqPtrExt_value <= 3'h0;
    end
    else begin
      valids_0 <=
        ~(REG | _GEN_27 & _GEN_20)
        & (_GEN_14 | (canAlloc_1 ? _GEN_8 | _GEN | valids_0 : _GEN | valids_0));
      valids_1 <=
        ~(REG | _GEN_27 & deqPtrExt_value == 3'h1)
        & (_GEN_15 | (canAlloc_1 ? _GEN_9 | _GEN_0 | valids_1 : _GEN_0 | valids_1));
      valids_2 <=
        ~(REG | _GEN_27 & deqPtrExt_value == 3'h2)
        & (_GEN_16 | (canAlloc_1 ? _GEN_10 | _GEN_1 | valids_2 : _GEN_1 | valids_2));
      valids_3 <=
        ~(REG | _GEN_27 & deqPtrExt_value == 3'h3)
        & (_GEN_17 | (canAlloc_1 ? _GEN_11 | _GEN_2 | valids_3 : _GEN_2 | valids_3));
      valids_4 <=
        ~(REG | _GEN_27 & deqPtrExt_value == 3'h4)
        & (_GEN_18 | (canAlloc_1 ? _GEN_12 | _GEN_3 | valids_4 : _GEN_3 | valids_4));
      valids_5 <=
        ~(REG | _GEN_27 & deqPtrExt_value == 3'h5)
        & (_GEN_19 | (canAlloc_1 ? _GEN_13 | _GEN_4 | valids_5 : _GEN_4 | valids_5));
      enqPtrExt_0_flag <=
        ~REG & ((|_GEN_25) & enqPtrExt_0_reverse_flag ^ enqPtrExt_0_flag);
      if (REG) begin
        enqPtrExt_0_value <= 3'h0;
        enqPtrExt_1_value <= 3'h1;
        enqPtrExt_2_value <= 3'h2;
        deqPtrExt_value <= 3'h0;
      end
      else begin
        if (|_GEN_25) begin
          enqPtrExt_0_value <=
            enqPtrExt_0_reverse_flag
              ? _enqPtrExt_0_diff_T_4[2:0]
              : enqPtrExt_0_new_value[2:0];
          enqPtrExt_1_value <=
            enqPtrExt_1_reverse_flag
              ? _enqPtrExt_1_diff_T_4[2:0]
              : enqPtrExt_1_new_value[2:0];
          enqPtrExt_2_value <=
            enqPtrExt_2_reverse_flag
              ? _enqPtrExt_2_diff_T_4[2:0]
              : enqPtrExt_2_new_value[2:0];
        end
        if (_GEN_27)
          deqPtrExt_value <=
            deqPtrExt_reverse_flag ? _deqPtrExt_diff_T_4[2:0] : deqPtrExt_new_value[2:0];
      end
      enqPtrExt_1_flag <=
        ~REG & ((|_GEN_25) & enqPtrExt_1_reverse_flag ^ enqPtrExt_1_flag);
      enqPtrExt_2_flag <=
        ~REG & ((|_GEN_25) & enqPtrExt_2_reverse_flag ^ enqPtrExt_2_flag);
      deqPtrExt_flag <= ~REG & (_GEN_27 & deqPtrExt_reverse_flag ^ deqPtrExt_flag);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:506];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h1FB; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_0_vaddr = {_RANDOM[9'h0], _RANDOM[9'h1][8:0]};
        entries_0_pc = {_RANDOM[9'h2][31:13], _RANDOM[9'h3][21:0]};
        entries_1_vaddr = {_RANDOM[9'h3][31:23], _RANDOM[9'h4]};
        entries_1_pc = {_RANDOM[9'h6][31:4], _RANDOM[9'h7][12:0]};
        entries_2_vaddr = {_RANDOM[9'h7][31:14], _RANDOM[9'h8][22:0]};
        entries_2_pc = {_RANDOM[9'h9][31:27], _RANDOM[9'hA], _RANDOM[9'hB][3:0]};
        entries_3_vaddr = {_RANDOM[9'hB][31:5], _RANDOM[9'hC][13:0]};
        entries_3_pc = {_RANDOM[9'hD][31:18], _RANDOM[9'hE][26:0]};
        entries_4_vaddr = {_RANDOM[9'hE][31:28], _RANDOM[9'hF], _RANDOM[9'h10][4:0]};
        entries_4_pc = {_RANDOM[9'h11][31:9], _RANDOM[9'h12][17:0]};
        entries_5_vaddr = {_RANDOM[9'h12][31:19], _RANDOM[9'h13][27:0]};
        entries_5_pc = {_RANDOM[9'h15], _RANDOM[9'h16][8:0]};
        valids_0 = _RANDOM[9'h16][10];
        valids_1 = _RANDOM[9'h16][11];
        valids_2 = _RANDOM[9'h16][12];
        valids_3 = _RANDOM[9'h16][13];
        valids_4 = _RANDOM[9'h16][14];
        valids_5 = _RANDOM[9'h16][15];
        enqPtrExt_0_flag = _RANDOM[9'h16][16];
        enqPtrExt_0_value = _RANDOM[9'h16][19:17];
        enqPtrExt_1_flag = _RANDOM[9'h16][20];
        enqPtrExt_1_value = _RANDOM[9'h16][23:21];
        enqPtrExt_2_flag = _RANDOM[9'h16][24];
        enqPtrExt_2_value = _RANDOM[9'h16][27:25];
        deqPtrExt_flag = _RANDOM[9'h16][28];
        deqPtrExt_value = _RANDOM[9'h16][31:29];
        ld_in_reordered_res_0_1_0_valid = _RANDOM[9'h17][0];
        ld_in_reordered_res_0_1_0_bits_uop_pc =
          {_RANDOM[9'h18][31:1], _RANDOM[9'h19][9:0]};
        ld_in_reordered_res_0_1_0_bits_uop_robIdx_flag = _RANDOM[9'h29][22];
        ld_in_reordered_res_0_1_0_bits_uop_robIdx_value = _RANDOM[9'h29][30:23];
        ld_in_reordered_res_0_1_0_bits_vaddr =
          {_RANDOM[9'h3D][31:14], _RANDOM[9'h3E][22:0]};
        ld_in_reordered_res_0_1_1_valid = _RANDOM[9'h4C][24];
        ld_in_reordered_res_0_1_1_bits_uop_pc =
          {_RANDOM[9'h4D][31:25], _RANDOM[9'h4E], _RANDOM[9'h4F][1:0]};
        ld_in_reordered_res_0_1_1_bits_uop_robIdx_flag = _RANDOM[9'h5F][14];
        ld_in_reordered_res_0_1_1_bits_uop_robIdx_value = _RANDOM[9'h5F][22:15];
        ld_in_reordered_res_0_1_1_bits_vaddr =
          {_RANDOM[9'h73][31:6], _RANDOM[9'h74][14:0]};
        ld_in_reordered_res_0_1_2_valid = _RANDOM[9'h82][16];
        ld_in_reordered_res_0_1_2_bits_uop_pc =
          {_RANDOM[9'h83][31:17], _RANDOM[9'h84][25:0]};
        ld_in_reordered_res_0_1_2_bits_uop_robIdx_flag = _RANDOM[9'h95][6];
        ld_in_reordered_res_0_1_2_bits_uop_robIdx_value = _RANDOM[9'h95][14:7];
        ld_in_reordered_res_0_1_2_bits_vaddr =
          {_RANDOM[9'hA8][31:30], _RANDOM[9'hA9], _RANDOM[9'hAA][6:0]};
        ld_in_reordered_res_1_2_0_valid = _RANDOM[9'hB8][8];
        ld_in_reordered_res_1_2_0_bits_uop_pc =
          {_RANDOM[9'hB9][31:9], _RANDOM[9'hBA][17:0]};
        ld_in_reordered_res_1_2_0_bits_uop_robIdx_flag = _RANDOM[9'hCA][30];
        ld_in_reordered_res_1_2_0_bits_uop_robIdx_value =
          {_RANDOM[9'hCA][31], _RANDOM[9'hCB][6:0]};
        ld_in_reordered_res_1_2_0_bits_vaddr =
          {_RANDOM[9'hDE][31:22], _RANDOM[9'hDF][30:0]};
        ld_in_reordered_res_1_2_1_valid = _RANDOM[9'hEE][0];
        ld_in_reordered_res_1_2_1_bits_uop_pc =
          {_RANDOM[9'hEF][31:1], _RANDOM[9'hF0][9:0]};
        ld_in_reordered_res_1_2_1_bits_uop_robIdx_flag = _RANDOM[9'h100][22];
        ld_in_reordered_res_1_2_1_bits_uop_robIdx_value = _RANDOM[9'h100][30:23];
        ld_in_reordered_res_1_2_1_bits_vaddr =
          {_RANDOM[9'h114][31:14], _RANDOM[9'h115][22:0]};
        ld_in_reordered_res_1_2_2_valid = _RANDOM[9'h123][24];
        ld_in_reordered_res_1_2_2_bits_uop_pc =
          {_RANDOM[9'h124][31:25], _RANDOM[9'h125], _RANDOM[9'h126][1:0]};
        ld_in_reordered_res_1_2_2_bits_vaddr =
          {_RANDOM[9'h14A][31:6], _RANDOM[9'h14B][14:0]};
        ld_in_reordered_0_valid = _RANDOM[9'h159][16];
        ld_in_reordered_0_bits_uop_pc = {_RANDOM[9'h15A][31:17], _RANDOM[9'h15B][25:0]};
        ld_in_reordered_0_bits_vaddr =
          {_RANDOM[9'h17F][31:30], _RANDOM[9'h180], _RANDOM[9'h181][6:0]};
        ld_in_reordered_1_valid = _RANDOM[9'h18F][8];
        ld_in_reordered_1_bits_uop_pc = {_RANDOM[9'h190][31:9], _RANDOM[9'h191][17:0]};
        ld_in_reordered_1_bits_vaddr = {_RANDOM[9'h1B5][31:22], _RANDOM[9'h1B6][30:0]};
        ld_in_reordered_2_valid = _RANDOM[9'h1C5][0];
        ld_in_reordered_2_bits_uop_pc = {_RANDOM[9'h1C6][31:1], _RANDOM[9'h1C7][9:0]};
        ld_in_reordered_2_bits_vaddr = {_RANDOM[9'h1EB][31:14], _RANDOM[9'h1EC][22:0]};
        REG = _RANDOM[9'h1FA][24];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        valids_0 = 1'h0;
        valids_1 = 1'h0;
        valids_2 = 1'h0;
        valids_3 = 1'h0;
        valids_4 = 1'h0;
        valids_5 = 1'h0;
        enqPtrExt_0_flag = 1'h0;
        enqPtrExt_0_value = 3'h0;
        enqPtrExt_1_flag = 1'h0;
        enqPtrExt_1_value = 3'h1;
        enqPtrExt_2_flag = 1'h0;
        enqPtrExt_2_value = 3'h2;
        deqPtrExt_flag = 1'h0;
        deqPtrExt_value = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_train_req_valid = io_train_req_valid_0;
  assign io_train_req_bits_vaddr = _GEN_23[deqPtrExt_value];
  assign io_train_req_bits_pc = _GEN_24[deqPtrExt_value];
endmodule

