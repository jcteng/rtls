// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FMA(
  input         clock,
  input         reset,
  input         io_flush_valid,
  input         io_flush_bits_robIdx_flag,
  input  [7:0]  io_flush_bits_robIdx_value,
  input         io_flush_bits_level,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input         io_in_bits_ctrl_robIdx_flag,
  input  [7:0]  io_in_bits_ctrl_robIdx_value,
  input  [7:0]  io_in_bits_ctrl_pdest,
  input         io_in_bits_ctrl_fpWen,
  input         io_in_bits_ctrl_fpu_wflags,
  input  [2:0]  io_in_bits_ctrl_fpu_rm,
  input  [1:0]  io_in_bits_ctrl_vpu_vsew,
  input  [63:0] io_in_bits_data_src_2,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_fpWen,
  output        io_out_bits_ctrl_fpu_wflags,
  output [63:0] io_out_bits_res_data,
  output [4:0]  io_out_bits_res_fflags,
  input  [2:0]  io_frm
);

  reg        validVec_1;
  reg        validVec_2;
  reg        validVec_3;
  reg        ctrlVec_1_robIdx_flag;
  reg  [7:0] ctrlVec_1_robIdx_value;
  reg  [7:0] ctrlVec_1_pdest;
  reg        ctrlVec_1_fpWen;
  reg        ctrlVec_1_fpu_wflags;
  reg        ctrlVec_2_robIdx_flag;
  reg  [7:0] ctrlVec_2_robIdx_value;
  reg  [7:0] ctrlVec_2_pdest;
  reg        ctrlVec_2_fpWen;
  reg        ctrlVec_2_fpu_wflags;
  reg        ctrlVec_3_robIdx_flag;
  reg  [7:0] ctrlVec_3_robIdx_value;
  reg  [7:0] ctrlVec_3_pdest;
  reg        ctrlVec_3_fpWen;
  reg        ctrlVec_3_fpu_wflags;
  wire [8:0] _fixflushVec_flushItself_T_2 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  wire       _GEN =
    io_in_valid
    & ~(io_in_valid & io_flush_valid
        & (io_flush_bits_level
           & {io_in_bits_ctrl_robIdx_flag,
              io_in_bits_ctrl_robIdx_value} == _fixflushVec_flushItself_T_2
           | io_in_bits_ctrl_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ io_in_bits_ctrl_robIdx_value > io_flush_bits_robIdx_value));
  wire       _GEN_0 =
    validVec_1
    & ~(validVec_1 & io_flush_valid
        & (io_flush_bits_level
           & {ctrlVec_1_robIdx_flag,
              ctrlVec_1_robIdx_value} == _fixflushVec_flushItself_T_2
           | ctrlVec_1_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ ctrlVec_1_robIdx_value > io_flush_bits_robIdx_value));
  wire       _GEN_1 =
    validVec_2
    & ~(validVec_2 & io_flush_valid
        & (io_flush_bits_level
           & {ctrlVec_2_robIdx_flag,
              ctrlVec_2_robIdx_value} == _fixflushVec_flushItself_T_2
           | ctrlVec_2_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ ctrlVec_2_robIdx_value > io_flush_bits_robIdx_value));
  wire       _fp_cIsFpCanonicalNAN_T_2 = io_in_bits_ctrl_vpu_vsew == 2'h2;
  wire       _fp_cIsFpCanonicalNAN_T_7 = io_in_bits_ctrl_vpu_vsew == 2'h1;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVec_1 <= 1'h0;
      validVec_2 <= 1'h0;
      validVec_3 <= 1'h0;
    end
    else begin
      validVec_1 <= _GEN & io_in_valid;
      validVec_2 <= _GEN_0 & validVec_1;
      validVec_3 <= _GEN_1 & validVec_2;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN) begin
      ctrlVec_1_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      ctrlVec_1_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      ctrlVec_1_pdest <= io_in_bits_ctrl_pdest;
      ctrlVec_1_fpWen <= io_in_bits_ctrl_fpWen;
      ctrlVec_1_fpu_wflags <= io_in_bits_ctrl_fpu_wflags;
    end
    if (_GEN_0) begin
      ctrlVec_2_robIdx_flag <= ctrlVec_1_robIdx_flag;
      ctrlVec_2_robIdx_value <= ctrlVec_1_robIdx_value;
      ctrlVec_2_pdest <= ctrlVec_1_pdest;
      ctrlVec_2_fpWen <= ctrlVec_1_fpWen;
      ctrlVec_2_fpu_wflags <= ctrlVec_1_fpu_wflags;
    end
    if (_GEN_1) begin
      ctrlVec_3_robIdx_flag <= ctrlVec_2_robIdx_flag;
      ctrlVec_3_robIdx_value <= ctrlVec_2_robIdx_value;
      ctrlVec_3_pdest <= ctrlVec_2_pdest;
      ctrlVec_3_fpWen <= ctrlVec_2_fpWen;
      ctrlVec_3_fpu_wflags <= ctrlVec_2_fpu_wflags;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:16];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        validVec_1 = _RANDOM[5'h0][0];
        validVec_2 = _RANDOM[5'h0][1];
        validVec_3 = _RANDOM[5'h0][2];
        ctrlVec_1_robIdx_flag = _RANDOM[5'h0][12];
        ctrlVec_1_robIdx_value = _RANDOM[5'h0][20:13];
        ctrlVec_1_pdest = _RANDOM[5'h0][28:21];
        ctrlVec_1_fpWen = _RANDOM[5'h0][29];
        ctrlVec_1_fpu_wflags = _RANDOM[5'h1][2];
        ctrlVec_2_robIdx_flag = _RANDOM[5'h7][28];
        ctrlVec_2_robIdx_value = {_RANDOM[5'h7][31:29], _RANDOM[5'h8][4:0]};
        ctrlVec_2_pdest = _RANDOM[5'h8][12:5];
        ctrlVec_2_fpWen = _RANDOM[5'h8][13];
        ctrlVec_2_fpu_wflags = _RANDOM[5'h8][18];
        ctrlVec_3_robIdx_flag = _RANDOM[5'hF][12];
        ctrlVec_3_robIdx_value = _RANDOM[5'hF][20:13];
        ctrlVec_3_pdest = _RANDOM[5'hF][28:21];
        ctrlVec_3_fpWen = _RANDOM[5'hF][29];
        ctrlVec_3_fpu_wflags = _RANDOM[5'h10][2];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVec_1 = 1'h0;
        validVec_2 = 1'h0;
        validVec_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FloatFMA fma (
    .clock                   (clock),
    .reset                   (reset),
    .io_fire                 (io_in_valid),
    .io_fp_a                 (io_in_bits_data_src_1),
    .io_fp_b                 (io_in_bits_data_src_0),
    .io_fp_c                 (io_in_bits_data_src_2),
    .io_round_mode
      (io_in_bits_ctrl_fpu_rm != 3'h7 ? io_in_bits_ctrl_fpu_rm : io_frm),
    .io_fp_format            (io_in_bits_ctrl_vpu_vsew),
    .io_op_code              (io_in_bits_ctrl_fuOpType[3:0]),
    .io_fp_result            (io_out_bits_res_data),
    .io_fflags               (io_out_bits_res_fflags),
    .io_fp_aIsFpCanonicalNAN
      (_fp_cIsFpCanonicalNAN_T_2 & io_in_bits_data_src_1[63:32] != 32'hFFFFFFFF
       | _fp_cIsFpCanonicalNAN_T_7 & io_in_bits_data_src_1[63:16] != 48'hFFFFFFFFFFFF),
    .io_fp_bIsFpCanonicalNAN
      (_fp_cIsFpCanonicalNAN_T_2 & io_in_bits_data_src_0[63:32] != 32'hFFFFFFFF
       | _fp_cIsFpCanonicalNAN_T_7 & io_in_bits_data_src_0[63:16] != 48'hFFFFFFFFFFFF),
    .io_fp_cIsFpCanonicalNAN
      ((|(io_in_bits_ctrl_fuOpType[3:0]))
       & (_fp_cIsFpCanonicalNAN_T_2 & io_in_bits_data_src_2[63:32] != 32'hFFFFFFFF
          | _fp_cIsFpCanonicalNAN_T_7 & io_in_bits_data_src_2[63:16] != 48'hFFFFFFFFFFFF))
  );
  assign io_out_valid = validVec_3;
  assign io_out_bits_ctrl_robIdx_flag = ctrlVec_3_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = ctrlVec_3_robIdx_value;
  assign io_out_bits_ctrl_pdest = ctrlVec_3_pdest;
  assign io_out_bits_ctrl_fpWen = ctrlVec_3_fpWen;
  assign io_out_bits_ctrl_fpu_wflags = ctrlVec_3_fpu_wflags;
endmodule

