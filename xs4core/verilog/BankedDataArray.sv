// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module BankedDataArray(
  input         clock,
  output        io_read_0_ready,
  input         io_read_0_valid,
  input  [7:0]  io_read_0_bits_way_en,
  input  [35:0] io_read_0_bits_addr,
  input  [7:0]  io_read_0_bits_bankMask,
  output        io_read_1_ready,
  input         io_read_1_valid,
  input  [7:0]  io_read_1_bits_way_en,
  input  [35:0] io_read_1_bits_addr,
  input  [7:0]  io_read_1_bits_bankMask,
  output        io_read_2_ready,
  input         io_read_2_valid,
  input  [7:0]  io_read_2_bits_way_en,
  input  [35:0] io_read_2_bits_addr,
  input  [7:0]  io_read_2_bits_bankMask,
  input         io_is128Req_0,
  input         io_is128Req_1,
  input         io_is128Req_2,
  output        io_readline_ready,
  input         io_readline_valid,
  input  [7:0]  io_readline_bits_way_en,
  input  [35:0] io_readline_bits_addr,
  input         io_write_valid,
  input  [7:0]  io_write_bits_wmask,
  input  [63:0] io_write_bits_data_0,
  input  [63:0] io_write_bits_data_1,
  input  [63:0] io_write_bits_data_2,
  input  [63:0] io_write_bits_data_3,
  input  [63:0] io_write_bits_data_4,
  input  [63:0] io_write_bits_data_5,
  input  [63:0] io_write_bits_data_6,
  input  [63:0] io_write_bits_data_7,
  input         io_write_dup_0_valid,
  input  [7:0]  io_write_dup_0_bits_way_en,
  input  [35:0] io_write_dup_0_bits_addr,
  input         io_write_dup_1_valid,
  input  [7:0]  io_write_dup_1_bits_way_en,
  input  [35:0] io_write_dup_1_bits_addr,
  input         io_write_dup_2_valid,
  input  [7:0]  io_write_dup_2_bits_way_en,
  input  [35:0] io_write_dup_2_bits_addr,
  input         io_write_dup_3_valid,
  input  [7:0]  io_write_dup_3_bits_way_en,
  input  [35:0] io_write_dup_3_bits_addr,
  input         io_write_dup_4_valid,
  input  [7:0]  io_write_dup_4_bits_way_en,
  input  [35:0] io_write_dup_4_bits_addr,
  input         io_write_dup_5_valid,
  input  [7:0]  io_write_dup_5_bits_way_en,
  input  [35:0] io_write_dup_5_bits_addr,
  input         io_write_dup_6_valid,
  input  [7:0]  io_write_dup_6_bits_way_en,
  input  [35:0] io_write_dup_6_bits_addr,
  input         io_write_dup_7_valid,
  input  [7:0]  io_write_dup_7_bits_way_en,
  input  [35:0] io_write_dup_7_bits_addr,
  output [63:0] io_readline_resp_0_raw_data,
  output [63:0] io_readline_resp_1_raw_data,
  output [63:0] io_readline_resp_2_raw_data,
  output [63:0] io_readline_resp_3_raw_data,
  output [63:0] io_readline_resp_4_raw_data,
  output [63:0] io_readline_resp_5_raw_data,
  output [63:0] io_readline_resp_6_raw_data,
  output [63:0] io_readline_resp_7_raw_data,
  output        io_readline_error_delayed,
  output [63:0] io_read_resp_0_0_raw_data,
  output [63:0] io_read_resp_0_1_raw_data,
  output [63:0] io_read_resp_1_0_raw_data,
  output [63:0] io_read_resp_1_1_raw_data,
  output [63:0] io_read_resp_2_0_raw_data,
  output [63:0] io_read_resp_2_1_raw_data,
  output        io_read_error_delayed_0_0,
  output        io_read_error_delayed_0_1,
  output        io_read_error_delayed_1_0,
  output        io_read_error_delayed_1_1,
  output        io_read_error_delayed_2_0,
  output        io_read_error_delayed_2_1,
  output        io_bank_conflict_slow_0,
  output        io_bank_conflict_slow_1,
  output        io_bank_conflict_slow_2,
  input  [63:0] io_cacheOp_req_bits_wayNum,
  input  [63:0] io_cacheOp_req_bits_index,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_0,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_1,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_2,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_3,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_4,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_5,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_6,
  input  [63:0] io_cacheOp_req_bits_write_data_vec_7,
  input         io_cacheOp_req_dup_0_valid,
  input         io_cacheOp_req_dup_1_valid,
  input         io_cacheOp_req_dup_2_valid,
  input         io_cacheOp_req_dup_3_valid,
  input         io_cacheOp_req_dup_8_valid,
  input         io_cacheOp_req_dup_9_valid,
  input         io_cacheOp_req_dup_10_valid,
  input         io_cacheOp_req_dup_11_valid,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_0,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_1,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_2,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_3,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_8,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_9,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_10,
  input  [63:0] io_cacheOp_req_bits_opCode_dup_11
);

  wire             bank_result_0_0_error_delayed = 1'h0;
  wire             bank_result_0_1_error_delayed = 1'h0;
  wire             bank_result_0_2_error_delayed = 1'h0;
  wire             bank_result_0_3_error_delayed = 1'h0;
  wire             bank_result_0_4_error_delayed = 1'h0;
  wire             bank_result_0_5_error_delayed = 1'h0;
  wire             bank_result_0_6_error_delayed = 1'h0;
  wire             bank_result_0_7_error_delayed = 1'h0;
  wire             read_bank_error_delayed_0_0 = 1'h0;
  wire             read_bank_error_delayed_0_1 = 1'h0;
  wire             read_bank_error_delayed_0_2 = 1'h0;
  wire             read_bank_error_delayed_0_3 = 1'h0;
  wire             read_bank_error_delayed_0_4 = 1'h0;
  wire             read_bank_error_delayed_0_5 = 1'h0;
  wire             read_bank_error_delayed_0_6 = 1'h0;
  wire             read_bank_error_delayed_0_7 = 1'h0;
  wire [7:0]       bank_result_0_0_ecc = 8'h0;
  wire [7:0]       bank_result_0_1_ecc = 8'h0;
  wire [7:0]       bank_result_0_2_ecc = 8'h0;
  wire [7:0]       bank_result_0_3_ecc = 8'h0;
  wire [7:0]       bank_result_0_4_ecc = 8'h0;
  wire [7:0]       bank_result_0_5_ecc = 8'h0;
  wire [7:0]       bank_result_0_6_ecc = 8'h0;
  wire [7:0]       bank_result_0_7_ecc = 8'h0;
  reg  [7:0]       write_bank_mask_reg;
  reg  [63:0]      write_data_reg_0;
  reg  [63:0]      write_data_reg_1;
  reg  [63:0]      write_data_reg_2;
  reg  [63:0]      write_data_reg_3;
  reg  [63:0]      write_data_reg_4;
  reg  [63:0]      write_data_reg_5;
  reg  [63:0]      write_data_reg_6;
  reg  [63:0]      write_data_reg_7;
  reg              write_valid_reg;
  reg              write_valid_dup_reg_0;
  reg              write_valid_dup_reg_1;
  reg              write_valid_dup_reg_2;
  reg              write_valid_dup_reg_3;
  reg              write_valid_dup_reg_4;
  reg              write_valid_dup_reg_5;
  reg              write_valid_dup_reg_6;
  reg              write_valid_dup_reg_7;
  reg  [7:0]       write_wayen_dup_reg_0;
  reg  [7:0]       write_wayen_dup_reg_1;
  reg  [7:0]       write_wayen_dup_reg_2;
  reg  [7:0]       write_wayen_dup_reg_3;
  reg  [7:0]       write_wayen_dup_reg_4;
  reg  [7:0]       write_wayen_dup_reg_5;
  reg  [7:0]       write_wayen_dup_reg_6;
  reg  [7:0]       write_wayen_dup_reg_7;
  reg  [6:0]       write_set_addr_dup_reg_0;
  reg  [6:0]       write_set_addr_dup_reg_1;
  reg  [6:0]       write_set_addr_dup_reg_2;
  reg  [6:0]       write_set_addr_dup_reg_3;
  reg  [6:0]       write_set_addr_dup_reg_4;
  reg  [6:0]       write_set_addr_dup_reg_5;
  reg  [6:0]       write_set_addr_dup_reg_6;
  reg  [6:0]       write_set_addr_dup_reg_7;
  wire [3:0]       bank_addrs_0_1 =
    io_is128Req_0 ? 4'({1'h0, io_read_0_bits_addr[5:3]} + 4'h1) : 4'h8;
  reg  [6:0]       set_addrs_reg_0_r;
  reg  [7:0]       way_en_reg_0_r;
  wire [3:0]       bank_addrs_1_1 =
    io_is128Req_1 ? 4'({1'h0, io_read_1_bits_addr[5:3]} + 4'h1) : 4'h8;
  reg  [6:0]       set_addrs_reg_1_r;
  reg  [7:0]       way_en_reg_1_r;
  wire [3:0]       bank_addrs_2_1 =
    io_is128Req_2 ? 4'({1'h0, io_read_2_bits_addr[5:3]} + 4'h1) : 4'h8;
  reg  [6:0]       set_addrs_reg_2_r;
  reg  [7:0]       way_en_reg_2_r;
  wire [7:0]       _wr_bank_conflict_T_3 =
    write_bank_mask_reg >> io_read_0_bits_addr[5:3];
  wire [7:0]       _wr_bank_conflict_T_5 = write_bank_mask_reg >> bank_addrs_0_1;
  wire             wr_bank_conflict_0 =
    io_read_0_valid & write_valid_reg
    & (_wr_bank_conflict_T_3[0] | _wr_bank_conflict_T_5[0] & io_is128Req_0);
  wire [7:0]       _wr_bank_conflict_T_12 =
    write_bank_mask_reg >> io_read_1_bits_addr[5:3];
  wire [7:0]       _wr_bank_conflict_T_14 = write_bank_mask_reg >> bank_addrs_1_1;
  wire             wr_bank_conflict_1 =
    io_read_1_valid & write_valid_reg
    & (_wr_bank_conflict_T_12[0] | _wr_bank_conflict_T_14[0] & io_is128Req_1);
  wire [7:0]       _wr_bank_conflict_T_21 =
    write_bank_mask_reg >> io_read_2_bits_addr[5:3];
  wire [7:0]       _wr_bank_conflict_T_23 = write_bank_mask_reg >> bank_addrs_2_1;
  wire             wr_bank_conflict_2 =
    io_read_2_valid & write_valid_reg
    & (_wr_bank_conflict_T_21[0] | _wr_bank_conflict_T_23[0] & io_is128Req_2);
  wire             _wrl_bank_conflict_T = io_readline_valid & write_valid_reg;
  reg              real_other_bank_conflict_reg;
  reg              real_other_bank_conflict_reg_1;
  reg              real_rr_bank_conflict_reg_REG;
  wire             io_bank_conflict_slow_1_0 =
    real_other_bank_conflict_reg_1 | real_rr_bank_conflict_reg_REG
    & (way_en_reg_0_r != way_en_reg_1_r | set_addrs_reg_0_r != set_addrs_reg_1_r);
  reg              real_other_bank_conflict_reg_2;
  reg              real_rr_bank_conflict_reg_REG_1;
  reg              real_rr_bank_conflict_reg_REG_2;
  wire             io_bank_conflict_slow_2_0 =
    real_other_bank_conflict_reg_2 | real_rr_bank_conflict_reg_REG_1
    & (way_en_reg_0_r != way_en_reg_2_r | set_addrs_reg_0_r != set_addrs_reg_2_r)
    | real_rr_bank_conflict_reg_REG_2
    & (way_en_reg_1_r != way_en_reg_2_r | set_addrs_reg_1_r != set_addrs_reg_2_r);
  wire             bank_addr_matchs_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h0 | bank_addrs_0_1 == 4'h0 & io_is128Req_0);
  wire             bank_addr_matchs_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h0 | bank_addrs_1_1 == 4'h0 & io_is128Req_1);
  wire             bank_addr_matchs_1_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h1 | bank_addrs_0_1 == 4'h1 & io_is128Req_0);
  wire             bank_addr_matchs_1_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h1 | bank_addrs_1_1 == 4'h1 & io_is128Req_1);
  wire             bank_addr_matchs_2_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h2 | bank_addrs_0_1 == 4'h2 & io_is128Req_0);
  wire             bank_addr_matchs_2_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h2 | bank_addrs_1_1 == 4'h2 & io_is128Req_1);
  wire             bank_addr_matchs_3_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h3 | bank_addrs_0_1 == 4'h3 & io_is128Req_0);
  wire             bank_addr_matchs_3_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h3 | bank_addrs_1_1 == 4'h3 & io_is128Req_1);
  wire             bank_addr_matchs_4_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h4 | bank_addrs_0_1 == 4'h4 & io_is128Req_0);
  wire             bank_addr_matchs_4_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h4 | bank_addrs_1_1 == 4'h4 & io_is128Req_1);
  wire             bank_addr_matchs_5_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h5 | bank_addrs_0_1 == 4'h5 & io_is128Req_0);
  wire             bank_addr_matchs_5_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h5 | bank_addrs_1_1 == 4'h5 & io_is128Req_1);
  wire             bank_addr_matchs_6_0 =
    io_read_0_valid
    & (io_read_0_bits_addr[5:3] == 3'h6 | bank_addrs_0_1 == 4'h6 & io_is128Req_0);
  wire             bank_addr_matchs_6_1 =
    io_read_1_valid
    & (io_read_1_bits_addr[5:3] == 3'h6 | bank_addrs_1_1 == 4'h6 & io_is128Req_1);
  wire             bank_addr_matchs_7_0 =
    io_read_0_valid
    & ((&(io_read_0_bits_addr[5:3])) | bank_addrs_0_1 == 4'h7 & io_is128Req_0);
  wire             bank_addr_matchs_7_1 =
    io_read_1_valid
    & ((&(io_read_1_bits_addr[5:3])) | bank_addrs_1_1 == 4'h7 & io_is128Req_1);
  reg              r_read_fire;
  reg  [3:0]       r_bank_addr_0;
  reg  [3:0]       r_bank_addr_1;
  reg              rr_read_fire;
  reg  [3:0]       rr_bank_addr_r_0;
  reg  [3:0]       rr_bank_addr_r_1;
  reg  [3:0]       rr_bank_addr_0;
  reg  [3:0]       rr_bank_addr_1;
  wire [63:0]      bank_result_0_0_raw_data;
  wire [63:0]      bank_result_0_1_raw_data;
  wire [63:0]      bank_result_0_2_raw_data;
  wire [63:0]      bank_result_0_3_raw_data;
  wire [63:0]      bank_result_0_4_raw_data;
  wire [63:0]      bank_result_0_5_raw_data;
  wire [63:0]      bank_result_0_6_raw_data;
  wire [63:0]      bank_result_0_7_raw_data;
  wire [7:0][63:0] _GEN =
    {{bank_result_0_7_raw_data},
     {bank_result_0_6_raw_data},
     {bank_result_0_5_raw_data},
     {bank_result_0_4_raw_data},
     {bank_result_0_3_raw_data},
     {bank_result_0_2_raw_data},
     {bank_result_0_1_raw_data},
     {bank_result_0_0_raw_data}};
  wire [7:0]       _GEN_0 =
    {{read_bank_error_delayed_0_7},
     {read_bank_error_delayed_0_6},
     {read_bank_error_delayed_0_5},
     {read_bank_error_delayed_0_4},
     {read_bank_error_delayed_0_3},
     {read_bank_error_delayed_0_2},
     {read_bank_error_delayed_0_1},
     {read_bank_error_delayed_0_0}};
  reg              io_read_error_delayed_0_0_REG;
  reg              io_read_error_delayed_0_1_REG;
  reg              r_read_fire_1;
  reg  [3:0]       r_bank_addr_1_0;
  reg  [3:0]       r_bank_addr_1_1;
  reg              rr_read_fire_1;
  reg  [3:0]       rr_bank_addr_r_1_0;
  reg  [3:0]       rr_bank_addr_r_1_1;
  reg  [3:0]       rr_bank_addr_1_0;
  reg  [3:0]       rr_bank_addr_1_1;
  reg              io_read_error_delayed_1_0_REG;
  reg              io_read_error_delayed_1_1_REG;
  reg              r_read_fire_2;
  reg  [3:0]       r_bank_addr_2_0;
  reg  [3:0]       r_bank_addr_2_1;
  reg              rr_read_fire_2;
  reg  [3:0]       rr_bank_addr_r_2_0;
  reg  [3:0]       rr_bank_addr_r_2_1;
  reg  [3:0]       rr_bank_addr_2_0;
  reg  [3:0]       rr_bank_addr_2_1;
  reg              io_read_error_delayed_2_0_REG;
  reg              io_read_error_delayed_2_1_REG;
  reg              io_readline_error_delayed_REG;
  reg              io_readline_error_delayed_REG_1;
  reg              wen_reg_REG;
  reg              wen_reg_REG_1;
  reg              wen_reg_REG_2;
  reg              wen_reg_REG_3;
  reg              wen_reg_REG_4;
  reg              wen_reg_REG_5;
  reg              wen_reg_REG_6;
  reg              wen_reg_REG_7;
  wire [31:0]      cacheOpWayMask = 32'h1 << io_cacheOp_req_bits_wayNum[4:0];
  wire             _GEN_1 =
    io_cacheOp_req_dup_0_valid & io_cacheOp_req_bits_opCode_dup_0 == 64'h3;
  wire             _GEN_2 =
    io_cacheOp_req_dup_1_valid & io_cacheOp_req_bits_opCode_dup_1 == 64'h3;
  wire             _GEN_3 =
    io_cacheOp_req_dup_2_valid & io_cacheOp_req_bits_opCode_dup_2 == 64'h3;
  wire             _GEN_4 =
    io_cacheOp_req_dup_3_valid & io_cacheOp_req_bits_opCode_dup_3 == 64'h3;
  wire             _GEN_5 =
    io_cacheOp_req_dup_8_valid & io_cacheOp_req_bits_opCode_dup_8 == 64'h7;
  wire             _GEN_6 =
    io_cacheOp_req_dup_9_valid & io_cacheOp_req_bits_opCode_dup_9 == 64'h7;
  wire             _GEN_7 =
    io_cacheOp_req_dup_10_valid & io_cacheOp_req_bits_opCode_dup_10 == 64'h7;
  wire             _GEN_8 =
    io_cacheOp_req_dup_11_valid & io_cacheOp_req_bits_opCode_dup_11 == 64'h7;
  wire [3:0]       bank_addrs_0_0 = {1'h0, io_read_0_bits_addr[5:3]};
  wire [3:0]       bank_addrs_1_0 = {1'h0, io_read_1_bits_addr[5:3]};
  wire [3:0]       bank_addrs_2_0 = {1'h0, io_read_2_bits_addr[5:3]};
  wire             _rr_way_addr_T_7 = ~wr_bank_conflict_0 & io_read_0_valid;
  wire             _rr_way_addr_T_15 = ~wr_bank_conflict_1 & io_read_1_valid;
  wire             _rr_way_addr_T_23 = ~wr_bank_conflict_2 & io_read_2_valid;
  always @(posedge clock) begin
    if (io_write_valid) begin
      write_bank_mask_reg <= io_write_bits_wmask;
      write_data_reg_0 <= io_write_bits_data_0;
      write_data_reg_1 <= io_write_bits_data_1;
      write_data_reg_2 <= io_write_bits_data_2;
      write_data_reg_3 <= io_write_bits_data_3;
      write_data_reg_4 <= io_write_bits_data_4;
      write_data_reg_5 <= io_write_bits_data_5;
      write_data_reg_6 <= io_write_bits_data_6;
      write_data_reg_7 <= io_write_bits_data_7;
    end
    write_valid_reg <= io_write_valid;
    write_valid_dup_reg_0 <= io_write_dup_0_valid;
    write_valid_dup_reg_1 <= io_write_dup_1_valid;
    write_valid_dup_reg_2 <= io_write_dup_2_valid;
    write_valid_dup_reg_3 <= io_write_dup_3_valid;
    write_valid_dup_reg_4 <= io_write_dup_4_valid;
    write_valid_dup_reg_5 <= io_write_dup_5_valid;
    write_valid_dup_reg_6 <= io_write_dup_6_valid;
    write_valid_dup_reg_7 <= io_write_dup_7_valid;
    if (io_write_dup_0_valid) begin
      write_wayen_dup_reg_0 <= io_write_dup_0_bits_way_en;
      write_set_addr_dup_reg_0 <= io_write_dup_0_bits_addr[12:6];
    end
    if (io_write_dup_1_valid) begin
      write_wayen_dup_reg_1 <= io_write_dup_1_bits_way_en;
      write_set_addr_dup_reg_1 <= io_write_dup_1_bits_addr[12:6];
    end
    if (io_write_dup_2_valid) begin
      write_wayen_dup_reg_2 <= io_write_dup_2_bits_way_en;
      write_set_addr_dup_reg_2 <= io_write_dup_2_bits_addr[12:6];
    end
    if (io_write_dup_3_valid) begin
      write_wayen_dup_reg_3 <= io_write_dup_3_bits_way_en;
      write_set_addr_dup_reg_3 <= io_write_dup_3_bits_addr[12:6];
    end
    if (io_write_dup_4_valid) begin
      write_wayen_dup_reg_4 <= io_write_dup_4_bits_way_en;
      write_set_addr_dup_reg_4 <= io_write_dup_4_bits_addr[12:6];
    end
    if (io_write_dup_5_valid) begin
      write_wayen_dup_reg_5 <= io_write_dup_5_bits_way_en;
      write_set_addr_dup_reg_5 <= io_write_dup_5_bits_addr[12:6];
    end
    if (io_write_dup_6_valid) begin
      write_wayen_dup_reg_6 <= io_write_dup_6_bits_way_en;
      write_set_addr_dup_reg_6 <= io_write_dup_6_bits_addr[12:6];
    end
    if (io_write_dup_7_valid) begin
      write_wayen_dup_reg_7 <= io_write_dup_7_bits_way_en;
      write_set_addr_dup_reg_7 <= io_write_dup_7_bits_addr[12:6];
    end
    if (io_read_0_valid) begin
      set_addrs_reg_0_r <= io_read_0_bits_addr[12:6];
      way_en_reg_0_r <= io_read_0_bits_way_en;
    end
    if (io_read_1_valid) begin
      set_addrs_reg_1_r <= io_read_1_bits_addr[12:6];
      way_en_reg_1_r <= io_read_1_bits_way_en;
    end
    if (io_read_2_valid) begin
      set_addrs_reg_2_r <= io_read_2_bits_addr[12:6];
      way_en_reg_2_r <= io_read_2_bits_way_en;
    end
    real_other_bank_conflict_reg <=
      wr_bank_conflict_0 | io_read_0_valid & io_readline_valid;
    real_other_bank_conflict_reg_1 <=
      wr_bank_conflict_1 | io_read_1_valid & io_readline_valid;
    real_rr_bank_conflict_reg_REG <=
      io_read_0_valid & io_read_1_valid
      & (|(io_read_0_bits_bankMask & io_read_1_bits_bankMask));
    real_other_bank_conflict_reg_2 <=
      wr_bank_conflict_2 | io_read_2_valid & io_readline_valid;
    real_rr_bank_conflict_reg_REG_1 <=
      io_read_0_valid & io_read_2_valid
      & (|(io_read_0_bits_bankMask & io_read_2_bits_bankMask));
    real_rr_bank_conflict_reg_REG_2 <=
      io_read_1_valid & io_read_2_valid
      & (|(io_read_1_bits_bankMask & io_read_2_bits_bankMask));
    r_read_fire <= _rr_way_addr_T_7;
    if (_rr_way_addr_T_7) begin
      r_bank_addr_0 <= bank_addrs_0_0;
      r_bank_addr_1 <= bank_addrs_0_1;
      rr_bank_addr_r_0 <= bank_addrs_0_0;
      rr_bank_addr_r_1 <= bank_addrs_0_1;
    end
    rr_read_fire <= r_read_fire;
    if (r_read_fire) begin
      rr_bank_addr_0 <= rr_bank_addr_r_0;
      rr_bank_addr_1 <= rr_bank_addr_r_1;
    end
    io_read_error_delayed_0_0_REG <= real_other_bank_conflict_reg;
    io_read_error_delayed_0_1_REG <= real_other_bank_conflict_reg;
    r_read_fire_1 <= _rr_way_addr_T_15;
    if (_rr_way_addr_T_15) begin
      r_bank_addr_1_0 <= bank_addrs_1_0;
      r_bank_addr_1_1 <= bank_addrs_1_1;
      rr_bank_addr_r_1_0 <= bank_addrs_1_0;
      rr_bank_addr_r_1_1 <= bank_addrs_1_1;
    end
    rr_read_fire_1 <= r_read_fire_1;
    if (r_read_fire_1) begin
      rr_bank_addr_1_0 <= rr_bank_addr_r_1_0;
      rr_bank_addr_1_1 <= rr_bank_addr_r_1_1;
    end
    io_read_error_delayed_1_0_REG <= io_bank_conflict_slow_1_0;
    io_read_error_delayed_1_1_REG <= io_bank_conflict_slow_1_0;
    r_read_fire_2 <= _rr_way_addr_T_23;
    if (_rr_way_addr_T_23) begin
      r_bank_addr_2_0 <= bank_addrs_2_0;
      r_bank_addr_2_1 <= bank_addrs_2_1;
      rr_bank_addr_r_2_0 <= bank_addrs_2_0;
      rr_bank_addr_r_2_1 <= bank_addrs_2_1;
    end
    rr_read_fire_2 <= r_read_fire_2;
    if (r_read_fire_2) begin
      rr_bank_addr_2_0 <= rr_bank_addr_r_2_0;
      rr_bank_addr_2_1 <= rr_bank_addr_r_2_1;
    end
    io_read_error_delayed_2_0_REG <= io_bank_conflict_slow_2_0;
    io_read_error_delayed_2_1_REG <= io_bank_conflict_slow_2_0;
    io_readline_error_delayed_REG <= ~_wrl_bank_conflict_T & io_readline_valid;
    io_readline_error_delayed_REG_1 <= io_readline_error_delayed_REG;
    wen_reg_REG <= io_write_valid;
    wen_reg_REG_1 <= io_write_valid;
    wen_reg_REG_2 <= io_write_valid;
    wen_reg_REG_3 <= io_write_valid;
    wen_reg_REG_4 <= io_write_valid;
    wen_reg_REG_5 <= io_write_valid;
    wen_reg_REG_6 <= io_write_valid;
    wen_reg_REG_7 <= io_write_valid;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:57];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h3A; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        write_bank_mask_reg = _RANDOM[6'h4][7:0];
        write_data_reg_0 = {_RANDOM[6'h4][31:8], _RANDOM[6'h5], _RANDOM[6'h6][7:0]};
        write_data_reg_1 = {_RANDOM[6'h6][31:8], _RANDOM[6'h7], _RANDOM[6'h8][7:0]};
        write_data_reg_2 = {_RANDOM[6'h8][31:8], _RANDOM[6'h9], _RANDOM[6'hA][7:0]};
        write_data_reg_3 = {_RANDOM[6'hA][31:8], _RANDOM[6'hB], _RANDOM[6'hC][7:0]};
        write_data_reg_4 = {_RANDOM[6'hC][31:8], _RANDOM[6'hD], _RANDOM[6'hE][7:0]};
        write_data_reg_5 = {_RANDOM[6'hE][31:8], _RANDOM[6'hF], _RANDOM[6'h10][7:0]};
        write_data_reg_6 = {_RANDOM[6'h10][31:8], _RANDOM[6'h11], _RANDOM[6'h12][7:0]};
        write_data_reg_7 = {_RANDOM[6'h12][31:8], _RANDOM[6'h13], _RANDOM[6'h14][7:0]};
        write_valid_reg = _RANDOM[6'h14][8];
        write_valid_dup_reg_0 = _RANDOM[6'h14][9];
        write_valid_dup_reg_1 = _RANDOM[6'h14][10];
        write_valid_dup_reg_2 = _RANDOM[6'h14][11];
        write_valid_dup_reg_3 = _RANDOM[6'h14][12];
        write_valid_dup_reg_4 = _RANDOM[6'h14][13];
        write_valid_dup_reg_5 = _RANDOM[6'h14][14];
        write_valid_dup_reg_6 = _RANDOM[6'h14][15];
        write_valid_dup_reg_7 = _RANDOM[6'h14][16];
        write_wayen_dup_reg_0 = _RANDOM[6'h14][24:17];
        write_wayen_dup_reg_1 = {_RANDOM[6'h14][31:25], _RANDOM[6'h15][0]};
        write_wayen_dup_reg_2 = _RANDOM[6'h15][8:1];
        write_wayen_dup_reg_3 = _RANDOM[6'h15][16:9];
        write_wayen_dup_reg_4 = _RANDOM[6'h15][24:17];
        write_wayen_dup_reg_5 = {_RANDOM[6'h15][31:25], _RANDOM[6'h16][0]};
        write_wayen_dup_reg_6 = _RANDOM[6'h16][8:1];
        write_wayen_dup_reg_7 = _RANDOM[6'h16][16:9];
        write_set_addr_dup_reg_0 = _RANDOM[6'h16][23:17];
        write_set_addr_dup_reg_1 = _RANDOM[6'h16][30:24];
        write_set_addr_dup_reg_2 = {_RANDOM[6'h16][31], _RANDOM[6'h17][5:0]};
        write_set_addr_dup_reg_3 = _RANDOM[6'h17][12:6];
        write_set_addr_dup_reg_4 = _RANDOM[6'h17][19:13];
        write_set_addr_dup_reg_5 = _RANDOM[6'h17][26:20];
        write_set_addr_dup_reg_6 = {_RANDOM[6'h17][31:27], _RANDOM[6'h18][1:0]};
        write_set_addr_dup_reg_7 = _RANDOM[6'h18][8:2];
        set_addrs_reg_0_r = _RANDOM[6'h18][24:18];
        way_en_reg_0_r = {_RANDOM[6'h18][31:26], _RANDOM[6'h19][1:0]};
        set_addrs_reg_1_r = _RANDOM[6'h19][8:2];
        way_en_reg_1_r = _RANDOM[6'h19][17:10];
        set_addrs_reg_2_r = _RANDOM[6'h19][24:18];
        way_en_reg_2_r = {_RANDOM[6'h19][31:26], _RANDOM[6'h1A][1:0]};
        real_other_bank_conflict_reg = _RANDOM[6'h1A][2];
        real_other_bank_conflict_reg_1 = _RANDOM[6'h1A][3];
        real_rr_bank_conflict_reg_REG = _RANDOM[6'h1A][4];
        real_other_bank_conflict_reg_2 = _RANDOM[6'h1A][5];
        real_rr_bank_conflict_reg_REG_1 = _RANDOM[6'h1A][6];
        real_rr_bank_conflict_reg_REG_2 = _RANDOM[6'h1A][7];
        r_read_fire = _RANDOM[6'h35][24];
        r_bank_addr_0 = _RANDOM[6'h35][29:26];
        r_bank_addr_1 = {_RANDOM[6'h35][31:30], _RANDOM[6'h36][1:0]};
        rr_read_fire = _RANDOM[6'h36][2];
        rr_bank_addr_r_0 = _RANDOM[6'h36][8:5];
        rr_bank_addr_r_1 = _RANDOM[6'h36][12:9];
        rr_bank_addr_0 = _RANDOM[6'h36][16:13];
        rr_bank_addr_1 = _RANDOM[6'h36][20:17];
        io_read_error_delayed_0_0_REG = _RANDOM[6'h36][27];
        io_read_error_delayed_0_1_REG = _RANDOM[6'h36][28];
        r_read_fire_1 = _RANDOM[6'h36][29];
        r_bank_addr_1_0 = {_RANDOM[6'h36][31], _RANDOM[6'h37][2:0]};
        r_bank_addr_1_1 = _RANDOM[6'h37][6:3];
        rr_read_fire_1 = _RANDOM[6'h37][7];
        rr_bank_addr_r_1_0 = _RANDOM[6'h37][13:10];
        rr_bank_addr_r_1_1 = _RANDOM[6'h37][17:14];
        rr_bank_addr_1_0 = _RANDOM[6'h37][21:18];
        rr_bank_addr_1_1 = _RANDOM[6'h37][25:22];
        io_read_error_delayed_1_0_REG = _RANDOM[6'h38][0];
        io_read_error_delayed_1_1_REG = _RANDOM[6'h38][1];
        r_read_fire_2 = _RANDOM[6'h38][2];
        r_bank_addr_2_0 = _RANDOM[6'h38][7:4];
        r_bank_addr_2_1 = _RANDOM[6'h38][11:8];
        rr_read_fire_2 = _RANDOM[6'h38][12];
        rr_bank_addr_r_2_0 = _RANDOM[6'h38][18:15];
        rr_bank_addr_r_2_1 = _RANDOM[6'h38][22:19];
        rr_bank_addr_2_0 = _RANDOM[6'h38][26:23];
        rr_bank_addr_2_1 = _RANDOM[6'h38][30:27];
        io_read_error_delayed_2_0_REG = _RANDOM[6'h39][5];
        io_read_error_delayed_2_1_REG = _RANDOM[6'h39][6];
        io_readline_error_delayed_REG = _RANDOM[6'h39][8];
        io_readline_error_delayed_REG_1 = _RANDOM[6'h39][9];
        wen_reg_REG = _RANDOM[6'h39][10];
        wen_reg_REG_1 = _RANDOM[6'h39][11];
        wen_reg_REG_2 = _RANDOM[6'h39][12];
        wen_reg_REG_3 = _RANDOM[6'h39][13];
        wen_reg_REG_4 = _RANDOM[6'h39][14];
        wen_reg_REG_5 = _RANDOM[6'h39][15];
        wen_reg_REG_6 = _RANDOM[6'h39][16];
        wen_reg_REG_7 = _RANDOM[6'h39][17];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DataSRAMBank data_banks_0_0 (
    .clock       (clock),
    .io_w_en     (_GEN_5 | write_bank_mask_reg[0] & write_valid_dup_reg_0 & wen_reg_REG),
    .io_w_addr   (_GEN_5 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_0),
    .io_w_way_en (_GEN_5 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_0),
    .io_w_data   (_GEN_5 ? io_cacheOp_req_bits_write_data_vec_0 : write_data_reg_0),
    .io_r_en
      (_GEN_1
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h0 | bank_addrs_2_1 == 4'h0
                 & io_is128Req_2),
            bank_addr_matchs_1,
            bank_addr_matchs_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_1
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_1
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_0_raw_data)
  );
  DataSRAMBank data_banks_0_1 (
    .clock       (clock),
    .io_w_en
      (_GEN_5 | write_bank_mask_reg[1] & write_valid_dup_reg_1 & wen_reg_REG_1),
    .io_w_addr   (_GEN_5 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_1),
    .io_w_way_en (_GEN_5 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_1),
    .io_w_data   (_GEN_5 ? io_cacheOp_req_bits_write_data_vec_1 : write_data_reg_1),
    .io_r_en
      (_GEN_1
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h1 | bank_addrs_2_1 == 4'h1
                 & io_is128Req_2),
            bank_addr_matchs_1_1,
            bank_addr_matchs_1_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_1
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_1_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_1_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_1
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_1_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_1_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_1_raw_data)
  );
  DataSRAMBank data_banks_0_2 (
    .clock       (clock),
    .io_w_en
      (_GEN_6 | write_bank_mask_reg[2] & write_valid_dup_reg_2 & wen_reg_REG_2),
    .io_w_addr   (_GEN_6 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_2),
    .io_w_way_en (_GEN_6 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_2),
    .io_w_data   (_GEN_6 ? io_cacheOp_req_bits_write_data_vec_2 : write_data_reg_2),
    .io_r_en
      (_GEN_2
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h2 | bank_addrs_2_1 == 4'h2
                 & io_is128Req_2),
            bank_addr_matchs_2_1,
            bank_addr_matchs_2_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_2
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_2_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_2_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_2
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_2_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_2_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_2_raw_data)
  );
  DataSRAMBank data_banks_0_3 (
    .clock       (clock),
    .io_w_en
      (_GEN_6 | write_bank_mask_reg[3] & write_valid_dup_reg_3 & wen_reg_REG_3),
    .io_w_addr   (_GEN_6 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_3),
    .io_w_way_en (_GEN_6 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_3),
    .io_w_data   (_GEN_6 ? io_cacheOp_req_bits_write_data_vec_3 : write_data_reg_3),
    .io_r_en
      (_GEN_2
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h3 | bank_addrs_2_1 == 4'h3
                 & io_is128Req_2),
            bank_addr_matchs_3_1,
            bank_addr_matchs_3_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_2
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_3_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_3_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_2
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_3_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_3_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_3_raw_data)
  );
  DataSRAMBank data_banks_0_4 (
    .clock       (clock),
    .io_w_en
      (_GEN_7 | write_bank_mask_reg[4] & write_valid_dup_reg_4 & wen_reg_REG_4),
    .io_w_addr   (_GEN_7 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_4),
    .io_w_way_en (_GEN_7 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_4),
    .io_w_data   (_GEN_7 ? io_cacheOp_req_bits_write_data_vec_4 : write_data_reg_4),
    .io_r_en
      (_GEN_3
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h4 | bank_addrs_2_1 == 4'h4
                 & io_is128Req_2),
            bank_addr_matchs_4_1,
            bank_addr_matchs_4_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_3
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_4_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_4_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_3
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_4_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_4_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_4_raw_data)
  );
  DataSRAMBank data_banks_0_5 (
    .clock       (clock),
    .io_w_en
      (_GEN_7 | write_bank_mask_reg[5] & write_valid_dup_reg_5 & wen_reg_REG_5),
    .io_w_addr   (_GEN_7 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_5),
    .io_w_way_en (_GEN_7 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_5),
    .io_w_data   (_GEN_7 ? io_cacheOp_req_bits_write_data_vec_5 : write_data_reg_5),
    .io_r_en
      (_GEN_3
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h5 | bank_addrs_2_1 == 4'h5
                 & io_is128Req_2),
            bank_addr_matchs_5_1,
            bank_addr_matchs_5_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_3
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_5_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_5_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_3
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_5_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_5_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_5_raw_data)
  );
  DataSRAMBank data_banks_0_6 (
    .clock       (clock),
    .io_w_en
      (_GEN_8 | write_bank_mask_reg[6] & write_valid_dup_reg_6 & wen_reg_REG_6),
    .io_w_addr   (_GEN_8 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_6),
    .io_w_way_en (_GEN_8 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_6),
    .io_w_data   (_GEN_8 ? io_cacheOp_req_bits_write_data_vec_6 : write_data_reg_6),
    .io_r_en
      (_GEN_4
       | (|{io_read_2_valid
              & (io_read_2_bits_addr[5:3] == 3'h6 | bank_addrs_2_1 == 4'h6
                 & io_is128Req_2),
            bank_addr_matchs_6_1,
            bank_addr_matchs_6_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_4
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_6_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_6_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_4
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_6_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_6_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_6_raw_data)
  );
  DataSRAMBank data_banks_0_7 (
    .clock       (clock),
    .io_w_en
      (_GEN_8 | write_bank_mask_reg[7] & write_valid_dup_reg_7 & wen_reg_REG_7),
    .io_w_addr   (_GEN_8 ? io_cacheOp_req_bits_index[6:0] : write_set_addr_dup_reg_7),
    .io_w_way_en (_GEN_8 ? cacheOpWayMask[7:0] : write_wayen_dup_reg_7),
    .io_w_data   (_GEN_8 ? io_cacheOp_req_bits_write_data_vec_7 : write_data_reg_7),
    .io_r_en
      (_GEN_4
       | (|{io_read_2_valid
              & ((&(io_read_2_bits_addr[5:3])) | bank_addrs_2_1 == 4'h7 & io_is128Req_2),
            bank_addr_matchs_7_1,
            bank_addr_matchs_7_0}) | io_readline_valid),
    .io_r_addr
      (_GEN_4
         ? io_cacheOp_req_bits_index[6:0]
         : io_readline_valid
             ? io_readline_bits_addr[12:6]
             : bank_addr_matchs_7_0
                 ? io_read_0_bits_addr[12:6]
                 : bank_addr_matchs_7_1
                     ? io_read_1_bits_addr[12:6]
                     : io_read_2_bits_addr[12:6]),
    .io_r_way_en
      (_GEN_4
         ? cacheOpWayMask[7:0]
         : io_readline_valid
             ? io_readline_bits_way_en
             : bank_addr_matchs_7_0
                 ? io_read_0_bits_way_en
                 : bank_addr_matchs_7_1 ? io_read_1_bits_way_en : io_read_2_bits_way_en),
    .io_r_data   (bank_result_0_7_raw_data)
  );
  assign io_read_0_ready = ~wr_bank_conflict_0;
  assign io_read_1_ready = ~wr_bank_conflict_1;
  assign io_read_2_ready = ~wr_bank_conflict_2;
  assign io_readline_ready = ~_wrl_bank_conflict_T;
  assign io_readline_resp_0_raw_data = bank_result_0_0_raw_data;
  assign io_readline_resp_1_raw_data = bank_result_0_1_raw_data;
  assign io_readline_resp_2_raw_data = bank_result_0_2_raw_data;
  assign io_readline_resp_3_raw_data = bank_result_0_3_raw_data;
  assign io_readline_resp_4_raw_data = bank_result_0_4_raw_data;
  assign io_readline_resp_5_raw_data = bank_result_0_5_raw_data;
  assign io_readline_resp_6_raw_data = bank_result_0_6_raw_data;
  assign io_readline_resp_7_raw_data = bank_result_0_7_raw_data;
  assign io_readline_error_delayed =
    io_readline_error_delayed_REG_1
    & (|{bank_result_0_7_error_delayed,
         bank_result_0_6_error_delayed,
         bank_result_0_5_error_delayed,
         bank_result_0_4_error_delayed,
         bank_result_0_3_error_delayed,
         bank_result_0_2_error_delayed,
         bank_result_0_1_error_delayed,
         bank_result_0_0_error_delayed});
  assign io_read_resp_0_0_raw_data = _GEN[r_bank_addr_0[2:0]];
  assign io_read_resp_0_1_raw_data = _GEN[r_bank_addr_1[2:0]];
  assign io_read_resp_1_0_raw_data = _GEN[r_bank_addr_1_0[2:0]];
  assign io_read_resp_1_1_raw_data = _GEN[r_bank_addr_1_1[2:0]];
  assign io_read_resp_2_0_raw_data = _GEN[r_bank_addr_2_0[2:0]];
  assign io_read_resp_2_1_raw_data = _GEN[r_bank_addr_2_1[2:0]];
  assign io_read_error_delayed_0_0 =
    rr_read_fire & _GEN_0[rr_bank_addr_0[2:0]] & ~io_read_error_delayed_0_0_REG;
  assign io_read_error_delayed_0_1 =
    rr_read_fire & _GEN_0[rr_bank_addr_1[2:0]] & ~io_read_error_delayed_0_1_REG;
  assign io_read_error_delayed_1_0 =
    rr_read_fire_1 & _GEN_0[rr_bank_addr_1_0[2:0]] & ~io_read_error_delayed_1_0_REG;
  assign io_read_error_delayed_1_1 =
    rr_read_fire_1 & _GEN_0[rr_bank_addr_1_1[2:0]] & ~io_read_error_delayed_1_1_REG;
  assign io_read_error_delayed_2_0 =
    rr_read_fire_2 & _GEN_0[rr_bank_addr_2_0[2:0]] & ~io_read_error_delayed_2_0_REG;
  assign io_read_error_delayed_2_1 =
    rr_read_fire_2 & _GEN_0[rr_bank_addr_2_1[2:0]] & ~io_read_error_delayed_2_1_REG;
  assign io_bank_conflict_slow_0 = real_other_bank_conflict_reg;
  assign io_bank_conflict_slow_1 = io_bank_conflict_slow_1_0;
  assign io_bank_conflict_slow_2 = io_bank_conflict_slow_2_0;
endmodule

