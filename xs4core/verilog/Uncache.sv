// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Uncache(
  input         clock,
  input         reset,
  input         auto_client_out_a_ready,
  output        auto_client_out_a_valid,
  output [2:0]  auto_client_out_a_bits_opcode,
  output [2:0]  auto_client_out_a_bits_size,
  output [1:0]  auto_client_out_a_bits_source,
  output [35:0] auto_client_out_a_bits_address,
  output [7:0]  auto_client_out_a_bits_mask,
  output [63:0] auto_client_out_a_bits_data,
  output        auto_client_out_d_ready,
  input         auto_client_out_d_valid,
  input  [2:0]  auto_client_out_d_bits_opcode,
  input         auto_client_out_d_bits_denied,
  input  [63:0] auto_client_out_d_bits_data,
  input  [5:0]  io_hartId,
  input         io_enableOutstanding,
  output        io_flush_empty,
  output        io_lsq_req_ready,
  input         io_lsq_req_valid,
  input  [4:0]  io_lsq_req_bits_cmd,
  input  [35:0] io_lsq_req_bits_addr,
  input  [63:0] io_lsq_req_bits_data,
  input  [7:0]  io_lsq_req_bits_mask,
  input  [6:0]  io_lsq_req_bits_id,
  input         io_lsq_req_bits_atomic,
  input         io_lsq_resp_ready,
  output        io_lsq_resp_valid,
  output [63:0] io_lsq_resp_bits_data,
  output [6:0]  io_lsq_resp_bits_id,
  output        io_lsq_resp_bits_nderr
);

  wire             _entries_3_io_req_ready;
  wire             _entries_3_io_resp_valid;
  wire [127:0]     _entries_3_io_resp_bits_data;
  wire [5:0]       _entries_3_io_resp_bits_id;
  wire             _entries_3_io_resp_bits_nderr;
  wire             _entries_3_io_mem_acquire_valid;
  wire [2:0]       _entries_3_io_mem_acquire_bits_opcode;
  wire [2:0]       _entries_3_io_mem_acquire_bits_size;
  wire [1:0]       _entries_3_io_mem_acquire_bits_source;
  wire [35:0]      _entries_3_io_mem_acquire_bits_address;
  wire [7:0]       _entries_3_io_mem_acquire_bits_mask;
  wire [63:0]      _entries_3_io_mem_acquire_bits_data;
  wire             _entries_3_io_mem_grant_ready;
  wire             _entries_3_io_invalid;
  wire             _entries_3_io_atomic;
  wire             _entries_2_io_req_ready;
  wire             _entries_2_io_resp_valid;
  wire [127:0]     _entries_2_io_resp_bits_data;
  wire [5:0]       _entries_2_io_resp_bits_id;
  wire             _entries_2_io_resp_bits_nderr;
  wire             _entries_2_io_mem_acquire_valid;
  wire [2:0]       _entries_2_io_mem_acquire_bits_opcode;
  wire [2:0]       _entries_2_io_mem_acquire_bits_size;
  wire [1:0]       _entries_2_io_mem_acquire_bits_source;
  wire [35:0]      _entries_2_io_mem_acquire_bits_address;
  wire [7:0]       _entries_2_io_mem_acquire_bits_mask;
  wire [63:0]      _entries_2_io_mem_acquire_bits_data;
  wire             _entries_2_io_mem_grant_ready;
  wire             _entries_2_io_invalid;
  wire             _entries_2_io_atomic;
  wire             _entries_1_io_req_ready;
  wire             _entries_1_io_resp_valid;
  wire [127:0]     _entries_1_io_resp_bits_data;
  wire [5:0]       _entries_1_io_resp_bits_id;
  wire             _entries_1_io_resp_bits_nderr;
  wire             _entries_1_io_mem_acquire_valid;
  wire [2:0]       _entries_1_io_mem_acquire_bits_opcode;
  wire [2:0]       _entries_1_io_mem_acquire_bits_size;
  wire [1:0]       _entries_1_io_mem_acquire_bits_source;
  wire [35:0]      _entries_1_io_mem_acquire_bits_address;
  wire [7:0]       _entries_1_io_mem_acquire_bits_mask;
  wire [63:0]      _entries_1_io_mem_acquire_bits_data;
  wire             _entries_1_io_mem_grant_ready;
  wire             _entries_1_io_invalid;
  wire             _entries_1_io_atomic;
  wire             _entries_0_io_req_ready;
  wire             _entries_0_io_resp_valid;
  wire [127:0]     _entries_0_io_resp_bits_data;
  wire [5:0]       _entries_0_io_resp_bits_id;
  wire             _entries_0_io_resp_bits_nderr;
  wire             _entries_0_io_mem_acquire_valid;
  wire [2:0]       _entries_0_io_mem_acquire_bits_opcode;
  wire [2:0]       _entries_0_io_mem_acquire_bits_size;
  wire [1:0]       _entries_0_io_mem_acquire_bits_source;
  wire [35:0]      _entries_0_io_mem_acquire_bits_address;
  wire [7:0]       _entries_0_io_mem_acquire_bits_mask;
  wire [63:0]      _entries_0_io_mem_acquire_bits_data;
  wire             _entries_0_io_mem_grant_ready;
  wire             _entries_0_io_invalid;
  wire             _entries_0_io_atomic;
  reg              enqPtr_flag;
  reg  [1:0]       enqPtr_value;
  reg              issPtr_flag;
  reg  [1:0]       issPtr_value;
  reg              deqPtr_flag;
  reg  [1:0]       deqPtr_value;
  reg              fence;
  wire             _entries_0_io_req_valid_T = enqPtr_value == 2'h0;
  wire             _entries_0_io_select_T = issPtr_value == 2'h0;
  wire             _entries_3_io_select_T_1 = issPtr_value == deqPtr_value;
  wire             _GEN = deqPtr_value == 2'h0;
  wire             _GEN_0 = deqPtr_value == 2'h1;
  wire             _GEN_1 = deqPtr_value == 2'h2;
  wire [3:0]       _GEN_2 =
    {{_entries_3_io_req_ready},
     {_entries_2_io_req_ready},
     {_entries_1_io_req_ready},
     {_entries_0_io_req_valid_T & _entries_0_io_req_ready}};
  wire             req_ready = _GEN_2[enqPtr_value];
  wire [3:0]       _GEN_3 =
    {{_entries_3_io_mem_grant_ready},
     {_entries_2_io_mem_grant_ready},
     {_entries_1_io_mem_grant_ready},
     {_GEN & _entries_0_io_mem_grant_ready}};
  wire             clientNodeOut_d_ready = _GEN_3[deqPtr_value];
  wire [3:0]       _GEN_4 =
    {{_entries_3_io_resp_bits_nderr},
     {_entries_2_io_resp_bits_nderr},
     {_entries_1_io_resp_bits_nderr},
     {_entries_0_io_resp_bits_nderr}};
  wire [3:0][5:0]  _GEN_5 =
    {{_entries_3_io_resp_bits_id},
     {_entries_2_io_resp_bits_id},
     {_entries_1_io_resp_bits_id},
     {_entries_0_io_resp_bits_id}};
  wire [3:0][63:0] _GEN_6 =
    {{_entries_3_io_resp_bits_data[63:0]},
     {_entries_2_io_resp_bits_data[63:0]},
     {_entries_1_io_resp_bits_data[63:0]},
     {_entries_0_io_resp_bits_data[63:0]}};
  wire [3:0]       _GEN_7 =
    {{_entries_3_io_resp_valid},
     {_entries_2_io_resp_valid},
     {_entries_1_io_resp_valid},
     {_GEN & _entries_0_io_resp_valid}};
  wire             io_lsq_resp_valid_0 = _GEN_7[deqPtr_value];
  reg  [2:0]       beatsLeft;
  wire             idle = beatsLeft == 3'h0;
  wire             _GEN_8 =
    _entries_1_io_mem_acquire_valid | _entries_0_io_mem_acquire_valid;
  wire             _GEN_9 =
    _entries_2_io_mem_acquire_valid | _entries_1_io_mem_acquire_valid
    | _entries_0_io_mem_acquire_valid;
  wire             winner_1 =
    ~_entries_0_io_mem_acquire_valid & _entries_1_io_mem_acquire_valid;
  wire             winner_2 = ~_GEN_8 & _entries_2_io_mem_acquire_valid;
  wire             winner_3 = ~_GEN_9 & _entries_3_io_mem_acquire_valid;
  reg              state_0;
  reg              state_1;
  reg              state_2;
  reg              state_3;
  wire             muxState_0 = idle ? _entries_0_io_mem_acquire_valid : state_0;
  wire             muxState_1 = idle ? winner_1 : state_1;
  wire             muxState_2 = idle ? winner_2 : state_2;
  wire             muxState_3 = idle ? winner_3 : state_3;
  wire             clientNodeOut_a_valid =
    idle
      ? _entries_0_io_mem_acquire_valid | _entries_1_io_mem_acquire_valid
        | _entries_2_io_mem_acquire_valid | _entries_3_io_mem_acquire_valid
      : state_0 & _entries_0_io_mem_acquire_valid | state_1
        & _entries_1_io_mem_acquire_valid | state_2 & _entries_2_io_mem_acquire_valid
        | state_3 & _entries_3_io_mem_acquire_valid;
  wire             _GEN_10 = auto_client_out_a_ready & clientNodeOut_a_valid;
  wire             _GEN_11 = clientNodeOut_d_ready & auto_client_out_d_valid;
  wire [3:0]       _GEN_12 =
    {{_entries_3_io_atomic},
     {_entries_2_io_atomic},
     {_entries_1_io_atomic},
     {_entries_0_io_select_T & _entries_0_io_atomic}};
  wire [12:0]      _decode_T_9 = 13'h3F << _entries_3_io_mem_acquire_bits_size;
  wire [12:0]      _decode_T_6 = 13'h3F << _entries_2_io_mem_acquire_bits_size;
  wire [12:0]      _decode_T_3 = 13'h3F << _entries_1_io_mem_acquire_bits_size;
  wire [12:0]      _decode_T = 13'h3F << _entries_0_io_mem_acquire_bits_size;
  wire [2:0]       _GEN_13 = {enqPtr_flag, enqPtr_value};
  wire [2:0]       _GEN_14 = {issPtr_flag, issPtr_value};
  wire [2:0]       _GEN_15 = {deqPtr_flag, deqPtr_value};
  wire             _GEN_16 = io_lsq_resp_ready & io_lsq_resp_valid_0;
  wire [2:0]       _enqPtr_new_ptr_T_1 = 3'(_GEN_13 + 3'h1);
  wire [2:0]       _issPtr_new_ptr_T_1 = 3'(_GEN_14 + 3'h1);
  wire [2:0]       _deqPtr_new_ptr_T_1 = 3'(_GEN_15 + 3'h1);
  wire [2:0]       _deqPtr_new_ptr_T_6 = 3'(_GEN_15 + 3'h1);
  wire [2:0]       _enqPtr_new_ptr_T_6 = 3'(_GEN_13 + 3'h1);
  wire [2:0]       _issPtr_new_ptr_T_6 = 3'(_GEN_14 + 3'h1);
  wire [2:0]       _deqPtr_new_ptr_T_11 = 3'(_GEN_15 + 3'h1);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      enqPtr_flag <= 1'h0;
      enqPtr_value <= 2'h0;
      issPtr_flag <= 1'h0;
      issPtr_value <= 2'h0;
      deqPtr_flag <= 1'h0;
      deqPtr_value <= 2'h0;
      fence <= 1'h0;
      beatsLeft <= 3'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
    end
    else begin
      if (io_enableOutstanding) begin
        if (req_ready & io_lsq_req_valid) begin
          enqPtr_flag <= _enqPtr_new_ptr_T_1[2];
          enqPtr_value <= _enqPtr_new_ptr_T_1[1:0];
        end
        if (_GEN_10) begin
          issPtr_flag <= _issPtr_new_ptr_T_1[2];
          issPtr_value <= _issPtr_new_ptr_T_1[1:0];
        end
        if (_GEN_11) begin
          if (auto_client_out_d_bits_opcode[0]) begin
          end
          else begin
            deqPtr_flag <= _deqPtr_new_ptr_T_1[2];
            deqPtr_value <= _deqPtr_new_ptr_T_1[1:0];
          end
        end
        else if (_GEN_16) begin
          deqPtr_flag <= _deqPtr_new_ptr_T_6[2];
          deqPtr_value <= _deqPtr_new_ptr_T_6[1:0];
        end
        fence <= ~(_GEN_11 & fence) & (_GEN_10 ? _GEN_12[issPtr_value] : fence);
      end
      else if (_GEN_16) begin
        enqPtr_flag <= _enqPtr_new_ptr_T_6[2];
        enqPtr_value <= _enqPtr_new_ptr_T_6[1:0];
        issPtr_flag <= _issPtr_new_ptr_T_6[2];
        issPtr_value <= _issPtr_new_ptr_T_6[1:0];
        deqPtr_flag <= _deqPtr_new_ptr_T_11[2];
        deqPtr_value <= _deqPtr_new_ptr_T_11[1:0];
      end
      if (idle & auto_client_out_a_ready)
        beatsLeft <=
          (_entries_0_io_mem_acquire_valid & ~(_entries_0_io_mem_acquire_bits_opcode[2])
             ? ~(_decode_T[5:3])
             : 3'h0)
          | (winner_1 & ~(_entries_1_io_mem_acquire_bits_opcode[2])
               ? ~(_decode_T_3[5:3])
               : 3'h0)
          | (winner_2 & ~(_entries_2_io_mem_acquire_bits_opcode[2])
               ? ~(_decode_T_6[5:3])
               : 3'h0)
          | (winner_3 & ~(_entries_3_io_mem_acquire_bits_opcode[2])
               ? ~(_decode_T_9[5:3])
               : 3'h0);
      else
        beatsLeft <=
          3'(beatsLeft - {2'h0, auto_client_out_a_ready & clientNodeOut_a_valid});
      if (idle) begin
        state_0 <= _entries_0_io_mem_acquire_valid;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        enqPtr_flag = _RANDOM[/*Zero width*/ 1'b0][0];
        enqPtr_value = _RANDOM[/*Zero width*/ 1'b0][2:1];
        issPtr_flag = _RANDOM[/*Zero width*/ 1'b0][3];
        issPtr_value = _RANDOM[/*Zero width*/ 1'b0][5:4];
        deqPtr_flag = _RANDOM[/*Zero width*/ 1'b0][6];
        deqPtr_value = _RANDOM[/*Zero width*/ 1'b0][8:7];
        fence = _RANDOM[/*Zero width*/ 1'b0][9];
        beatsLeft = _RANDOM[/*Zero width*/ 1'b0][12:10];
        state_0 = _RANDOM[/*Zero width*/ 1'b0][13];
        state_1 = _RANDOM[/*Zero width*/ 1'b0][14];
        state_2 = _RANDOM[/*Zero width*/ 1'b0][15];
        state_3 = _RANDOM[/*Zero width*/ 1'b0][16];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        enqPtr_flag = 1'h0;
        enqPtr_value = 2'h0;
        issPtr_flag = 1'h0;
        issPtr_value = 2'h0;
        deqPtr_flag = 1'h0;
        deqPtr_value = 2'h0;
        fence = 1'h0;
        beatsLeft = 3'h0;
        state_0 = 1'h0;
        state_1 = 1'h0;
        state_2 = 1'h0;
        state_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MMIOEntry entries_0 (
    .clock                       (clock),
    .reset                       (reset),
    .io_hartId                   (io_hartId),
    .io_enableOutstanding        (io_enableOutstanding),
    .io_req_ready                (_entries_0_io_req_ready),
    .io_req_valid                (_entries_0_io_req_valid_T & io_lsq_req_valid),
    .io_req_bits_cmd             (io_lsq_req_bits_cmd),
    .io_req_bits_addr            (io_lsq_req_bits_addr),
    .io_req_bits_data            (io_lsq_req_bits_data),
    .io_req_bits_mask            (io_lsq_req_bits_mask),
    .io_req_bits_id              (io_lsq_req_bits_id),
    .io_req_bits_atomic          (io_lsq_req_bits_atomic),
    .io_resp_ready               (_GEN & io_lsq_resp_ready),
    .io_resp_valid               (_entries_0_io_resp_valid),
    .io_resp_bits_data           (_entries_0_io_resp_bits_data),
    .io_resp_bits_id             (_entries_0_io_resp_bits_id),
    .io_resp_bits_nderr          (_entries_0_io_resp_bits_nderr),
    .io_mem_acquire_ready        (auto_client_out_a_ready & (idle | state_0)),
    .io_mem_acquire_valid        (_entries_0_io_mem_acquire_valid),
    .io_mem_acquire_bits_opcode  (_entries_0_io_mem_acquire_bits_opcode),
    .io_mem_acquire_bits_size    (_entries_0_io_mem_acquire_bits_size),
    .io_mem_acquire_bits_source  (_entries_0_io_mem_acquire_bits_source),
    .io_mem_acquire_bits_address (_entries_0_io_mem_acquire_bits_address),
    .io_mem_acquire_bits_mask    (_entries_0_io_mem_acquire_bits_mask),
    .io_mem_acquire_bits_data    (_entries_0_io_mem_acquire_bits_data),
    .io_mem_grant_ready          (_entries_0_io_mem_grant_ready),
    .io_mem_grant_valid          (_GEN & auto_client_out_d_valid),
    .io_mem_grant_bits_denied    (auto_client_out_d_bits_denied),
    .io_mem_grant_bits_data      (auto_client_out_d_bits_data),
    .io_invalid                  (_entries_0_io_invalid),
    .io_select
      (_entries_0_io_select_T
       & (_entries_0_io_atomic ? _entries_3_io_select_T_1 : ~fence)),
    .io_atomic                   (_entries_0_io_atomic)
  );
  MMIOEntry entries_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_hartId                   (io_hartId),
    .io_enableOutstanding        (io_enableOutstanding),
    .io_req_ready                (_entries_1_io_req_ready),
    .io_req_valid                (enqPtr_value == 2'h1 & io_lsq_req_valid),
    .io_req_bits_cmd             (io_lsq_req_bits_cmd),
    .io_req_bits_addr            (io_lsq_req_bits_addr),
    .io_req_bits_data            (io_lsq_req_bits_data),
    .io_req_bits_mask            (io_lsq_req_bits_mask),
    .io_req_bits_id              (io_lsq_req_bits_id),
    .io_req_bits_atomic          (io_lsq_req_bits_atomic),
    .io_resp_ready               (_GEN_0 & io_lsq_resp_ready),
    .io_resp_valid               (_entries_1_io_resp_valid),
    .io_resp_bits_data           (_entries_1_io_resp_bits_data),
    .io_resp_bits_id             (_entries_1_io_resp_bits_id),
    .io_resp_bits_nderr          (_entries_1_io_resp_bits_nderr),
    .io_mem_acquire_ready
      (auto_client_out_a_ready & (idle ? ~_entries_0_io_mem_acquire_valid : state_1)),
    .io_mem_acquire_valid        (_entries_1_io_mem_acquire_valid),
    .io_mem_acquire_bits_opcode  (_entries_1_io_mem_acquire_bits_opcode),
    .io_mem_acquire_bits_size    (_entries_1_io_mem_acquire_bits_size),
    .io_mem_acquire_bits_source  (_entries_1_io_mem_acquire_bits_source),
    .io_mem_acquire_bits_address (_entries_1_io_mem_acquire_bits_address),
    .io_mem_acquire_bits_mask    (_entries_1_io_mem_acquire_bits_mask),
    .io_mem_acquire_bits_data    (_entries_1_io_mem_acquire_bits_data),
    .io_mem_grant_ready          (_entries_1_io_mem_grant_ready),
    .io_mem_grant_valid          (_GEN_0 & auto_client_out_d_valid),
    .io_mem_grant_bits_denied    (auto_client_out_d_bits_denied),
    .io_mem_grant_bits_data      (auto_client_out_d_bits_data),
    .io_invalid                  (_entries_1_io_invalid),
    .io_select
      (issPtr_value == 2'h1 & (_entries_1_io_atomic ? _entries_3_io_select_T_1 : ~fence)),
    .io_atomic                   (_entries_1_io_atomic)
  );
  MMIOEntry entries_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_hartId                   (io_hartId),
    .io_enableOutstanding        (io_enableOutstanding),
    .io_req_ready                (_entries_2_io_req_ready),
    .io_req_valid                (enqPtr_value == 2'h2 & io_lsq_req_valid),
    .io_req_bits_cmd             (io_lsq_req_bits_cmd),
    .io_req_bits_addr            (io_lsq_req_bits_addr),
    .io_req_bits_data            (io_lsq_req_bits_data),
    .io_req_bits_mask            (io_lsq_req_bits_mask),
    .io_req_bits_id              (io_lsq_req_bits_id),
    .io_req_bits_atomic          (io_lsq_req_bits_atomic),
    .io_resp_ready               (_GEN_1 & io_lsq_resp_ready),
    .io_resp_valid               (_entries_2_io_resp_valid),
    .io_resp_bits_data           (_entries_2_io_resp_bits_data),
    .io_resp_bits_id             (_entries_2_io_resp_bits_id),
    .io_resp_bits_nderr          (_entries_2_io_resp_bits_nderr),
    .io_mem_acquire_ready        (auto_client_out_a_ready & (idle ? ~_GEN_8 : state_2)),
    .io_mem_acquire_valid        (_entries_2_io_mem_acquire_valid),
    .io_mem_acquire_bits_opcode  (_entries_2_io_mem_acquire_bits_opcode),
    .io_mem_acquire_bits_size    (_entries_2_io_mem_acquire_bits_size),
    .io_mem_acquire_bits_source  (_entries_2_io_mem_acquire_bits_source),
    .io_mem_acquire_bits_address (_entries_2_io_mem_acquire_bits_address),
    .io_mem_acquire_bits_mask    (_entries_2_io_mem_acquire_bits_mask),
    .io_mem_acquire_bits_data    (_entries_2_io_mem_acquire_bits_data),
    .io_mem_grant_ready          (_entries_2_io_mem_grant_ready),
    .io_mem_grant_valid          (_GEN_1 & auto_client_out_d_valid),
    .io_mem_grant_bits_denied    (auto_client_out_d_bits_denied),
    .io_mem_grant_bits_data      (auto_client_out_d_bits_data),
    .io_invalid                  (_entries_2_io_invalid),
    .io_select
      (issPtr_value == 2'h2 & (_entries_2_io_atomic ? _entries_3_io_select_T_1 : ~fence)),
    .io_atomic                   (_entries_2_io_atomic)
  );
  MMIOEntry entries_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_hartId                   (io_hartId),
    .io_enableOutstanding        (io_enableOutstanding),
    .io_req_ready                (_entries_3_io_req_ready),
    .io_req_valid                ((&enqPtr_value) & io_lsq_req_valid),
    .io_req_bits_cmd             (io_lsq_req_bits_cmd),
    .io_req_bits_addr            (io_lsq_req_bits_addr),
    .io_req_bits_data            (io_lsq_req_bits_data),
    .io_req_bits_mask            (io_lsq_req_bits_mask),
    .io_req_bits_id              (io_lsq_req_bits_id),
    .io_req_bits_atomic          (io_lsq_req_bits_atomic),
    .io_resp_ready               ((&deqPtr_value) & io_lsq_resp_ready),
    .io_resp_valid               (_entries_3_io_resp_valid),
    .io_resp_bits_data           (_entries_3_io_resp_bits_data),
    .io_resp_bits_id             (_entries_3_io_resp_bits_id),
    .io_resp_bits_nderr          (_entries_3_io_resp_bits_nderr),
    .io_mem_acquire_ready        (auto_client_out_a_ready & (idle ? ~_GEN_9 : state_3)),
    .io_mem_acquire_valid        (_entries_3_io_mem_acquire_valid),
    .io_mem_acquire_bits_opcode  (_entries_3_io_mem_acquire_bits_opcode),
    .io_mem_acquire_bits_size    (_entries_3_io_mem_acquire_bits_size),
    .io_mem_acquire_bits_source  (_entries_3_io_mem_acquire_bits_source),
    .io_mem_acquire_bits_address (_entries_3_io_mem_acquire_bits_address),
    .io_mem_acquire_bits_mask    (_entries_3_io_mem_acquire_bits_mask),
    .io_mem_acquire_bits_data    (_entries_3_io_mem_acquire_bits_data),
    .io_mem_grant_ready          (_entries_3_io_mem_grant_ready),
    .io_mem_grant_valid          ((&deqPtr_value) & auto_client_out_d_valid),
    .io_mem_grant_bits_denied    (auto_client_out_d_bits_denied),
    .io_mem_grant_bits_data      (auto_client_out_d_bits_data),
    .io_invalid                  (_entries_3_io_invalid),
    .io_select
      ((&issPtr_value) & (_entries_3_io_atomic ? _entries_3_io_select_T_1 : ~fence)),
    .io_atomic                   (_entries_3_io_atomic)
  );
  assign auto_client_out_a_valid = clientNodeOut_a_valid;
  assign auto_client_out_a_bits_opcode =
    (muxState_0 ? _entries_0_io_mem_acquire_bits_opcode : 3'h0)
    | (muxState_1 ? _entries_1_io_mem_acquire_bits_opcode : 3'h0)
    | (muxState_2 ? _entries_2_io_mem_acquire_bits_opcode : 3'h0)
    | (muxState_3 ? _entries_3_io_mem_acquire_bits_opcode : 3'h0);
  assign auto_client_out_a_bits_size =
    (muxState_0 ? _entries_0_io_mem_acquire_bits_size : 3'h0)
    | (muxState_1 ? _entries_1_io_mem_acquire_bits_size : 3'h0)
    | (muxState_2 ? _entries_2_io_mem_acquire_bits_size : 3'h0)
    | (muxState_3 ? _entries_3_io_mem_acquire_bits_size : 3'h0);
  assign auto_client_out_a_bits_source =
    (muxState_0 ? _entries_0_io_mem_acquire_bits_source : 2'h0)
    | (muxState_1 ? _entries_1_io_mem_acquire_bits_source : 2'h0)
    | (muxState_2 ? _entries_2_io_mem_acquire_bits_source : 2'h0)
    | (muxState_3 ? _entries_3_io_mem_acquire_bits_source : 2'h0);
  assign auto_client_out_a_bits_address =
    (muxState_0 ? _entries_0_io_mem_acquire_bits_address : 36'h0)
    | (muxState_1 ? _entries_1_io_mem_acquire_bits_address : 36'h0)
    | (muxState_2 ? _entries_2_io_mem_acquire_bits_address : 36'h0)
    | (muxState_3 ? _entries_3_io_mem_acquire_bits_address : 36'h0);
  assign auto_client_out_a_bits_mask =
    (muxState_0 ? _entries_0_io_mem_acquire_bits_mask : 8'h0)
    | (muxState_1 ? _entries_1_io_mem_acquire_bits_mask : 8'h0)
    | (muxState_2 ? _entries_2_io_mem_acquire_bits_mask : 8'h0)
    | (muxState_3 ? _entries_3_io_mem_acquire_bits_mask : 8'h0);
  assign auto_client_out_a_bits_data =
    (muxState_0 ? _entries_0_io_mem_acquire_bits_data : 64'h0)
    | (muxState_1 ? _entries_1_io_mem_acquire_bits_data : 64'h0)
    | (muxState_2 ? _entries_2_io_mem_acquire_bits_data : 64'h0)
    | (muxState_3 ? _entries_3_io_mem_acquire_bits_data : 64'h0);
  assign auto_client_out_d_ready = clientNodeOut_d_ready;
  assign io_flush_empty =
    3'({1'h0, 2'({1'h0, _entries_0_io_invalid} + {1'h0, _entries_1_io_invalid})}
       + {1'h0,
          2'({1'h0, _entries_2_io_invalid} + {1'h0, _entries_3_io_invalid})}) == 3'h4;
  assign io_lsq_req_ready = req_ready;
  assign io_lsq_resp_valid = io_lsq_resp_valid_0;
  assign io_lsq_resp_bits_data = _GEN_6[deqPtr_value];
  assign io_lsq_resp_bits_id = {1'h0, _GEN_5[deqPtr_value]};
  assign io_lsq_resp_bits_nderr = _GEN_4[deqPtr_value];
endmodule

