// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NegedgeDataModule__16entry_16(
  input         clock,
  input  [3:0]  io_raddr_0,
  output [40:0] io_rdata_0,
  input         io_wen_0,
  input  [3:0]  io_waddr_0,
  input  [40:0] io_wdata_0
);

  reg [40:0] data_0;
  reg [40:0] data_1;
  reg [40:0] data_2;
  reg [40:0] data_3;
  reg [40:0] data_4;
  reg [40:0] data_5;
  reg [40:0] data_6;
  reg [40:0] data_7;
  reg [40:0] data_8;
  reg [40:0] data_9;
  reg [40:0] data_10;
  reg [40:0] data_11;
  reg [40:0] data_12;
  reg [40:0] data_13;
  reg [40:0] data_14;
  reg [40:0] data_15;
  always @(posedge clock) begin
    if (io_wen_0 & io_waddr_0 == 4'h0)
      data_0 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h1)
      data_1 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h2)
      data_2 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h3)
      data_3 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h4)
      data_4 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h5)
      data_5 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h6)
      data_6 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h7)
      data_7 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h8)
      data_8 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'h9)
      data_9 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'hA)
      data_10 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'hB)
      data_11 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'hC)
      data_12 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'hD)
      data_13 <= io_wdata_0;
    if (io_wen_0 & io_waddr_0 == 4'hE)
      data_14 <= io_wdata_0;
    if (io_wen_0 & (&io_waddr_0))
      data_15 <= io_wdata_0;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:20];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h15; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        data_0 = {_RANDOM[5'h0], _RANDOM[5'h1][8:0]};
        data_1 = {_RANDOM[5'h1][31:9], _RANDOM[5'h2][17:0]};
        data_2 = {_RANDOM[5'h2][31:18], _RANDOM[5'h3][26:0]};
        data_3 = {_RANDOM[5'h3][31:27], _RANDOM[5'h4], _RANDOM[5'h5][3:0]};
        data_4 = {_RANDOM[5'h5][31:4], _RANDOM[5'h6][12:0]};
        data_5 = {_RANDOM[5'h6][31:13], _RANDOM[5'h7][21:0]};
        data_6 = {_RANDOM[5'h7][31:22], _RANDOM[5'h8][30:0]};
        data_7 = {_RANDOM[5'h8][31], _RANDOM[5'h9], _RANDOM[5'hA][7:0]};
        data_8 = {_RANDOM[5'hA][31:8], _RANDOM[5'hB][16:0]};
        data_9 = {_RANDOM[5'hB][31:17], _RANDOM[5'hC][25:0]};
        data_10 = {_RANDOM[5'hC][31:26], _RANDOM[5'hD], _RANDOM[5'hE][2:0]};
        data_11 = {_RANDOM[5'hE][31:3], _RANDOM[5'hF][11:0]};
        data_12 = {_RANDOM[5'hF][31:12], _RANDOM[5'h10][20:0]};
        data_13 = {_RANDOM[5'h10][31:21], _RANDOM[5'h11][29:0]};
        data_14 = {_RANDOM[5'h11][31:30], _RANDOM[5'h12], _RANDOM[5'h13][6:0]};
        data_15 = {_RANDOM[5'h13][31:7], _RANDOM[5'h14][15:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rdata_0 =
    io_wen_0 & io_waddr_0 == io_raddr_0
      ? io_wdata_0
      : (io_raddr_0 == 4'h0 ? data_0 : 41'h0) | (io_raddr_0 == 4'h1 ? data_1 : 41'h0)
        | (io_raddr_0 == 4'h2 ? data_2 : 41'h0) | (io_raddr_0 == 4'h3 ? data_3 : 41'h0)
        | (io_raddr_0 == 4'h4 ? data_4 : 41'h0) | (io_raddr_0 == 4'h5 ? data_5 : 41'h0)
        | (io_raddr_0 == 4'h6 ? data_6 : 41'h0) | (io_raddr_0 == 4'h7 ? data_7 : 41'h0)
        | (io_raddr_0 == 4'h8 ? data_8 : 41'h0) | (io_raddr_0 == 4'h9 ? data_9 : 41'h0)
        | (io_raddr_0 == 4'hA ? data_10 : 41'h0) | (io_raddr_0 == 4'hB ? data_11 : 41'h0)
        | (io_raddr_0 == 4'hC ? data_12 : 41'h0) | (io_raddr_0 == 4'hD ? data_13 : 41'h0)
        | (io_raddr_0 == 4'hE ? data_14 : 41'h0) | ((&io_raddr_0) ? data_15 : 41'h0);
endmodule

