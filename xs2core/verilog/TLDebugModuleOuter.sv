// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLDebugModuleOuter(
  input         clock,
  input         reset,
  output        auto_dmi_in_a_ready,
  input         auto_dmi_in_a_valid,
  input  [2:0]  auto_dmi_in_a_bits_opcode,
  input  [6:0]  auto_dmi_in_a_bits_address,
  input  [31:0] auto_dmi_in_a_bits_data,
  input         auto_dmi_in_d_ready,
  output        auto_dmi_in_d_valid,
  output [31:0] auto_dmi_in_d_bits_data,
  output        auto_int_out_1_0,
  output        auto_int_out_0_0,
  output        io_ctrl_ndreset,
  output        io_ctrl_dmactive,
  input         io_ctrl_dmactiveAck,
  input         io_innerCtrl_ready,
  output        io_innerCtrl_valid,
  output        io_innerCtrl_bits_resumereq,
  output [9:0]  io_innerCtrl_bits_hartsel,
  output        io_innerCtrl_bits_ackhavereset,
  output        io_innerCtrl_bits_hasel,
  output        io_innerCtrl_bits_hamask_0,
  output        io_innerCtrl_bits_hamask_1,
  output        io_innerCtrl_bits_hrmask_0,
  output        io_innerCtrl_bits_hrmask_1,
  input         io_hgDebugInt_0,
  input         io_hgDebugInt_1
);

  wire             io_innerCtrl_bits_hasel_0;
  wire [9:0]       io_innerCtrl_bits_hartsel_0;
  wire             out_woready_13;
  wire             out_woready_9;
  wire             DMCONTROLWrData_setresethaltreq;
  wire             DMCONTROLWrData_clrresethaltreq;
  reg              DMCONTROLReg_haltreq;
  reg              DMCONTROLReg_hartreset;
  reg              DMCONTROLReg_hasel;
  reg  [9:0]       DMCONTROLReg_hartsello;
  reg              DMCONTROLReg_ndmreset;
  reg              DMCONTROLReg_dmactive;
  reg  [14:0]      HAWINDOWSELReg_hawindowsel;
  reg  [31:0]      HAMASKReg_maskdata;
  wire             _GEN = HAWINDOWSELReg_hawindowsel == 15'h0;
  wire             _GEN_0 = out_woready_13 & _GEN;
  wire             hamask_0 = _GEN_0 ? auto_dmi_in_a_bits_data[0] : HAMASKReg_maskdata[0];
  wire             hamask_1 = _GEN_0 ? auto_dmi_in_a_bits_data[1] : HAMASKReg_maskdata[1];
  reg              hrmaskReg_0;
  reg              hrmaskReg_1;
  wire             _GEN_1 = out_woready_9 & DMCONTROLWrData_clrresethaltreq;
  wire             _GEN_2 =
    io_innerCtrl_bits_hartsel_0 == 10'h0 | io_innerCtrl_bits_hasel_0 & hamask_0;
  wire             _GEN_3 = out_woready_9 & DMCONTROLWrData_setresethaltreq;
  wire             hrmaskNxt_0 =
    ~(~DMCONTROLReg_dmactive | _GEN_1 & _GEN_2) & (_GEN_3 & _GEN_2 | hrmaskReg_0);
  wire             _GEN_4 =
    io_innerCtrl_bits_hartsel_0 == 10'h1 | io_innerCtrl_bits_hasel_0 & hamask_1;
  wire             hrmaskNxt_1 =
    ~(~DMCONTROLReg_dmactive | _GEN_1 & _GEN_4) & (_GEN_3 & _GEN_4 | hrmaskReg_1);
  assign DMCONTROLWrData_clrresethaltreq = auto_dmi_in_a_bits_data[2];
  assign DMCONTROLWrData_setresethaltreq = auto_dmi_in_a_bits_data[3];
  wire             _out_wofireMux_T_2 =
    auto_dmi_in_a_valid & auto_dmi_in_d_ready & auto_dmi_in_a_bits_opcode != 3'h4;
  assign out_woready_9 =
    _out_wofireMux_T_2 & auto_dmi_in_a_bits_address[4:3] == 2'h0
    & ~(auto_dmi_in_a_bits_address[2]);
  assign out_woready_13 =
    _out_wofireMux_T_2 & auto_dmi_in_a_bits_address[4:3] == 2'h2
    & auto_dmi_in_a_bits_address[2];
  wire [3:0]       _GEN_5 =
    {{1'h1},
     {auto_dmi_in_a_bits_address[2]},
     {~(auto_dmi_in_a_bits_address[2])},
     {~(auto_dmi_in_a_bits_address[2])}};
  wire [3:0][31:0] _GEN_6 =
    {{32'h0},
     {{30'h0, _GEN ? HAMASKReg_maskdata[1:0] : 2'h0}},
     {32'h0},
     {{DMCONTROLReg_haltreq,
       1'h0,
       DMCONTROLReg_hartreset,
       2'h0,
       DMCONTROLReg_hasel,
       4'h0,
       DMCONTROLReg_hartsello[5:0],
       14'h0,
       DMCONTROLReg_ndmreset,
       DMCONTROLReg_dmactive & io_ctrl_dmactiveAck}}};
  reg              debugIntRegs_0;
  reg              debugIntRegs_1;
  reg              innerCtrlValidReg;
  reg              innerCtrlResumeReqReg;
  reg              innerCtrlAckHaveResetReg;
  wire             io_innerCtrl_valid_0 =
    out_woready_9 | out_woready_13 | innerCtrlValidReg;
  assign io_innerCtrl_bits_hartsel_0 =
    out_woready_9 ? {4'h0, auto_dmi_in_a_bits_data[21:16]} : DMCONTROLReg_hartsello;
  wire             io_innerCtrl_bits_resumereq_0 =
    out_woready_9 & auto_dmi_in_a_bits_data[30] | innerCtrlResumeReqReg;
  wire             io_innerCtrl_bits_ackhavereset_0 =
    out_woready_9 & auto_dmi_in_a_bits_data[28] | innerCtrlAckHaveResetReg;
  assign io_innerCtrl_bits_hasel_0 =
    out_woready_9 ? auto_dmi_in_a_bits_data[26] : DMCONTROLReg_hasel;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      DMCONTROLReg_haltreq <= 1'h0;
      DMCONTROLReg_hartreset <= 1'h0;
      DMCONTROLReg_hasel <= 1'h0;
      DMCONTROLReg_hartsello <= 10'h0;
      DMCONTROLReg_ndmreset <= 1'h0;
      DMCONTROLReg_dmactive <= 1'h0;
      HAWINDOWSELReg_hawindowsel <= 15'h0;
      HAMASKReg_maskdata <= 32'h0;
      hrmaskReg_0 <= 1'h0;
      hrmaskReg_1 <= 1'h0;
      debugIntRegs_0 <= 1'h0;
      debugIntRegs_1 <= 1'h0;
      innerCtrlValidReg <= 1'h0;
      innerCtrlResumeReqReg <= 1'h0;
      innerCtrlAckHaveResetReg <= 1'h0;
    end
    else begin
      DMCONTROLReg_haltreq <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[31] : DMCONTROLReg_haltreq);
      DMCONTROLReg_hartreset <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[29] : DMCONTROLReg_hartreset);
      DMCONTROLReg_hasel <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[26] : DMCONTROLReg_hasel);
      if (DMCONTROLReg_dmactive) begin
        if (out_woready_9)
          DMCONTROLReg_hartsello <= {4'h0, auto_dmi_in_a_bits_data[21:16]};
      end
      else
        DMCONTROLReg_hartsello <= 10'h0;
      DMCONTROLReg_ndmreset <=
        DMCONTROLReg_dmactive
        & (out_woready_9 ? auto_dmi_in_a_bits_data[1] : DMCONTROLReg_ndmreset);
      if (out_woready_9)
        DMCONTROLReg_dmactive <= auto_dmi_in_a_bits_data[0];
      if (DMCONTROLReg_dmactive) begin
        if (_GEN_0)
          HAMASKReg_maskdata <= {30'h0, auto_dmi_in_a_bits_data[1:0]};
      end
      else begin
        HAWINDOWSELReg_hawindowsel <= 15'h0;
        HAMASKReg_maskdata <= 32'h0;
      end
      hrmaskReg_0 <= hrmaskNxt_0;
      hrmaskReg_1 <= hrmaskNxt_1;
      debugIntRegs_0 <=
        DMCONTROLReg_dmactive
        & (out_woready_9
           & (auto_dmi_in_a_bits_data[21:16] == 6'h0 | auto_dmi_in_a_bits_data[26]
              & hamask_0)
             ? auto_dmi_in_a_bits_data[31]
             : debugIntRegs_0);
      debugIntRegs_1 <=
        DMCONTROLReg_dmactive
        & (out_woready_9
           & (auto_dmi_in_a_bits_data[21:16] == 6'h1 | auto_dmi_in_a_bits_data[26]
              & hamask_1)
             ? auto_dmi_in_a_bits_data[31]
             : debugIntRegs_1);
      innerCtrlValidReg <= io_innerCtrl_valid_0 & ~io_innerCtrl_ready;
      innerCtrlResumeReqReg <= io_innerCtrl_bits_resumereq_0 & ~io_innerCtrl_ready;
      innerCtrlAckHaveResetReg <= io_innerCtrl_bits_ackhavereset_0 & ~io_innerCtrl_ready;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        DMCONTROLReg_haltreq = _RANDOM[2'h0][0];
        DMCONTROLReg_hartreset = _RANDOM[2'h0][2];
        DMCONTROLReg_hasel = _RANDOM[2'h0][5];
        DMCONTROLReg_hartsello = _RANDOM[2'h0][15:6];
        DMCONTROLReg_ndmreset = _RANDOM[2'h0][30];
        DMCONTROLReg_dmactive = _RANDOM[2'h0][31];
        HAWINDOWSELReg_hawindowsel = _RANDOM[2'h1][31:17];
        HAMASKReg_maskdata = _RANDOM[2'h2];
        hrmaskReg_0 = _RANDOM[2'h3][0];
        hrmaskReg_1 = _RANDOM[2'h3][1];
        debugIntRegs_0 = _RANDOM[2'h3][2];
        debugIntRegs_1 = _RANDOM[2'h3][3];
        innerCtrlValidReg = _RANDOM[2'h3][4];
        innerCtrlResumeReqReg = _RANDOM[2'h3][5];
        innerCtrlAckHaveResetReg = _RANDOM[2'h3][6];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        DMCONTROLReg_haltreq = 1'h0;
        DMCONTROLReg_hartreset = 1'h0;
        DMCONTROLReg_hasel = 1'h0;
        DMCONTROLReg_hartsello = 10'h0;
        DMCONTROLReg_ndmreset = 1'h0;
        DMCONTROLReg_dmactive = 1'h0;
        HAWINDOWSELReg_hawindowsel = 15'h0;
        HAMASKReg_maskdata = 32'h0;
        hrmaskReg_0 = 1'h0;
        hrmaskReg_1 = 1'h0;
        debugIntRegs_0 = 1'h0;
        debugIntRegs_1 = 1'h0;
        innerCtrlValidReg = 1'h0;
        innerCtrlResumeReqReg = 1'h0;
        innerCtrlAckHaveResetReg = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_dmi_in_a_ready = auto_dmi_in_d_ready;
  assign auto_dmi_in_d_valid = auto_dmi_in_a_valid;
  assign auto_dmi_in_d_bits_data =
    _GEN_5[auto_dmi_in_a_bits_address[4:3]]
      ? _GEN_6[auto_dmi_in_a_bits_address[4:3]]
      : 32'h0;
  assign auto_int_out_1_0 = debugIntRegs_1 | io_hgDebugInt_1;
  assign auto_int_out_0_0 = debugIntRegs_0 | io_hgDebugInt_0;
  assign io_ctrl_ndreset = DMCONTROLReg_ndmreset;
  assign io_ctrl_dmactive = DMCONTROLReg_dmactive;
  assign io_innerCtrl_valid = io_innerCtrl_valid_0;
  assign io_innerCtrl_bits_resumereq = io_innerCtrl_bits_resumereq_0;
  assign io_innerCtrl_bits_hartsel = io_innerCtrl_bits_hartsel_0;
  assign io_innerCtrl_bits_ackhavereset = io_innerCtrl_bits_ackhavereset_0;
  assign io_innerCtrl_bits_hasel = io_innerCtrl_bits_hasel_0;
  assign io_innerCtrl_bits_hamask_0 = hamask_0;
  assign io_innerCtrl_bits_hamask_1 = hamask_1;
  assign io_innerCtrl_bits_hrmask_0 = hrmaskNxt_0;
  assign io_innerCtrl_bits_hrmask_1 = hrmaskNxt_1;
endmodule

