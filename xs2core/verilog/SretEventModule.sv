// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SretEventModule(
  input         valid,
  input  [1:0]  in_privState_PRVM,
  input         in_privState_V,
  input         in_sstatus_SPIE,
  input         in_sstatus_SPP,
  input         in_hstatus_SPV,
  input         in_vsstatus_SPIE,
  input         in_vsstatus_SPP,
  input  [62:0] in_sepc_epc,
  input  [62:0] in_vsepc_epc,
  output        out_privState_valid,
  output [1:0]  out_privState_bits_PRVM,
  output        out_privState_bits_V,
  output        out_mstatus_valid,
  output        out_mstatus_bits_SIE,
  output        out_mstatus_bits_MIE,
  output        out_mstatus_bits_SPIE,
  output        out_mstatus_bits_UBE,
  output        out_mstatus_bits_MPIE,
  output        out_mstatus_bits_SPP,
  output [1:0]  out_mstatus_bits_VS,
  output [1:0]  out_mstatus_bits_MPP,
  output [1:0]  out_mstatus_bits_FS,
  output [1:0]  out_mstatus_bits_XS,
  output        out_mstatus_bits_MPRV,
  output        out_mstatus_bits_SUM,
  output        out_mstatus_bits_MXR,
  output        out_mstatus_bits_TVM,
  output        out_mstatus_bits_TW,
  output        out_mstatus_bits_TSR,
  output [1:0]  out_mstatus_bits_UXL,
  output [1:0]  out_mstatus_bits_SXL,
  output        out_mstatus_bits_SBE,
  output        out_mstatus_bits_MBE,
  output        out_mstatus_bits_GVA,
  output        out_mstatus_bits_MPV,
  output        out_mstatus_bits_SD,
  output        out_hstatus_valid,
  output        out_hstatus_bits_VSBE,
  output        out_hstatus_bits_GVA,
  output        out_hstatus_bits_SPV,
  output        out_hstatus_bits_SPVP,
  output        out_hstatus_bits_HU,
  output [5:0]  out_hstatus_bits_VGEIN,
  output        out_hstatus_bits_VTVM,
  output        out_hstatus_bits_VTW,
  output        out_hstatus_bits_VTSR,
  output [1:0]  out_hstatus_bits_VSXL,
  output        out_vsstatus_valid,
  output        out_vsstatus_bits_SIE,
  output        out_vsstatus_bits_SPIE,
  output        out_vsstatus_bits_UBE,
  output        out_vsstatus_bits_SPP,
  output [1:0]  out_vsstatus_bits_VS,
  output [1:0]  out_vsstatus_bits_FS,
  output [1:0]  out_vsstatus_bits_XS,
  output        out_vsstatus_bits_SUM,
  output        out_vsstatus_bits_MXR,
  output [1:0]  out_vsstatus_bits_UXL,
  output        out_vsstatus_bits_SD,
  output        out_targetPc_valid,
  output [40:0] out_targetPc_bits
);

  wire sretInHSorM_v_PrvmIsM = &in_privState_PRVM;
  wire sretInHSorM_isModeM = sretInHSorM_v_PrvmIsM;
  wire PrvmIsS = in_privState_PRVM == 2'h1;
  wire sretInHSorM_isModeHS = ~in_privState_V & PrvmIsS;
  wire sretInHSorM = sretInHSorM_isModeM | sretInHSorM_isModeHS;
  wire isModeVS = in_privState_V & PrvmIsS;
  wire _out_mstatus_valid_T = valid & sretInHSorM;
  assign out_privState_valid = valid;
  assign out_privState_bits_PRVM =
    {1'h0, sretInHSorM & in_sstatus_SPP | isModeVS & in_vsstatus_SPP};
  assign out_privState_bits_V = sretInHSorM & in_hstatus_SPV | isModeVS & in_privState_V;
  assign out_mstatus_valid = _out_mstatus_valid_T;
  assign out_mstatus_bits_SIE = in_sstatus_SPIE;
  assign out_mstatus_bits_MIE = 1'h0;
  assign out_mstatus_bits_SPIE = 1'h1;
  assign out_mstatus_bits_UBE = 1'h0;
  assign out_mstatus_bits_MPIE = 1'h0;
  assign out_mstatus_bits_SPP = 1'h0;
  assign out_mstatus_bits_VS = 2'h0;
  assign out_mstatus_bits_MPP = 2'h0;
  assign out_mstatus_bits_FS = 2'h0;
  assign out_mstatus_bits_XS = 2'h0;
  assign out_mstatus_bits_MPRV = 1'h0;
  assign out_mstatus_bits_SUM = 1'h0;
  assign out_mstatus_bits_MXR = 1'h0;
  assign out_mstatus_bits_TVM = 1'h0;
  assign out_mstatus_bits_TW = 1'h0;
  assign out_mstatus_bits_TSR = 1'h0;
  assign out_mstatus_bits_UXL = 2'h0;
  assign out_mstatus_bits_SXL = 2'h0;
  assign out_mstatus_bits_SBE = 1'h0;
  assign out_mstatus_bits_MBE = 1'h0;
  assign out_mstatus_bits_GVA = 1'h0;
  assign out_mstatus_bits_MPV = 1'h0;
  assign out_mstatus_bits_SD = 1'h0;
  assign out_hstatus_valid = _out_mstatus_valid_T;
  assign out_hstatus_bits_VSBE = 1'h0;
  assign out_hstatus_bits_GVA = 1'h0;
  assign out_hstatus_bits_SPV = 1'h0;
  assign out_hstatus_bits_SPVP = 1'h0;
  assign out_hstatus_bits_HU = 1'h0;
  assign out_hstatus_bits_VGEIN = 6'h0;
  assign out_hstatus_bits_VTVM = 1'h0;
  assign out_hstatus_bits_VTW = 1'h0;
  assign out_hstatus_bits_VTSR = 1'h0;
  assign out_hstatus_bits_VSXL = 2'h0;
  assign out_vsstatus_valid = valid & isModeVS;
  assign out_vsstatus_bits_SIE = in_vsstatus_SPIE;
  assign out_vsstatus_bits_SPIE = 1'h1;
  assign out_vsstatus_bits_UBE = 1'h0;
  assign out_vsstatus_bits_SPP = 1'h0;
  assign out_vsstatus_bits_VS = 2'h0;
  assign out_vsstatus_bits_FS = 2'h0;
  assign out_vsstatus_bits_XS = 2'h0;
  assign out_vsstatus_bits_SUM = 1'h0;
  assign out_vsstatus_bits_MXR = 1'h0;
  assign out_vsstatus_bits_UXL = 2'h0;
  assign out_vsstatus_bits_SD = 1'h0;
  assign out_targetPc_valid = valid;
  assign out_targetPc_bits =
    {(sretInHSorM ? in_sepc_epc[39:0] : 40'h0) | (isModeVS ? in_vsepc_epc[39:0] : 40'h0),
     1'h0};
endmodule

