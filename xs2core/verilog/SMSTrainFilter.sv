// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SMSTrainFilter(
  input         clock,
  input         reset,
  input         io_ld_in_0_valid,
  input  [40:0] io_ld_in_0_bits_uop_pc,
  input         io_ld_in_0_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_0_bits_uop_robIdx_value,
  input  [40:0] io_ld_in_0_bits_vaddr,
  input  [35:0] io_ld_in_0_bits_paddr,
  input         io_ld_in_1_valid,
  input  [40:0] io_ld_in_1_bits_uop_pc,
  input         io_ld_in_1_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_1_bits_uop_robIdx_value,
  input  [40:0] io_ld_in_1_bits_vaddr,
  input  [35:0] io_ld_in_1_bits_paddr,
  input         io_ld_in_2_valid,
  input  [40:0] io_ld_in_2_bits_uop_pc,
  input         io_ld_in_2_bits_uop_robIdx_flag,
  input  [7:0]  io_ld_in_2_bits_uop_robIdx_value,
  input  [40:0] io_ld_in_2_bits_vaddr,
  input  [35:0] io_ld_in_2_bits_paddr,
  output        io_train_req_valid,
  output [40:0] io_train_req_bits_vaddr,
  output [35:0] io_train_req_bits_paddr,
  output [40:0] io_train_req_bits_pc
);

  reg  [40:0]      entries_0_vaddr;
  reg  [35:0]      entries_0_paddr;
  reg  [40:0]      entries_0_pc;
  reg  [40:0]      entries_1_vaddr;
  reg  [35:0]      entries_1_paddr;
  reg  [40:0]      entries_1_pc;
  reg  [40:0]      entries_2_vaddr;
  reg  [35:0]      entries_2_paddr;
  reg  [40:0]      entries_2_pc;
  reg  [40:0]      entries_3_vaddr;
  reg  [35:0]      entries_3_paddr;
  reg  [40:0]      entries_3_pc;
  reg  [40:0]      entries_4_vaddr;
  reg  [35:0]      entries_4_paddr;
  reg  [40:0]      entries_4_pc;
  reg  [40:0]      entries_5_vaddr;
  reg  [35:0]      entries_5_paddr;
  reg  [40:0]      entries_5_pc;
  reg  [40:0]      entries_6_vaddr;
  reg  [35:0]      entries_6_paddr;
  reg  [40:0]      entries_6_pc;
  reg  [40:0]      entries_7_vaddr;
  reg  [35:0]      entries_7_paddr;
  reg  [40:0]      entries_7_pc;
  reg              valids_0;
  reg              valids_1;
  reg              valids_2;
  reg              valids_3;
  reg              valids_4;
  reg              valids_5;
  reg              valids_6;
  reg              valids_7;
  reg              enqPtrExt_0_flag;
  reg  [2:0]       enqPtrExt_0_value;
  reg              enqPtrExt_1_flag;
  reg  [2:0]       enqPtrExt_1_value;
  reg              enqPtrExt_2_flag;
  reg  [2:0]       enqPtrExt_2_value;
  reg              enqPtrExt_3_flag;
  reg  [2:0]       enqPtrExt_3_value;
  reg              enqPtrExt_4_flag;
  reg  [2:0]       enqPtrExt_4_value;
  reg              deqPtrExt_flag;
  reg  [2:0]       deqPtrExt_value;
  reg              ld_reorder_res_0_1_0_valid;
  reg  [40:0]      ld_reorder_res_0_1_0_bits_uop_pc;
  reg              ld_reorder_res_0_1_0_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_0_1_0_bits_uop_robIdx_value;
  reg  [40:0]      ld_reorder_res_0_1_0_bits_vaddr;
  reg  [35:0]      ld_reorder_res_0_1_0_bits_paddr;
  reg              ld_reorder_res_0_1_1_valid;
  reg  [40:0]      ld_reorder_res_0_1_1_bits_uop_pc;
  reg              ld_reorder_res_0_1_1_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_0_1_1_bits_uop_robIdx_value;
  reg  [40:0]      ld_reorder_res_0_1_1_bits_vaddr;
  reg  [35:0]      ld_reorder_res_0_1_1_bits_paddr;
  reg              ld_reorder_res_0_1_2_valid;
  reg  [40:0]      ld_reorder_res_0_1_2_bits_uop_pc;
  reg              ld_reorder_res_0_1_2_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_0_1_2_bits_uop_robIdx_value;
  reg  [40:0]      ld_reorder_res_0_1_2_bits_vaddr;
  reg  [35:0]      ld_reorder_res_0_1_2_bits_paddr;
  reg              ld_reorder_res_1_2_0_valid;
  reg  [40:0]      ld_reorder_res_1_2_0_bits_uop_pc;
  reg              ld_reorder_res_1_2_0_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_1_2_0_bits_uop_robIdx_value;
  reg  [40:0]      ld_reorder_res_1_2_0_bits_vaddr;
  reg  [35:0]      ld_reorder_res_1_2_0_bits_paddr;
  reg              ld_reorder_res_1_2_1_valid;
  reg  [40:0]      ld_reorder_res_1_2_1_bits_uop_pc;
  reg              ld_reorder_res_1_2_1_bits_uop_robIdx_flag;
  reg  [7:0]       ld_reorder_res_1_2_1_bits_uop_robIdx_value;
  reg  [40:0]      ld_reorder_res_1_2_1_bits_vaddr;
  reg  [35:0]      ld_reorder_res_1_2_1_bits_paddr;
  reg              ld_reorder_res_1_2_2_valid;
  reg  [40:0]      ld_reorder_res_1_2_2_bits_uop_pc;
  reg  [40:0]      ld_reorder_res_1_2_2_bits_vaddr;
  reg  [35:0]      ld_reorder_res_1_2_2_bits_paddr;
  reg              ld_reorder_0_valid;
  reg  [40:0]      ld_reorder_0_bits_uop_pc;
  reg  [40:0]      ld_reorder_0_bits_vaddr;
  reg  [35:0]      ld_reorder_0_bits_paddr;
  reg              ld_reorder_1_valid;
  reg  [40:0]      ld_reorder_1_bits_uop_pc;
  reg  [40:0]      ld_reorder_1_bits_vaddr;
  reg  [35:0]      ld_reorder_1_bits_paddr;
  reg              ld_reorder_2_valid;
  reg  [40:0]      ld_reorder_2_bits_uop_pc;
  reg  [40:0]      ld_reorder_2_bits_vaddr;
  reg  [35:0]      ld_reorder_2_bits_paddr;
  wire             _GEN = deqPtrExt_value == 3'h0;
  wire [7:0]       _GEN_0 =
    {{valids_7},
     {valids_6},
     {valids_5},
     {valids_4},
     {valids_3},
     {valids_2},
     {valids_1},
     {_GEN & valids_0}};
  wire             io_train_req_valid_0 = _GEN_0[deqPtrExt_value];
  wire [7:0][40:0] _GEN_1 =
    {{entries_7_vaddr},
     {entries_6_vaddr},
     {entries_5_vaddr},
     {entries_4_vaddr},
     {entries_3_vaddr},
     {entries_2_vaddr},
     {entries_1_vaddr},
     {entries_0_vaddr}};
  wire [7:0][35:0] _GEN_2 =
    {{entries_7_paddr},
     {entries_6_paddr},
     {entries_5_paddr},
     {entries_4_paddr},
     {entries_3_paddr},
     {entries_2_paddr},
     {entries_1_paddr},
     {entries_0_paddr}};
  wire [7:0][40:0] _GEN_3 =
    {{entries_7_pc},
     {entries_6_pc},
     {entries_5_pc},
     {entries_4_pc},
     {entries_3_pc},
     {entries_2_pc},
     {entries_1_pc},
     {entries_0_pc}};
  wire [3:0]       _deqPtrExt_new_ptr_T_1 = 4'({deqPtrExt_flag, deqPtrExt_value} + 4'h1);
  wire             needAlloc_0 =
    ld_reorder_0_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_6
         & {entries_6_vaddr[20:16] ^ entries_6_vaddr[25:21] ^ entries_6_vaddr[30:26],
            entries_6_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]},
       valids_7
         & {entries_7_vaddr[20:16] ^ entries_7_vaddr[25:21] ^ entries_7_vaddr[30:26],
            entries_7_vaddr[15:6]} == {ld_reorder_0_bits_vaddr[20:16]
                                         ^ ld_reorder_0_bits_vaddr[25:21]
                                         ^ ld_reorder_0_bits_vaddr[30:26],
                                       ld_reorder_0_bits_vaddr[15:6]}} == 8'h0;
  wire             canAlloc_0 =
    needAlloc_0
    & (enqPtrExt_0_flag ^ deqPtrExt_flag ^ enqPtrExt_0_value >= deqPtrExt_value);
  wire             _GEN_4 = canAlloc_0 & enqPtrExt_0_value == 3'h0;
  wire             _GEN_5 = canAlloc_0 & enqPtrExt_0_value == 3'h1;
  wire             _GEN_6 = canAlloc_0 & enqPtrExt_0_value == 3'h2;
  wire             _GEN_7 = canAlloc_0 & enqPtrExt_0_value == 3'h3;
  wire             _GEN_8 = canAlloc_0 & enqPtrExt_0_value == 3'h4;
  wire             _GEN_9 = canAlloc_0 & enqPtrExt_0_value == 3'h5;
  wire             _GEN_10 = canAlloc_0 & enqPtrExt_0_value == 3'h6;
  wire             _GEN_11 = canAlloc_0 & (&enqPtrExt_0_value);
  wire             needAlloc_1 =
    ld_reorder_1_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_6
         & {entries_6_vaddr[20:16] ^ entries_6_vaddr[25:21] ^ entries_6_vaddr[30:26],
            entries_6_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]},
       valids_7
         & {entries_7_vaddr[20:16] ^ entries_7_vaddr[25:21] ^ entries_7_vaddr[30:26],
            entries_7_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                         ^ ld_reorder_1_bits_vaddr[25:21]
                                         ^ ld_reorder_1_bits_vaddr[30:26],
                                       ld_reorder_1_bits_vaddr[15:6]}} == 8'h0
    & ~(ld_reorder_0_valid
        & {ld_reorder_0_bits_vaddr[20:16] ^ ld_reorder_0_bits_vaddr[25:21]
             ^ ld_reorder_0_bits_vaddr[30:26],
           ld_reorder_0_bits_vaddr[15:6]} == {ld_reorder_1_bits_vaddr[20:16]
                                                ^ ld_reorder_1_bits_vaddr[25:21]
                                                ^ ld_reorder_1_bits_vaddr[30:26],
                                              ld_reorder_1_bits_vaddr[15:6]});
  wire [2:0]       _GEN_12 = {2'h0, needAlloc_0};
  wire [7:0]       _GEN_13 =
    {{enqPtrExt_0_flag},
     {enqPtrExt_0_flag},
     {enqPtrExt_0_flag},
     {enqPtrExt_4_flag},
     {enqPtrExt_3_flag},
     {enqPtrExt_2_flag},
     {enqPtrExt_1_flag},
     {enqPtrExt_0_flag}};
  wire [7:0][2:0]  _GEN_14 =
    {{enqPtrExt_0_value},
     {enqPtrExt_0_value},
     {enqPtrExt_0_value},
     {enqPtrExt_4_value},
     {enqPtrExt_3_value},
     {enqPtrExt_2_value},
     {enqPtrExt_1_value},
     {enqPtrExt_0_value}};
  wire             canAlloc_1 =
    needAlloc_1
    & (_GEN_13[_GEN_12] ^ deqPtrExt_flag ^ _GEN_14[_GEN_12] >= deqPtrExt_value);
  wire             _GEN_15 = _GEN_14[_GEN_12] == 3'h0;
  wire             _GEN_16 = _GEN_14[_GEN_12] == 3'h1;
  wire             _GEN_17 = _GEN_14[_GEN_12] == 3'h2;
  wire             _GEN_18 = _GEN_14[_GEN_12] == 3'h3;
  wire             _GEN_19 = _GEN_14[_GEN_12] == 3'h4;
  wire             _GEN_20 = _GEN_14[_GEN_12] == 3'h5;
  wire             _GEN_21 = _GEN_14[_GEN_12] == 3'h6;
  wire [2:0]       _GEN_22 = {1'h0, 2'({1'h0, needAlloc_0} + {1'h0, needAlloc_1})};
  wire             canAlloc_2 =
    ld_reorder_2_valid
    & {valids_0
         & {entries_0_vaddr[20:16] ^ entries_0_vaddr[25:21] ^ entries_0_vaddr[30:26],
            entries_0_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_1
         & {entries_1_vaddr[20:16] ^ entries_1_vaddr[25:21] ^ entries_1_vaddr[30:26],
            entries_1_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_2
         & {entries_2_vaddr[20:16] ^ entries_2_vaddr[25:21] ^ entries_2_vaddr[30:26],
            entries_2_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_3
         & {entries_3_vaddr[20:16] ^ entries_3_vaddr[25:21] ^ entries_3_vaddr[30:26],
            entries_3_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_4
         & {entries_4_vaddr[20:16] ^ entries_4_vaddr[25:21] ^ entries_4_vaddr[30:26],
            entries_4_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_5
         & {entries_5_vaddr[20:16] ^ entries_5_vaddr[25:21] ^ entries_5_vaddr[30:26],
            entries_5_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_6
         & {entries_6_vaddr[20:16] ^ entries_6_vaddr[25:21] ^ entries_6_vaddr[30:26],
            entries_6_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]},
       valids_7
         & {entries_7_vaddr[20:16] ^ entries_7_vaddr[25:21] ^ entries_7_vaddr[30:26],
            entries_7_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                         ^ ld_reorder_2_bits_vaddr[25:21]
                                         ^ ld_reorder_2_bits_vaddr[30:26],
                                       ld_reorder_2_bits_vaddr[15:6]}} == 8'h0
    & {ld_reorder_0_valid
         & {ld_reorder_0_bits_vaddr[20:16] ^ ld_reorder_0_bits_vaddr[25:21]
              ^ ld_reorder_0_bits_vaddr[30:26],
            ld_reorder_0_bits_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                                 ^ ld_reorder_2_bits_vaddr[25:21]
                                                 ^ ld_reorder_2_bits_vaddr[30:26],
                                               ld_reorder_2_bits_vaddr[15:6]},
       ld_reorder_1_valid
         & {ld_reorder_1_bits_vaddr[20:16] ^ ld_reorder_1_bits_vaddr[25:21]
              ^ ld_reorder_1_bits_vaddr[30:26],
            ld_reorder_1_bits_vaddr[15:6]} == {ld_reorder_2_bits_vaddr[20:16]
                                                 ^ ld_reorder_2_bits_vaddr[25:21]
                                                 ^ ld_reorder_2_bits_vaddr[30:26],
                                               ld_reorder_2_bits_vaddr[15:6]}} == 2'h0
    & (_GEN_13[_GEN_22] ^ deqPtrExt_flag ^ _GEN_14[_GEN_22] >= deqPtrExt_value);
  wire             _GEN_23 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h0;
  wire             _GEN_24 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h1;
  wire             _GEN_25 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h2;
  wire             _GEN_26 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h3;
  wire             _GEN_27 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h4;
  wire             _GEN_28 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h5;
  wire             _GEN_29 = canAlloc_2 & _GEN_14[_GEN_22] == 3'h6;
  wire             _GEN_30 = canAlloc_2 & (&_GEN_14[_GEN_22]);
  wire [3:0]       _GEN_31 =
    {1'h0, 3'({1'h0, 2'({1'h0, canAlloc_0} + {1'h0, canAlloc_1})} + {2'h0, canAlloc_2})};
  wire [3:0]       _enqPtrExt_0_new_ptr_T_1 =
    4'({enqPtrExt_0_flag, enqPtrExt_0_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_1_new_ptr_T_1 =
    4'({enqPtrExt_1_flag, enqPtrExt_1_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_2_new_ptr_T_1 =
    4'({enqPtrExt_2_flag, enqPtrExt_2_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_3_new_ptr_T_1 =
    4'({enqPtrExt_3_flag, enqPtrExt_3_value} + _GEN_31);
  wire [3:0]       _enqPtrExt_4_new_ptr_T_1 =
    4'({enqPtrExt_4_flag, enqPtrExt_4_value} + _GEN_31);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      entries_0_vaddr <= 41'h0;
      entries_0_paddr <= 36'h0;
      entries_0_pc <= 41'h0;
      entries_1_vaddr <= 41'h0;
      entries_1_paddr <= 36'h0;
      entries_1_pc <= 41'h0;
      entries_2_vaddr <= 41'h0;
      entries_2_paddr <= 36'h0;
      entries_2_pc <= 41'h0;
      entries_3_vaddr <= 41'h0;
      entries_3_paddr <= 36'h0;
      entries_3_pc <= 41'h0;
      entries_4_vaddr <= 41'h0;
      entries_4_paddr <= 36'h0;
      entries_4_pc <= 41'h0;
      entries_5_vaddr <= 41'h0;
      entries_5_paddr <= 36'h0;
      entries_5_pc <= 41'h0;
      entries_6_vaddr <= 41'h0;
      entries_6_paddr <= 36'h0;
      entries_6_pc <= 41'h0;
      entries_7_vaddr <= 41'h0;
      entries_7_paddr <= 36'h0;
      entries_7_pc <= 41'h0;
      valids_0 <= 1'h0;
      valids_1 <= 1'h0;
      valids_2 <= 1'h0;
      valids_3 <= 1'h0;
      valids_4 <= 1'h0;
      valids_5 <= 1'h0;
      valids_6 <= 1'h0;
      valids_7 <= 1'h0;
      enqPtrExt_0_flag <= 1'h0;
      enqPtrExt_0_value <= 3'h0;
      enqPtrExt_1_flag <= 1'h0;
      enqPtrExt_1_value <= 3'h1;
      enqPtrExt_2_flag <= 1'h0;
      enqPtrExt_2_value <= 3'h2;
      enqPtrExt_3_flag <= 1'h0;
      enqPtrExt_3_value <= 3'h3;
      enqPtrExt_4_flag <= 1'h0;
      enqPtrExt_4_value <= 3'h4;
      deqPtrExt_flag <= 1'h0;
      deqPtrExt_value <= 3'h0;
    end
    else begin
      if (_GEN_23) begin
        entries_0_vaddr <= ld_reorder_2_bits_vaddr;
        entries_0_paddr <= ld_reorder_2_bits_paddr;
        entries_0_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_15) begin
        entries_0_vaddr <= ld_reorder_1_bits_vaddr;
        entries_0_paddr <= ld_reorder_1_bits_paddr;
        entries_0_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_4) begin
        entries_0_vaddr <= ld_reorder_0_bits_vaddr;
        entries_0_paddr <= ld_reorder_0_bits_paddr;
        entries_0_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_24) begin
        entries_1_vaddr <= ld_reorder_2_bits_vaddr;
        entries_1_paddr <= ld_reorder_2_bits_paddr;
        entries_1_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_16) begin
        entries_1_vaddr <= ld_reorder_1_bits_vaddr;
        entries_1_paddr <= ld_reorder_1_bits_paddr;
        entries_1_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_5) begin
        entries_1_vaddr <= ld_reorder_0_bits_vaddr;
        entries_1_paddr <= ld_reorder_0_bits_paddr;
        entries_1_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_25) begin
        entries_2_vaddr <= ld_reorder_2_bits_vaddr;
        entries_2_paddr <= ld_reorder_2_bits_paddr;
        entries_2_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_17) begin
        entries_2_vaddr <= ld_reorder_1_bits_vaddr;
        entries_2_paddr <= ld_reorder_1_bits_paddr;
        entries_2_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_6) begin
        entries_2_vaddr <= ld_reorder_0_bits_vaddr;
        entries_2_paddr <= ld_reorder_0_bits_paddr;
        entries_2_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_26) begin
        entries_3_vaddr <= ld_reorder_2_bits_vaddr;
        entries_3_paddr <= ld_reorder_2_bits_paddr;
        entries_3_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_18) begin
        entries_3_vaddr <= ld_reorder_1_bits_vaddr;
        entries_3_paddr <= ld_reorder_1_bits_paddr;
        entries_3_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_7) begin
        entries_3_vaddr <= ld_reorder_0_bits_vaddr;
        entries_3_paddr <= ld_reorder_0_bits_paddr;
        entries_3_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_27) begin
        entries_4_vaddr <= ld_reorder_2_bits_vaddr;
        entries_4_paddr <= ld_reorder_2_bits_paddr;
        entries_4_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_19) begin
        entries_4_vaddr <= ld_reorder_1_bits_vaddr;
        entries_4_paddr <= ld_reorder_1_bits_paddr;
        entries_4_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_8) begin
        entries_4_vaddr <= ld_reorder_0_bits_vaddr;
        entries_4_paddr <= ld_reorder_0_bits_paddr;
        entries_4_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_28) begin
        entries_5_vaddr <= ld_reorder_2_bits_vaddr;
        entries_5_paddr <= ld_reorder_2_bits_paddr;
        entries_5_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_20) begin
        entries_5_vaddr <= ld_reorder_1_bits_vaddr;
        entries_5_paddr <= ld_reorder_1_bits_paddr;
        entries_5_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_9) begin
        entries_5_vaddr <= ld_reorder_0_bits_vaddr;
        entries_5_paddr <= ld_reorder_0_bits_paddr;
        entries_5_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_29) begin
        entries_6_vaddr <= ld_reorder_2_bits_vaddr;
        entries_6_paddr <= ld_reorder_2_bits_paddr;
        entries_6_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & _GEN_21) begin
        entries_6_vaddr <= ld_reorder_1_bits_vaddr;
        entries_6_paddr <= ld_reorder_1_bits_paddr;
        entries_6_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_10) begin
        entries_6_vaddr <= ld_reorder_0_bits_vaddr;
        entries_6_paddr <= ld_reorder_0_bits_paddr;
        entries_6_pc <= ld_reorder_0_bits_uop_pc;
      end
      if (_GEN_30) begin
        entries_7_vaddr <= ld_reorder_2_bits_vaddr;
        entries_7_paddr <= ld_reorder_2_bits_paddr;
        entries_7_pc <= ld_reorder_2_bits_uop_pc;
      end
      else if (canAlloc_1 & (&_GEN_14[_GEN_12])) begin
        entries_7_vaddr <= ld_reorder_1_bits_vaddr;
        entries_7_paddr <= ld_reorder_1_bits_paddr;
        entries_7_pc <= ld_reorder_1_bits_uop_pc;
      end
      else if (_GEN_11) begin
        entries_7_vaddr <= ld_reorder_0_bits_vaddr;
        entries_7_paddr <= ld_reorder_0_bits_paddr;
        entries_7_pc <= ld_reorder_0_bits_uop_pc;
      end
      valids_0 <=
        ~(io_train_req_valid_0 & _GEN)
        & (_GEN_23 | (canAlloc_1 ? _GEN_15 | _GEN_4 | valids_0 : _GEN_4 | valids_0));
      valids_1 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h1)
        & (_GEN_24 | (canAlloc_1 ? _GEN_16 | _GEN_5 | valids_1 : _GEN_5 | valids_1));
      valids_2 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h2)
        & (_GEN_25 | (canAlloc_1 ? _GEN_17 | _GEN_6 | valids_2 : _GEN_6 | valids_2));
      valids_3 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h3)
        & (_GEN_26 | (canAlloc_1 ? _GEN_18 | _GEN_7 | valids_3 : _GEN_7 | valids_3));
      valids_4 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h4)
        & (_GEN_27 | (canAlloc_1 ? _GEN_19 | _GEN_8 | valids_4 : _GEN_8 | valids_4));
      valids_5 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h5)
        & (_GEN_28 | (canAlloc_1 ? _GEN_20 | _GEN_9 | valids_5 : _GEN_9 | valids_5));
      valids_6 <=
        ~(io_train_req_valid_0 & deqPtrExt_value == 3'h6)
        & (_GEN_29 | (canAlloc_1 ? _GEN_21 | _GEN_10 | valids_6 : _GEN_10 | valids_6));
      valids_7 <=
        ~(io_train_req_valid_0 & (&deqPtrExt_value))
        & (_GEN_30
           | (canAlloc_1
                ? (&_GEN_14[_GEN_12]) | _GEN_11 | valids_7
                : _GEN_11 | valids_7));
      if (|{canAlloc_2, canAlloc_1, canAlloc_0}) begin
        enqPtrExt_0_flag <= _enqPtrExt_0_new_ptr_T_1[3];
        enqPtrExt_0_value <= _enqPtrExt_0_new_ptr_T_1[2:0];
        enqPtrExt_1_flag <= _enqPtrExt_1_new_ptr_T_1[3];
        enqPtrExt_1_value <= _enqPtrExt_1_new_ptr_T_1[2:0];
        enqPtrExt_2_flag <= _enqPtrExt_2_new_ptr_T_1[3];
        enqPtrExt_2_value <= _enqPtrExt_2_new_ptr_T_1[2:0];
        enqPtrExt_3_flag <= _enqPtrExt_3_new_ptr_T_1[3];
        enqPtrExt_3_value <= _enqPtrExt_3_new_ptr_T_1[2:0];
        enqPtrExt_4_flag <= _enqPtrExt_4_new_ptr_T_1[3];
        enqPtrExt_4_value <= _enqPtrExt_4_new_ptr_T_1[2:0];
      end
      if (io_train_req_valid_0) begin
        deqPtrExt_flag <= _deqPtrExt_new_ptr_T_1[3];
        deqPtrExt_value <= _deqPtrExt_new_ptr_T_1[2:0];
      end
    end
  end // always @(posedge, posedge)
  wire             ld_reorder_tmp_source_1_older =
    (&{io_ld_in_0_valid, io_ld_in_1_valid})
    & (io_ld_in_1_bits_uop_robIdx_flag ^ io_ld_in_0_bits_uop_robIdx_flag
       ^ io_ld_in_1_bits_uop_robIdx_value < io_ld_in_0_bits_uop_robIdx_value);
  wire             ld_reorder_tmp_1_source_1_older =
    (&{ld_reorder_res_0_1_1_valid, ld_reorder_res_0_1_2_valid})
    & (ld_reorder_res_0_1_2_bits_uop_robIdx_flag
       ^ ld_reorder_res_0_1_1_bits_uop_robIdx_flag
       ^ ld_reorder_res_0_1_2_bits_uop_robIdx_value < ld_reorder_res_0_1_1_bits_uop_robIdx_value);
  wire             ld_reorder_tmp_2_source_1_older =
    (&{ld_reorder_res_1_2_0_valid, ld_reorder_res_1_2_1_valid})
    & (ld_reorder_res_1_2_1_bits_uop_robIdx_flag
       ^ ld_reorder_res_1_2_0_bits_uop_robIdx_flag
       ^ ld_reorder_res_1_2_1_bits_uop_robIdx_value < ld_reorder_res_1_2_0_bits_uop_robIdx_value);
  always @(posedge clock) begin
    ld_reorder_res_0_1_0_valid <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_valid : io_ld_in_0_valid;
    ld_reorder_res_0_1_0_bits_uop_pc <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_bits_uop_pc : io_ld_in_0_bits_uop_pc;
    ld_reorder_res_0_1_0_bits_uop_robIdx_flag <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_1_bits_uop_robIdx_flag
        : io_ld_in_0_bits_uop_robIdx_flag;
    ld_reorder_res_0_1_0_bits_uop_robIdx_value <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_1_bits_uop_robIdx_value
        : io_ld_in_0_bits_uop_robIdx_value;
    ld_reorder_res_0_1_0_bits_vaddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_bits_vaddr : io_ld_in_0_bits_vaddr;
    ld_reorder_res_0_1_0_bits_paddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_1_bits_paddr : io_ld_in_0_bits_paddr;
    ld_reorder_res_0_1_1_valid <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_valid : io_ld_in_1_valid;
    ld_reorder_res_0_1_1_bits_uop_pc <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_bits_uop_pc : io_ld_in_1_bits_uop_pc;
    ld_reorder_res_0_1_1_bits_uop_robIdx_flag <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_0_bits_uop_robIdx_flag
        : io_ld_in_1_bits_uop_robIdx_flag;
    ld_reorder_res_0_1_1_bits_uop_robIdx_value <=
      ld_reorder_tmp_source_1_older
        ? io_ld_in_0_bits_uop_robIdx_value
        : io_ld_in_1_bits_uop_robIdx_value;
    ld_reorder_res_0_1_1_bits_vaddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_bits_vaddr : io_ld_in_1_bits_vaddr;
    ld_reorder_res_0_1_1_bits_paddr <=
      ld_reorder_tmp_source_1_older ? io_ld_in_0_bits_paddr : io_ld_in_1_bits_paddr;
    ld_reorder_res_0_1_2_valid <= io_ld_in_2_valid;
    ld_reorder_res_0_1_2_bits_uop_pc <= io_ld_in_2_bits_uop_pc;
    ld_reorder_res_0_1_2_bits_uop_robIdx_flag <= io_ld_in_2_bits_uop_robIdx_flag;
    ld_reorder_res_0_1_2_bits_uop_robIdx_value <= io_ld_in_2_bits_uop_robIdx_value;
    ld_reorder_res_0_1_2_bits_vaddr <= io_ld_in_2_bits_vaddr;
    ld_reorder_res_0_1_2_bits_paddr <= io_ld_in_2_bits_paddr;
    ld_reorder_res_1_2_0_valid <= ld_reorder_res_0_1_0_valid;
    ld_reorder_res_1_2_0_bits_uop_pc <= ld_reorder_res_0_1_0_bits_uop_pc;
    ld_reorder_res_1_2_0_bits_uop_robIdx_flag <=
      ld_reorder_res_0_1_0_bits_uop_robIdx_flag;
    ld_reorder_res_1_2_0_bits_uop_robIdx_value <=
      ld_reorder_res_0_1_0_bits_uop_robIdx_value;
    ld_reorder_res_1_2_0_bits_vaddr <= ld_reorder_res_0_1_0_bits_vaddr;
    ld_reorder_res_1_2_0_bits_paddr <= ld_reorder_res_0_1_0_bits_paddr;
    ld_reorder_res_1_2_1_valid <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_valid
        : ld_reorder_res_0_1_1_valid;
    ld_reorder_res_1_2_1_bits_uop_pc <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_uop_pc
        : ld_reorder_res_0_1_1_bits_uop_pc;
    ld_reorder_res_1_2_1_bits_uop_robIdx_flag <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_uop_robIdx_flag
        : ld_reorder_res_0_1_1_bits_uop_robIdx_flag;
    ld_reorder_res_1_2_1_bits_uop_robIdx_value <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_uop_robIdx_value
        : ld_reorder_res_0_1_1_bits_uop_robIdx_value;
    ld_reorder_res_1_2_1_bits_vaddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_vaddr
        : ld_reorder_res_0_1_1_bits_vaddr;
    ld_reorder_res_1_2_1_bits_paddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_2_bits_paddr
        : ld_reorder_res_0_1_1_bits_paddr;
    ld_reorder_res_1_2_2_valid <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_valid
        : ld_reorder_res_0_1_2_valid;
    ld_reorder_res_1_2_2_bits_uop_pc <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_bits_uop_pc
        : ld_reorder_res_0_1_2_bits_uop_pc;
    ld_reorder_res_1_2_2_bits_vaddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_bits_vaddr
        : ld_reorder_res_0_1_2_bits_vaddr;
    ld_reorder_res_1_2_2_bits_paddr <=
      ld_reorder_tmp_1_source_1_older
        ? ld_reorder_res_0_1_1_bits_paddr
        : ld_reorder_res_0_1_2_bits_paddr;
    ld_reorder_0_valid <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_valid
        : ld_reorder_res_1_2_0_valid;
    ld_reorder_0_bits_uop_pc <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_bits_uop_pc
        : ld_reorder_res_1_2_0_bits_uop_pc;
    ld_reorder_0_bits_vaddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_bits_vaddr
        : ld_reorder_res_1_2_0_bits_vaddr;
    ld_reorder_0_bits_paddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_1_bits_paddr
        : ld_reorder_res_1_2_0_bits_paddr;
    ld_reorder_1_valid <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_valid
        : ld_reorder_res_1_2_1_valid;
    ld_reorder_1_bits_uop_pc <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_bits_uop_pc
        : ld_reorder_res_1_2_1_bits_uop_pc;
    ld_reorder_1_bits_vaddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_bits_vaddr
        : ld_reorder_res_1_2_1_bits_vaddr;
    ld_reorder_1_bits_paddr <=
      ld_reorder_tmp_2_source_1_older
        ? ld_reorder_res_1_2_0_bits_paddr
        : ld_reorder_res_1_2_1_bits_paddr;
    ld_reorder_2_valid <= ld_reorder_res_1_2_2_valid;
    ld_reorder_2_bits_uop_pc <= ld_reorder_res_1_2_2_bits_uop_pc;
    ld_reorder_2_bits_vaddr <= ld_reorder_res_1_2_2_bits_vaddr;
    ld_reorder_2_bits_paddr <= ld_reorder_res_1_2_2_bits_paddr;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:501];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h1F6; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_0_vaddr = {_RANDOM[9'h0], _RANDOM[9'h1][8:0]};
        entries_0_paddr = {_RANDOM[9'h1][31:9], _RANDOM[9'h2][12:0]};
        entries_0_pc = {_RANDOM[9'h2][31:13], _RANDOM[9'h3][21:0]};
        entries_1_vaddr = {_RANDOM[9'h3][31:23], _RANDOM[9'h4]};
        entries_1_paddr = {_RANDOM[9'h5], _RANDOM[9'h6][3:0]};
        entries_1_pc = {_RANDOM[9'h6][31:4], _RANDOM[9'h7][12:0]};
        entries_2_vaddr = {_RANDOM[9'h7][31:14], _RANDOM[9'h8][22:0]};
        entries_2_paddr = {_RANDOM[9'h8][31:23], _RANDOM[9'h9][26:0]};
        entries_2_pc = {_RANDOM[9'h9][31:27], _RANDOM[9'hA], _RANDOM[9'hB][3:0]};
        entries_3_vaddr = {_RANDOM[9'hB][31:5], _RANDOM[9'hC][13:0]};
        entries_3_paddr = {_RANDOM[9'hC][31:14], _RANDOM[9'hD][17:0]};
        entries_3_pc = {_RANDOM[9'hD][31:18], _RANDOM[9'hE][26:0]};
        entries_4_vaddr = {_RANDOM[9'hE][31:28], _RANDOM[9'hF], _RANDOM[9'h10][4:0]};
        entries_4_paddr = {_RANDOM[9'h10][31:5], _RANDOM[9'h11][8:0]};
        entries_4_pc = {_RANDOM[9'h11][31:9], _RANDOM[9'h12][17:0]};
        entries_5_vaddr = {_RANDOM[9'h12][31:19], _RANDOM[9'h13][27:0]};
        entries_5_paddr = {_RANDOM[9'h13][31:28], _RANDOM[9'h14]};
        entries_5_pc = {_RANDOM[9'h15], _RANDOM[9'h16][8:0]};
        entries_6_vaddr = {_RANDOM[9'h16][31:10], _RANDOM[9'h17][18:0]};
        entries_6_paddr = {_RANDOM[9'h17][31:19], _RANDOM[9'h18][22:0]};
        entries_6_pc = {_RANDOM[9'h18][31:23], _RANDOM[9'h19]};
        entries_7_vaddr = {_RANDOM[9'h1A][31:1], _RANDOM[9'h1B][9:0]};
        entries_7_paddr = {_RANDOM[9'h1B][31:10], _RANDOM[9'h1C][13:0]};
        entries_7_pc = {_RANDOM[9'h1C][31:14], _RANDOM[9'h1D][22:0]};
        valids_0 = _RANDOM[9'h1D][24];
        valids_1 = _RANDOM[9'h1D][25];
        valids_2 = _RANDOM[9'h1D][26];
        valids_3 = _RANDOM[9'h1D][27];
        valids_4 = _RANDOM[9'h1D][28];
        valids_5 = _RANDOM[9'h1D][29];
        valids_6 = _RANDOM[9'h1D][30];
        valids_7 = _RANDOM[9'h1D][31];
        enqPtrExt_0_flag = _RANDOM[9'h1E][0];
        enqPtrExt_0_value = _RANDOM[9'h1E][3:1];
        enqPtrExt_1_flag = _RANDOM[9'h1E][4];
        enqPtrExt_1_value = _RANDOM[9'h1E][7:5];
        enqPtrExt_2_flag = _RANDOM[9'h1E][8];
        enqPtrExt_2_value = _RANDOM[9'h1E][11:9];
        enqPtrExt_3_flag = _RANDOM[9'h1E][12];
        enqPtrExt_3_value = _RANDOM[9'h1E][15:13];
        enqPtrExt_4_flag = _RANDOM[9'h1E][16];
        enqPtrExt_4_value = _RANDOM[9'h1E][19:17];
        deqPtrExt_flag = _RANDOM[9'h1E][20];
        deqPtrExt_value = _RANDOM[9'h1E][23:21];
        ld_reorder_res_0_1_0_valid = _RANDOM[9'h1E][24];
        ld_reorder_res_0_1_0_bits_uop_pc =
          {_RANDOM[9'h1F][31:25], _RANDOM[9'h20], _RANDOM[9'h21][1:0]};
        ld_reorder_res_0_1_0_bits_uop_robIdx_flag = _RANDOM[9'h31][14];
        ld_reorder_res_0_1_0_bits_uop_robIdx_value = _RANDOM[9'h31][22:15];
        ld_reorder_res_0_1_0_bits_vaddr = {_RANDOM[9'h45][31:6], _RANDOM[9'h46][14:0]};
        ld_reorder_res_0_1_0_bits_paddr = {_RANDOM[9'h46][31:15], _RANDOM[9'h47][18:0]};
        ld_reorder_res_0_1_1_valid = _RANDOM[9'h54][16];
        ld_reorder_res_0_1_1_bits_uop_pc = {_RANDOM[9'h55][31:17], _RANDOM[9'h56][25:0]};
        ld_reorder_res_0_1_1_bits_uop_robIdx_flag = _RANDOM[9'h67][6];
        ld_reorder_res_0_1_1_bits_uop_robIdx_value = _RANDOM[9'h67][14:7];
        ld_reorder_res_0_1_1_bits_vaddr =
          {_RANDOM[9'h7A][31:30], _RANDOM[9'h7B], _RANDOM[9'h7C][6:0]};
        ld_reorder_res_0_1_1_bits_paddr = {_RANDOM[9'h7C][31:7], _RANDOM[9'h7D][10:0]};
        ld_reorder_res_0_1_2_valid = _RANDOM[9'h8A][8];
        ld_reorder_res_0_1_2_bits_uop_pc = {_RANDOM[9'h8B][31:9], _RANDOM[9'h8C][17:0]};
        ld_reorder_res_0_1_2_bits_uop_robIdx_flag = _RANDOM[9'h9C][30];
        ld_reorder_res_0_1_2_bits_uop_robIdx_value =
          {_RANDOM[9'h9C][31], _RANDOM[9'h9D][6:0]};
        ld_reorder_res_0_1_2_bits_vaddr = {_RANDOM[9'hB0][31:22], _RANDOM[9'hB1][30:0]};
        ld_reorder_res_0_1_2_bits_paddr =
          {_RANDOM[9'hB1][31], _RANDOM[9'hB2], _RANDOM[9'hB3][2:0]};
        ld_reorder_res_1_2_0_valid = _RANDOM[9'hC0][0];
        ld_reorder_res_1_2_0_bits_uop_pc = {_RANDOM[9'hC1][31:1], _RANDOM[9'hC2][9:0]};
        ld_reorder_res_1_2_0_bits_uop_robIdx_flag = _RANDOM[9'hD2][22];
        ld_reorder_res_1_2_0_bits_uop_robIdx_value = _RANDOM[9'hD2][30:23];
        ld_reorder_res_1_2_0_bits_vaddr = {_RANDOM[9'hE6][31:14], _RANDOM[9'hE7][22:0]};
        ld_reorder_res_1_2_0_bits_paddr = {_RANDOM[9'hE7][31:23], _RANDOM[9'hE8][26:0]};
        ld_reorder_res_1_2_1_valid = _RANDOM[9'hF5][24];
        ld_reorder_res_1_2_1_bits_uop_pc =
          {_RANDOM[9'hF6][31:25], _RANDOM[9'hF7], _RANDOM[9'hF8][1:0]};
        ld_reorder_res_1_2_1_bits_uop_robIdx_flag = _RANDOM[9'h108][14];
        ld_reorder_res_1_2_1_bits_uop_robIdx_value = _RANDOM[9'h108][22:15];
        ld_reorder_res_1_2_1_bits_vaddr = {_RANDOM[9'h11C][31:6], _RANDOM[9'h11D][14:0]};
        ld_reorder_res_1_2_1_bits_paddr = {_RANDOM[9'h11D][31:15], _RANDOM[9'h11E][18:0]};
        ld_reorder_res_1_2_2_valid = _RANDOM[9'h12B][16];
        ld_reorder_res_1_2_2_bits_uop_pc =
          {_RANDOM[9'h12C][31:17], _RANDOM[9'h12D][25:0]};
        ld_reorder_res_1_2_2_bits_vaddr =
          {_RANDOM[9'h151][31:30], _RANDOM[9'h152], _RANDOM[9'h153][6:0]};
        ld_reorder_res_1_2_2_bits_paddr = {_RANDOM[9'h153][31:7], _RANDOM[9'h154][10:0]};
        ld_reorder_0_valid = _RANDOM[9'h161][8];
        ld_reorder_0_bits_uop_pc = {_RANDOM[9'h162][31:9], _RANDOM[9'h163][17:0]};
        ld_reorder_0_bits_vaddr = {_RANDOM[9'h187][31:22], _RANDOM[9'h188][30:0]};
        ld_reorder_0_bits_paddr =
          {_RANDOM[9'h188][31], _RANDOM[9'h189], _RANDOM[9'h18A][2:0]};
        ld_reorder_1_valid = _RANDOM[9'h197][0];
        ld_reorder_1_bits_uop_pc = {_RANDOM[9'h198][31:1], _RANDOM[9'h199][9:0]};
        ld_reorder_1_bits_vaddr = {_RANDOM[9'h1BD][31:14], _RANDOM[9'h1BE][22:0]};
        ld_reorder_1_bits_paddr = {_RANDOM[9'h1BE][31:23], _RANDOM[9'h1BF][26:0]};
        ld_reorder_2_valid = _RANDOM[9'h1CC][24];
        ld_reorder_2_bits_uop_pc =
          {_RANDOM[9'h1CD][31:25], _RANDOM[9'h1CE], _RANDOM[9'h1CF][1:0]};
        ld_reorder_2_bits_vaddr = {_RANDOM[9'h1F3][31:6], _RANDOM[9'h1F4][14:0]};
        ld_reorder_2_bits_paddr = {_RANDOM[9'h1F4][31:15], _RANDOM[9'h1F5][18:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        entries_0_vaddr = 41'h0;
        entries_0_paddr = 36'h0;
        entries_0_pc = 41'h0;
        entries_1_vaddr = 41'h0;
        entries_1_paddr = 36'h0;
        entries_1_pc = 41'h0;
        entries_2_vaddr = 41'h0;
        entries_2_paddr = 36'h0;
        entries_2_pc = 41'h0;
        entries_3_vaddr = 41'h0;
        entries_3_paddr = 36'h0;
        entries_3_pc = 41'h0;
        entries_4_vaddr = 41'h0;
        entries_4_paddr = 36'h0;
        entries_4_pc = 41'h0;
        entries_5_vaddr = 41'h0;
        entries_5_paddr = 36'h0;
        entries_5_pc = 41'h0;
        entries_6_vaddr = 41'h0;
        entries_6_paddr = 36'h0;
        entries_6_pc = 41'h0;
        entries_7_vaddr = 41'h0;
        entries_7_paddr = 36'h0;
        entries_7_pc = 41'h0;
        valids_0 = 1'h0;
        valids_1 = 1'h0;
        valids_2 = 1'h0;
        valids_3 = 1'h0;
        valids_4 = 1'h0;
        valids_5 = 1'h0;
        valids_6 = 1'h0;
        valids_7 = 1'h0;
        enqPtrExt_0_flag = 1'h0;
        enqPtrExt_0_value = 3'h0;
        enqPtrExt_1_flag = 1'h0;
        enqPtrExt_1_value = 3'h1;
        enqPtrExt_2_flag = 1'h0;
        enqPtrExt_2_value = 3'h2;
        enqPtrExt_3_flag = 1'h0;
        enqPtrExt_3_value = 3'h3;
        enqPtrExt_4_flag = 1'h0;
        enqPtrExt_4_value = 3'h4;
        deqPtrExt_flag = 1'h0;
        deqPtrExt_value = 3'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_train_req_valid = io_train_req_valid_0;
  assign io_train_req_bits_vaddr = _GEN_1[deqPtrExt_value];
  assign io_train_req_bits_paddr = _GEN_2[deqPtrExt_value];
  assign io_train_req_bits_pc = _GEN_3[deqPtrExt_value];
endmodule

