// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ClkDiv2SRAMTemplate_40(
  input         clock,
  input         io_r_req_valid,
  input  [10:0] io_r_req_bits_setIdx,
  output [1:0]  io_r_resp_data_0_0_state,
  output [1:0]  io_r_resp_data_0_1_state,
  output [1:0]  io_r_resp_data_1_0_state,
  output [1:0]  io_r_resp_data_1_1_state,
  output [1:0]  io_r_resp_data_2_0_state,
  output [1:0]  io_r_resp_data_2_1_state,
  output [1:0]  io_r_resp_data_3_0_state,
  output [1:0]  io_r_resp_data_3_1_state,
  output [1:0]  io_r_resp_data_4_0_state,
  output [1:0]  io_r_resp_data_4_1_state,
  output [1:0]  io_r_resp_data_5_0_state,
  output [1:0]  io_r_resp_data_5_1_state,
  output [1:0]  io_r_resp_data_6_0_state,
  output [1:0]  io_r_resp_data_6_1_state,
  output [1:0]  io_r_resp_data_7_0_state,
  output [1:0]  io_r_resp_data_7_1_state,
  output [1:0]  io_r_resp_data_8_0_state,
  output [1:0]  io_r_resp_data_8_1_state,
  output [1:0]  io_r_resp_data_9_0_state,
  output [1:0]  io_r_resp_data_9_1_state,
  input         io_w_req_valid,
  input  [10:0] io_w_req_bits_setIdx,
  input  [1:0]  io_w_req_bits_data_0_0_state,
  input  [1:0]  io_w_req_bits_data_0_1_state,
  input  [1:0]  io_w_req_bits_data_1_0_state,
  input  [1:0]  io_w_req_bits_data_1_1_state,
  input  [1:0]  io_w_req_bits_data_2_0_state,
  input  [1:0]  io_w_req_bits_data_2_1_state,
  input  [1:0]  io_w_req_bits_data_3_0_state,
  input  [1:0]  io_w_req_bits_data_3_1_state,
  input  [1:0]  io_w_req_bits_data_4_0_state,
  input  [1:0]  io_w_req_bits_data_4_1_state,
  input  [1:0]  io_w_req_bits_data_5_0_state,
  input  [1:0]  io_w_req_bits_data_5_1_state,
  input  [1:0]  io_w_req_bits_data_6_0_state,
  input  [1:0]  io_w_req_bits_data_6_1_state,
  input  [1:0]  io_w_req_bits_data_7_0_state,
  input  [1:0]  io_w_req_bits_data_7_1_state,
  input  [1:0]  io_w_req_bits_data_8_0_state,
  input  [1:0]  io_w_req_bits_data_8_1_state,
  input  [1:0]  io_w_req_bits_data_9_0_state,
  input  [1:0]  io_w_req_bits_data_9_1_state,
  input  [9:0]  io_w_req_bits_waymask
);

  wire        realRen;
  wire [39:0] _array_RW0_rdata;
  assign realRen = io_r_req_valid & ~io_w_req_valid;
  array_17 array (
    .RW0_addr  (io_w_req_valid ? io_w_req_bits_setIdx : io_r_req_bits_setIdx),
    .RW0_en    (realRen | io_w_req_valid),
    .RW0_clk   (clock),
    .RW0_wmode (io_w_req_valid),
    .RW0_wdata
      ({io_w_req_bits_data_9_1_state,
        io_w_req_bits_data_9_0_state,
        io_w_req_bits_data_8_1_state,
        io_w_req_bits_data_8_0_state,
        io_w_req_bits_data_7_1_state,
        io_w_req_bits_data_7_0_state,
        io_w_req_bits_data_6_1_state,
        io_w_req_bits_data_6_0_state,
        io_w_req_bits_data_5_1_state,
        io_w_req_bits_data_5_0_state,
        io_w_req_bits_data_4_1_state,
        io_w_req_bits_data_4_0_state,
        io_w_req_bits_data_3_1_state,
        io_w_req_bits_data_3_0_state,
        io_w_req_bits_data_2_1_state,
        io_w_req_bits_data_2_0_state,
        io_w_req_bits_data_1_1_state,
        io_w_req_bits_data_1_0_state,
        io_w_req_bits_data_0_1_state,
        io_w_req_bits_data_0_0_state}),
    .RW0_rdata (_array_RW0_rdata),
    .RW0_wmask (io_w_req_bits_waymask)
  );
  assign io_r_resp_data_0_0_state = _array_RW0_rdata[1:0];
  assign io_r_resp_data_0_1_state = _array_RW0_rdata[3:2];
  assign io_r_resp_data_1_0_state = _array_RW0_rdata[5:4];
  assign io_r_resp_data_1_1_state = _array_RW0_rdata[7:6];
  assign io_r_resp_data_2_0_state = _array_RW0_rdata[9:8];
  assign io_r_resp_data_2_1_state = _array_RW0_rdata[11:10];
  assign io_r_resp_data_3_0_state = _array_RW0_rdata[13:12];
  assign io_r_resp_data_3_1_state = _array_RW0_rdata[15:14];
  assign io_r_resp_data_4_0_state = _array_RW0_rdata[17:16];
  assign io_r_resp_data_4_1_state = _array_RW0_rdata[19:18];
  assign io_r_resp_data_5_0_state = _array_RW0_rdata[21:20];
  assign io_r_resp_data_5_1_state = _array_RW0_rdata[23:22];
  assign io_r_resp_data_6_0_state = _array_RW0_rdata[25:24];
  assign io_r_resp_data_6_1_state = _array_RW0_rdata[27:26];
  assign io_r_resp_data_7_0_state = _array_RW0_rdata[29:28];
  assign io_r_resp_data_7_1_state = _array_RW0_rdata[31:30];
  assign io_r_resp_data_8_0_state = _array_RW0_rdata[33:32];
  assign io_r_resp_data_8_1_state = _array_RW0_rdata[35:34];
  assign io_r_resp_data_9_0_state = _array_RW0_rdata[37:36];
  assign io_r_resp_data_9_1_state = _array_RW0_rdata[39:38];
endmodule

