// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module JumpDataModule(
  input  [63:0] io_src,
  input  [63:0] io_pc,
  input  [19:0] io_immMin,
  input  [8:0]  io_func,
  input         io_isRVC,
  output [63:0] io_result,
  output [63:0] io_target,
  output        io_isAuipc
);

  wire [31:0] _offset_T_14 =
    (io_func[0] ? {{20{io_immMin[11]}}, io_immMin[11:0]} : 32'h0)
    | (io_func[1] ? {io_immMin, 12'h0} : 32'h0)
    | (io_func[0] | io_func[1] ? 32'h0 : {{11{io_immMin[19]}}, io_immMin, 1'h0});
  wire [63:0] _target_T_2 =
    64'((io_func[0] ? io_src : io_pc) + {{32{_offset_T_14[31]}}, _offset_T_14});
  assign io_result =
    io_func[1] ? _target_T_2 : 64'(io_pc + {61'h0, io_isRVC ? 3'h2 : 3'h4});
  assign io_target = {_target_T_2[63:1], 1'h0};
  assign io_isAuipc = io_func[1];
endmodule

