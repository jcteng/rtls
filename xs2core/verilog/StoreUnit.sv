// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module StoreUnit(
  input         clock,
  input         reset,
  input         io_redirect_valid,
  input         io_redirect_bits_robIdx_flag,
  input  [7:0]  io_redirect_bits_robIdx_value,
  input         io_redirect_bits_level,
  output        io_stin_ready,
  input         io_stin_valid,
  input  [34:0] io_stin_bits_uop_fuType,
  input  [8:0]  io_stin_bits_uop_fuOpType,
  input  [31:0] io_stin_bits_uop_imm,
  input         io_stin_bits_uop_robIdx_flag,
  input  [7:0]  io_stin_bits_uop_robIdx_value,
  input         io_stin_bits_uop_sqIdx_flag,
  input  [5:0]  io_stin_bits_uop_sqIdx_value,
  input  [63:0] io_stin_bits_src_0,
  output        io_issue_valid,
  output [7:0]  io_issue_bits_uop_robIdx_value,
  output        io_tlb_req_valid,
  output [40:0] io_tlb_req_bits_vaddr,
  output        io_tlb_req_bits_hyperinst,
  output        io_tlb_req_bits_debug_robIdx_flag,
  output [7:0]  io_tlb_req_bits_debug_robIdx_value,
  input  [35:0] io_tlb_resp_bits_paddr_0,
  input  [40:0] io_tlb_resp_bits_gpaddr_0,
  input         io_tlb_resp_bits_miss,
  input         io_tlb_resp_bits_excp_0_gpf_st,
  input         io_tlb_resp_bits_excp_0_pf_st,
  input         io_tlb_resp_bits_excp_0_af_st,
  input         io_pmp_st,
  input         io_pmp_mmio,
  input         io_pmp_atomic,
  output        io_lsq_valid,
  output        io_lsq_bits_uop_exceptionVec_0,
  output        io_lsq_bits_uop_exceptionVec_1,
  output        io_lsq_bits_uop_exceptionVec_2,
  output        io_lsq_bits_uop_exceptionVec_3,
  output        io_lsq_bits_uop_exceptionVec_4,
  output        io_lsq_bits_uop_exceptionVec_5,
  output        io_lsq_bits_uop_exceptionVec_6,
  output        io_lsq_bits_uop_exceptionVec_7,
  output        io_lsq_bits_uop_exceptionVec_8,
  output        io_lsq_bits_uop_exceptionVec_9,
  output        io_lsq_bits_uop_exceptionVec_10,
  output        io_lsq_bits_uop_exceptionVec_11,
  output        io_lsq_bits_uop_exceptionVec_12,
  output        io_lsq_bits_uop_exceptionVec_13,
  output        io_lsq_bits_uop_exceptionVec_14,
  output        io_lsq_bits_uop_exceptionVec_15,
  output        io_lsq_bits_uop_exceptionVec_16,
  output        io_lsq_bits_uop_exceptionVec_17,
  output        io_lsq_bits_uop_exceptionVec_18,
  output        io_lsq_bits_uop_exceptionVec_19,
  output        io_lsq_bits_uop_exceptionVec_20,
  output        io_lsq_bits_uop_exceptionVec_21,
  output        io_lsq_bits_uop_exceptionVec_22,
  output        io_lsq_bits_uop_exceptionVec_23,
  output        io_lsq_bits_uop_trigger_backendHit_0,
  output        io_lsq_bits_uop_trigger_backendHit_1,
  output        io_lsq_bits_uop_trigger_backendHit_2,
  output        io_lsq_bits_uop_trigger_backendHit_3,
  output        io_lsq_bits_uop_trigger_backendCanFire_0,
  output        io_lsq_bits_uop_trigger_backendCanFire_1,
  output        io_lsq_bits_uop_trigger_backendCanFire_2,
  output        io_lsq_bits_uop_trigger_backendCanFire_3,
  output [8:0]  io_lsq_bits_uop_fuOpType,
  output [6:0]  io_lsq_bits_uop_uopIdx,
  output        io_lsq_bits_uop_lastUop,
  output        io_lsq_bits_uop_robIdx_flag,
  output [7:0]  io_lsq_bits_uop_robIdx_value,
  output        io_lsq_bits_uop_sqIdx_flag,
  output [5:0]  io_lsq_bits_uop_sqIdx_value,
  output [40:0] io_lsq_bits_vaddr,
  output [35:0] io_lsq_bits_paddr,
  output [40:0] io_lsq_bits_gpaddr,
  output [15:0] io_lsq_bits_mask,
  output        io_lsq_bits_wlineflag,
  output        io_lsq_bits_miss,
  output        io_lsq_bits_isvec,
  output        io_lsq_replenish_af,
  output        io_lsq_replenish_mmio,
  output        io_lsq_replenish_atomic,
  output        io_feedback_slow_valid,
  output        io_feedback_slow_bits_hit,
  output        io_feedback_slow_bits_sqIdx_flag,
  output [5:0]  io_feedback_slow_bits_sqIdx_value,
  input  [40:0] io_prefetch_req_bits_vaddr,
  output        io_stld_nuke_query_valid,
  output        io_stld_nuke_query_bits_robIdx_flag,
  output [7:0]  io_stld_nuke_query_bits_robIdx_value,
  output [35:0] io_stld_nuke_query_bits_paddr,
  output [15:0] io_stld_nuke_query_bits_mask,
  output        io_stld_nuke_query_bits_matchLine,
  output        io_stout_valid,
  output        io_stout_bits_uop_exceptionVec_3,
  output        io_stout_bits_uop_exceptionVec_6,
  output        io_stout_bits_uop_exceptionVec_7,
  output        io_stout_bits_uop_exceptionVec_15,
  output        io_stout_bits_uop_exceptionVec_23,
  output        io_stout_bits_uop_trigger_backendHit_0,
  output        io_stout_bits_uop_trigger_backendHit_1,
  output        io_stout_bits_uop_trigger_backendHit_2,
  output        io_stout_bits_uop_trigger_backendHit_3,
  output        io_stout_bits_uop_trigger_backendCanFire_0,
  output        io_stout_bits_uop_trigger_backendCanFire_1,
  output        io_stout_bits_uop_trigger_backendCanFire_2,
  output        io_stout_bits_uop_trigger_backendCanFire_3,
  output        io_stout_bits_uop_robIdx_flag,
  output [7:0]  io_stout_bits_uop_robIdx_value,
  output        io_vecstout_valid,
  output [3:0]  io_vecstout_bits_mBIndex,
  output        io_vecstout_bits_hit,
  output        io_vecstout_bits_exceptionVec_6,
  output        io_vecstout_bits_exceptionVec_7,
  output        io_vecstout_bits_exceptionVec_15,
  output        io_vecstout_bits_exceptionVec_23,
  output [40:0] io_vecstout_bits_vaddr,
  output        io_vecstout_bits_usSecondInv,
  output [7:0]  io_vecstout_bits_elemIdx,
  output [15:0] io_vecstout_bits_mask,
  output        io_st_mask_out_valid,
  output [5:0]  io_st_mask_out_bits_sqIdx_value,
  output [15:0] io_st_mask_out_bits_mask,
  output        io_vecstin_ready,
  input         io_vecstin_valid,
  input  [40:0] io_vecstin_bits_vaddr,
  input  [15:0] io_vecstin_bits_mask,
  input  [2:0]  io_vecstin_bits_alignedType,
  input         io_vecstin_bits_vecActive,
  input         io_vecstin_bits_uop_exceptionVec_4,
  input         io_vecstin_bits_uop_exceptionVec_5,
  input         io_vecstin_bits_uop_exceptionVec_13,
  input         io_vecstin_bits_uop_exceptionVec_21,
  input  [34:0] io_vecstin_bits_uop_fuType,
  input  [8:0]  io_vecstin_bits_uop_fuOpType,
  input  [31:0] io_vecstin_bits_uop_imm,
  input  [6:0]  io_vecstin_bits_uop_uopIdx,
  input         io_vecstin_bits_uop_lastUop,
  input         io_vecstin_bits_uop_robIdx_flag,
  input  [7:0]  io_vecstin_bits_uop_robIdx_value,
  input         io_vecstin_bits_uop_sqIdx_flag,
  input  [5:0]  io_vecstin_bits_uop_sqIdx_value,
  input         io_vecstin_bits_usSecondInv,
  input  [3:0]  io_vecstin_bits_mBIndex,
  input  [7:0]  io_vecstin_bits_elemIdx,
  input  [1:0]  io_fromCsrTrigger_tdataVec_0_matchType,
  input         io_fromCsrTrigger_tdataVec_0_select,
  input         io_fromCsrTrigger_tdataVec_0_timing,
  input         io_fromCsrTrigger_tdataVec_0_action,
  input         io_fromCsrTrigger_tdataVec_0_chain,
  input         io_fromCsrTrigger_tdataVec_0_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_0_tdata2,
  input  [1:0]  io_fromCsrTrigger_tdataVec_1_matchType,
  input         io_fromCsrTrigger_tdataVec_1_select,
  input         io_fromCsrTrigger_tdataVec_1_timing,
  input         io_fromCsrTrigger_tdataVec_1_action,
  input         io_fromCsrTrigger_tdataVec_1_chain,
  input         io_fromCsrTrigger_tdataVec_1_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_1_tdata2,
  input  [1:0]  io_fromCsrTrigger_tdataVec_2_matchType,
  input         io_fromCsrTrigger_tdataVec_2_select,
  input         io_fromCsrTrigger_tdataVec_2_timing,
  input         io_fromCsrTrigger_tdataVec_2_action,
  input         io_fromCsrTrigger_tdataVec_2_chain,
  input         io_fromCsrTrigger_tdataVec_2_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_2_tdata2,
  input  [1:0]  io_fromCsrTrigger_tdataVec_3_matchType,
  input         io_fromCsrTrigger_tdataVec_3_select,
  input         io_fromCsrTrigger_tdataVec_3_timing,
  input         io_fromCsrTrigger_tdataVec_3_action,
  input         io_fromCsrTrigger_tdataVec_3_chain,
  input         io_fromCsrTrigger_tdataVec_3_store,
  input  [63:0] io_fromCsrTrigger_tdataVec_3_tdata2,
  input         io_fromCsrTrigger_tEnableVec_0,
  input         io_fromCsrTrigger_tEnableVec_1,
  input         io_fromCsrTrigger_tEnableVec_2,
  input         io_fromCsrTrigger_tEnableVec_3,
  input         io_fromCsrTrigger_triggerCanRaiseBpExp
);

  reg  [7:0]  sx_in_1_r_output_uop_robIdx_value;
  reg         sx_in_1_r_output_uop_robIdx_flag;
  wire        s2_exception_new_vec_7;
  wire        s2_kill;
  wire        s1_kill;
  wire        _storeTrigger_io_toStore_triggerHitVec_0;
  wire        _storeTrigger_io_toStore_triggerHitVec_1;
  wire        _storeTrigger_io_toStore_triggerHitVec_2;
  wire        _storeTrigger_io_toStore_triggerHitVec_3;
  wire        _storeTrigger_io_toStore_triggerCanFireVec_0;
  wire        _storeTrigger_io_toStore_triggerCanFireVec_1;
  wire        _storeTrigger_io_toStore_triggerCanFireVec_2;
  wire        _storeTrigger_io_toStore_triggerCanFireVec_3;
  wire        _storeTrigger_io_toStore_breakPointExp;
  wire        s0_valid = io_stin_valid | io_vecstin_valid;
  wire        io_stin_ready_0 = io_stin_valid & ~io_vecstin_valid;
  wire [8:0]  s0_uop_fuOpType =
    io_stin_ready_0
      ? io_stin_bits_uop_fuOpType
      : io_vecstin_valid ? io_vecstin_bits_uop_fuOpType : 9'h0;
  wire [11:0] s0_uop_imm =
    io_stin_ready_0
      ? io_stin_bits_uop_imm[11:0]
      : io_vecstin_valid ? io_vecstin_bits_uop_imm[11:0] : 12'h0;
  wire        s0_uop_robIdx_flag =
    io_stin_ready_0
      ? io_stin_bits_uop_robIdx_flag
      : io_vecstin_valid & io_vecstin_bits_uop_robIdx_flag;
  wire [7:0]  s0_uop_robIdx_value =
    io_stin_ready_0
      ? io_stin_bits_uop_robIdx_value
      : io_vecstin_valid ? io_vecstin_bits_uop_robIdx_value : 8'h0;
  wire [5:0]  s0_uop_sqIdx_value =
    io_stin_ready_0
      ? io_stin_bits_uop_sqIdx_value
      : io_vecstin_valid ? io_vecstin_bits_uop_sqIdx_value : 6'h0;
  wire        io_st_mask_out_valid_0 = io_stin_ready_0 | io_vecstin_valid;
  wire [8:0]  _io_vecstout_valid_flushItself_T_2 =
    {io_redirect_bits_robIdx_flag, io_redirect_bits_robIdx_value};
  wire        _s0_fire_T_1 =
    s0_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {s0_uop_robIdx_flag,
              s0_uop_robIdx_value} == _io_vecstout_valid_flushItself_T_2
           | s0_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ s0_uop_robIdx_value > io_redirect_bits_robIdx_value));
  wire        s0_vecActive =
    ~io_vecstin_valid | io_vecstin_valid & io_vecstin_bits_vecActive;
  wire [40:0] _s0_saddr_T_3 =
    41'((io_stin_ready_0 ? io_stin_bits_src_0[40:0] : 41'h0)
        + {{29{s0_uop_imm[11]}}, s0_uop_imm});
  wire [40:0] s0_vaddr =
    io_stin_ready_0
      ? _s0_saddr_T_3
      : io_vecstin_valid ? io_vecstin_bits_vaddr : io_prefetch_req_bits_vaddr;
  wire [30:0] _s0_mask_T_16 =
    {15'h0,
     {8'h0,
      {4'h0,
       {2'h0, {1'h0, s0_uop_fuOpType[2:0] == 3'h0} | {2{s0_uop_fuOpType[2:0] == 3'h1}}}
         | {4{s0_uop_fuOpType[2:0] == 3'h2}}} | {8{s0_uop_fuOpType[2:0] == 3'h3}}}
       | {16{s0_uop_fuOpType[2:0] == 3'h4}}} << _s0_saddr_T_3[3:0];
  wire [15:0] s0_mask =
    io_stin_ready_0
      ? _s0_mask_T_16[15:0]
      : io_vecstin_valid ? io_vecstin_bits_mask : 16'hFFFF;
  reg         s1_valid;
  reg         s1_in_uop_exceptionVec_0;
  reg         s1_in_uop_exceptionVec_1;
  reg         s1_in_uop_exceptionVec_2;
  reg         s1_in_uop_exceptionVec_4;
  reg         s1_in_uop_exceptionVec_5;
  reg         s1_in_uop_exceptionVec_6;
  reg         s1_in_uop_exceptionVec_8;
  reg         s1_in_uop_exceptionVec_9;
  reg         s1_in_uop_exceptionVec_10;
  reg         s1_in_uop_exceptionVec_11;
  reg         s1_in_uop_exceptionVec_12;
  reg         s1_in_uop_exceptionVec_13;
  reg         s1_in_uop_exceptionVec_14;
  reg         s1_in_uop_exceptionVec_16;
  reg         s1_in_uop_exceptionVec_17;
  reg         s1_in_uop_exceptionVec_18;
  reg         s1_in_uop_exceptionVec_19;
  reg         s1_in_uop_exceptionVec_20;
  reg         s1_in_uop_exceptionVec_21;
  reg         s1_in_uop_exceptionVec_22;
  reg  [34:0] s1_in_uop_fuType;
  reg  [8:0]  s1_in_uop_fuOpType;
  reg  [6:0]  s1_in_uop_uopIdx;
  reg         s1_in_uop_lastUop;
  reg         s1_in_uop_robIdx_flag;
  reg  [7:0]  s1_in_uop_robIdx_value;
  reg         s1_in_uop_sqIdx_flag;
  reg  [5:0]  s1_in_uop_sqIdx_value;
  reg  [40:0] s1_in_vaddr;
  reg  [15:0] s1_in_mask;
  reg         s1_in_wlineflag;
  reg         s1_in_isvec;
  reg         s1_in_is128bit;
  reg         s1_in_usSecondInv;
  reg  [7:0]  s1_in_elemIdx;
  reg  [3:0]  s1_in_mbIndex;
  reg         s1_in_vecActive;
  wire        _s1_fire_T_1 = s1_valid & ~s1_kill;
  reg         s1_vecActive;
  reg         s1_isvec;
  assign s1_kill =
    io_redirect_valid
    & (io_redirect_bits_level
       & {s1_in_uop_robIdx_flag,
          s1_in_uop_robIdx_value} == _io_vecstout_valid_flushItself_T_2
       | s1_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ s1_in_uop_robIdx_value > io_redirect_bits_robIdx_value) | io_tlb_resp_bits_miss
    & ~s1_isvec;
  reg  [7:0]  io_issue_bits_r_uop_robIdx_value;
  wire        s1_out_uop_exceptionVec_15 = io_tlb_resp_bits_excp_0_pf_st & s1_vecActive;
  wire        s1_out_uop_exceptionVec_7 = io_tlb_resp_bits_excp_0_af_st & s1_vecActive;
  wire        s1_out_uop_exceptionVec_23 = io_tlb_resp_bits_excp_0_gpf_st & s1_vecActive;
  reg         s2_valid;
  reg         s2_in_uop_exceptionVec_3;
  reg         s2_in_uop_exceptionVec_6;
  reg         s2_in_uop_exceptionVec_7;
  reg         s2_in_uop_exceptionVec_15;
  reg         s2_in_uop_exceptionVec_23;
  reg         s2_in_uop_trigger_backendHit_0;
  reg         s2_in_uop_trigger_backendHit_1;
  reg         s2_in_uop_trigger_backendHit_2;
  reg         s2_in_uop_trigger_backendHit_3;
  reg         s2_in_uop_trigger_backendCanFire_0;
  reg         s2_in_uop_trigger_backendCanFire_1;
  reg         s2_in_uop_trigger_backendCanFire_2;
  reg         s2_in_uop_trigger_backendCanFire_3;
  reg  [34:0] s2_in_uop_fuType;
  reg         s2_in_uop_robIdx_flag;
  reg  [7:0]  s2_in_uop_robIdx_value;
  reg  [40:0] s2_in_vaddr;
  reg  [15:0] s2_in_mask;
  reg         s2_in_mmio;
  reg         s2_in_atomic;
  reg         s2_in_isvec;
  reg         s2_in_usSecondInv;
  reg  [7:0]  s2_in_elemIdx;
  reg  [3:0]  s2_in_mbIndex;
  wire        _s2_fire_T_1 = s2_valid & ~s2_kill;
  reg         s2_vecActive;
  reg         s2_exception_REG;
  wire        s2_exception =
    (|{s2_in_uop_exceptionVec_23,
       s2_in_uop_exceptionVec_15,
       s2_exception_new_vec_7,
       s2_in_uop_exceptionVec_6,
       s2_in_uop_exceptionVec_3}) & s2_exception_REG;
  reg         s2_mmio_REG;
  wire        s2_mmio = (s2_in_mmio | io_pmp_mmio) & s2_mmio_REG;
  assign s2_kill =
    s2_mmio & ~s2_exception & ~s2_in_isvec | io_redirect_valid
    & (io_redirect_bits_level
       & {s2_in_uop_robIdx_flag,
          s2_in_uop_robIdx_value} == _io_vecstout_valid_flushItself_T_2
       | s2_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ s2_in_uop_robIdx_value > io_redirect_bits_robIdx_value);
  reg         s2_out_uop_exceptionVec_7_REG;
  assign s2_exception_new_vec_7 =
    (s2_in_uop_exceptionVec_7 | io_pmp_st | s2_in_isvec & io_pmp_mmio
     & s2_out_uop_exceptionVec_7_REG) & s2_vecActive;
  wire [8:0]  _s2_vecFeedback_flushItself_T_1 =
    {s1_in_uop_robIdx_flag, s1_in_uop_robIdx_value};
  wire        s2_vecFeedback_differentFlag =
    s1_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag;
  wire        s2_vecFeedback_compare =
    s1_in_uop_robIdx_value > io_redirect_bits_robIdx_value;
  wire        feedback_slow_valid =
    s1_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & _s2_vecFeedback_flushItself_T_1 == _io_vecstout_valid_flushItself_T_2
           | s2_vecFeedback_differentFlag ^ s2_vecFeedback_compare)) & ~s1_in_isvec;
  reg         io_feedback_slow_valid_last_REG;
  reg         io_feedback_slow_bits_r_hit;
  reg         io_feedback_slow_bits_r_sqIdx_flag;
  reg  [5:0]  io_feedback_slow_bits_r_sqIdx_value;
  reg         s2_vecFeedback_REG;
  reg         s3_valid;
  reg         s3_in_uop_exceptionVec_3;
  reg         s3_in_uop_exceptionVec_6;
  reg         s3_in_uop_exceptionVec_7;
  reg         s3_in_uop_exceptionVec_15;
  reg         s3_in_uop_exceptionVec_23;
  reg         s3_in_uop_trigger_backendHit_0;
  reg         s3_in_uop_trigger_backendHit_1;
  reg         s3_in_uop_trigger_backendHit_2;
  reg         s3_in_uop_trigger_backendHit_3;
  reg         s3_in_uop_trigger_backendCanFire_0;
  reg         s3_in_uop_trigger_backendCanFire_1;
  reg         s3_in_uop_trigger_backendCanFire_2;
  reg         s3_in_uop_trigger_backendCanFire_3;
  reg  [34:0] s3_in_uop_fuType;
  reg         s3_in_uop_robIdx_flag;
  reg  [7:0]  s3_in_uop_robIdx_value;
  reg  [40:0] s3_in_vaddr;
  reg  [15:0] s3_in_mask;
  reg         s3_in_usSecondInv;
  reg  [7:0]  s3_in_elemIdx;
  reg  [3:0]  s3_in_mbIndex;
  reg         s3_vecFeedback;
  wire [8:0]  _io_vecstout_valid_flushItself_T_1 =
    {sx_in_1_r_output_uop_robIdx_flag, sx_in_1_r_output_uop_robIdx_value};
  wire        cur_kill_differentFlag =
    sx_in_1_r_output_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag;
  wire        cur_kill_compare =
    sx_in_1_r_output_uop_robIdx_value > io_redirect_bits_robIdx_value;
  wire        _prev_fire_T_4 =
    s3_valid
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & {s3_in_uop_robIdx_flag,
              s3_in_uop_robIdx_value} == _io_vecstout_valid_flushItself_T_2
           | s3_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
           ^ s3_in_uop_robIdx_value > io_redirect_bits_robIdx_value));
  reg         sx_valid_1_r;
  reg         sx_in_1_r_output_uop_exceptionVec_3;
  reg         sx_in_1_r_output_uop_exceptionVec_6;
  reg         sx_in_1_r_output_uop_exceptionVec_7;
  reg         sx_in_1_r_output_uop_exceptionVec_15;
  reg         sx_in_1_r_output_uop_exceptionVec_23;
  reg         sx_in_1_r_output_uop_trigger_backendHit_0;
  reg         sx_in_1_r_output_uop_trigger_backendHit_1;
  reg         sx_in_1_r_output_uop_trigger_backendHit_2;
  reg         sx_in_1_r_output_uop_trigger_backendHit_3;
  reg         sx_in_1_r_output_uop_trigger_backendCanFire_0;
  reg         sx_in_1_r_output_uop_trigger_backendCanFire_1;
  reg         sx_in_1_r_output_uop_trigger_backendCanFire_2;
  reg         sx_in_1_r_output_uop_trigger_backendCanFire_3;
  reg  [34:0] sx_in_1_r_output_uop_fuType;
  reg         sx_in_1_r_vecFeedback;
  reg         sx_in_1_r_usSecondInv;
  reg  [7:0]  sx_in_1_r_elemIdx;
  reg  [3:0]  sx_in_1_r_mbIndex;
  reg  [15:0] sx_in_1_r_mask;
  reg  [40:0] sx_in_1_r_vaddr;
  wire        s3_kill =
    io_redirect_valid
    & (io_redirect_bits_level
       & {s3_in_uop_robIdx_flag,
          s3_in_uop_robIdx_value} == _io_vecstout_valid_flushItself_T_2
       | s3_in_uop_robIdx_flag ^ io_redirect_bits_robIdx_flag
       ^ s3_in_uop_robIdx_value > io_redirect_bits_robIdx_value);
  wire        cur_kill =
    io_redirect_valid
    & (io_redirect_bits_level
       & _io_vecstout_valid_flushItself_T_1 == _io_vecstout_valid_flushItself_T_2
       | cur_kill_differentFlag ^ cur_kill_compare);
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      s1_valid <= 1'h0;
      s1_vecActive <= 1'h1;
      s1_isvec <= 1'h0;
      s2_valid <= 1'h0;
      s2_vecActive <= 1'h1;
      io_feedback_slow_valid_last_REG <= 1'h0;
      s3_valid <= 1'h0;
      sx_valid_1_r <= 1'h0;
    end
    else begin
      s1_valid <= _s0_fire_T_1 | ~(_s1_fire_T_1 | s1_kill) & s1_valid;
      if (_s0_fire_T_1) begin
        s1_vecActive <= s0_vecActive;
        s1_isvec <= io_vecstin_valid;
      end
      s2_valid <= _s1_fire_T_1 | ~(_s2_fire_T_1 | s2_kill) & s2_valid;
      if (_s1_fire_T_1)
        s2_vecActive <= s1_in_vecActive;
      io_feedback_slow_valid_last_REG <= feedback_slow_valid;
      if (_s2_fire_T_1)
        s3_valid <= ~s2_mmio | s2_exception;
      else
        s3_valid <= ~(s3_valid & ~s3_kill | s3_kill) & s3_valid;
      if (_prev_fire_T_4 | sx_valid_1_r & ~cur_kill | cur_kill)
        sx_valid_1_r <= _prev_fire_T_4;
    end
  end // always @(posedge, posedge)
  wire [2:0]  s0_vecstin_alignedType =
    io_vecstin_valid ? io_vecstin_bits_alignedType : 3'h0;
  wire [1:0]  _s0_addr_aligned_T_2 =
    io_vecstin_valid ? s0_vecstin_alignedType[1:0] : s0_uop_fuOpType[1:0];
  wire        s1_out_mmio =
    s1_in_uop_fuOpType == 9'hC | s1_in_uop_fuOpType == 9'hD | s1_in_uop_fuOpType == 9'hE;
  always @(posedge clock) begin
    s1_in_uop_exceptionVec_0 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_0;
    s1_in_uop_exceptionVec_1 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_1;
    s1_in_uop_exceptionVec_2 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_2;
    if (_s0_fire_T_1) begin
      s1_in_uop_exceptionVec_4 <=
        ~io_stin_ready_0 & io_vecstin_valid & io_vecstin_bits_uop_exceptionVec_4;
      s1_in_uop_exceptionVec_5 <=
        ~io_stin_ready_0 & io_vecstin_valid & io_vecstin_bits_uop_exceptionVec_5;
      s1_in_uop_exceptionVec_6 <=
        io_st_mask_out_valid_0
        & ~(_s0_addr_aligned_T_2 == 2'h0 | _s0_addr_aligned_T_2 == 2'h1 & ~(s0_vaddr[0])
            | _s0_addr_aligned_T_2 == 2'h2 & s0_vaddr[1:0] == 2'h0
            | (&_s0_addr_aligned_T_2) & s0_vaddr[2:0] == 3'h0);
      s1_in_uop_exceptionVec_13 <=
        ~io_stin_ready_0 & io_vecstin_valid & io_vecstin_bits_uop_exceptionVec_13;
      s1_in_uop_exceptionVec_21 <=
        ~io_stin_ready_0 & io_vecstin_valid & io_vecstin_bits_uop_exceptionVec_21;
      s1_in_uop_fuType <=
        io_stin_ready_0
          ? io_stin_bits_uop_fuType
          : io_vecstin_valid ? io_vecstin_bits_uop_fuType : 35'h0;
      s1_in_uop_fuOpType <= s0_uop_fuOpType;
      s1_in_uop_uopIdx <=
        io_stin_ready_0 | ~io_vecstin_valid ? 7'h0 : io_vecstin_bits_uop_uopIdx;
      s1_in_uop_lastUop <=
        ~io_stin_ready_0 & io_vecstin_valid & io_vecstin_bits_uop_lastUop;
      s1_in_uop_robIdx_flag <= s0_uop_robIdx_flag;
      s1_in_uop_robIdx_value <= s0_uop_robIdx_value;
      s1_in_uop_sqIdx_flag <=
        io_stin_ready_0
          ? io_stin_bits_uop_sqIdx_flag
          : io_vecstin_valid & io_vecstin_bits_uop_sqIdx_flag;
      s1_in_uop_sqIdx_value <= s0_uop_sqIdx_value;
      s1_in_vaddr <= s0_vaddr;
      s1_in_mask <= s0_mask;
      s1_in_wlineflag <= io_stin_ready_0 & s0_uop_fuOpType == 9'h7;
      s1_in_isvec <= io_vecstin_valid;
      s1_in_is128bit <= s0_vecstin_alignedType[2];
      s1_in_usSecondInv <= io_vecstin_valid & io_vecstin_bits_usSecondInv;
      s1_in_elemIdx <= io_vecstin_valid ? io_vecstin_bits_elemIdx : 8'h0;
      s1_in_mbIndex <= io_vecstin_valid ? io_vecstin_bits_mBIndex : 4'h0;
      s1_in_vecActive <= s0_vecActive;
    end
    s1_in_uop_exceptionVec_8 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_8;
    s1_in_uop_exceptionVec_9 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_9;
    s1_in_uop_exceptionVec_10 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_10;
    s1_in_uop_exceptionVec_11 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_11;
    s1_in_uop_exceptionVec_12 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_12;
    s1_in_uop_exceptionVec_14 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_14;
    s1_in_uop_exceptionVec_16 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_16;
    s1_in_uop_exceptionVec_17 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_17;
    s1_in_uop_exceptionVec_18 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_18;
    s1_in_uop_exceptionVec_19 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_19;
    s1_in_uop_exceptionVec_20 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_20;
    s1_in_uop_exceptionVec_22 <= ~_s0_fire_T_1 & s1_in_uop_exceptionVec_22;
    if (s0_valid)
      io_issue_bits_r_uop_robIdx_value <=
        io_stin_ready_0 ? io_stin_bits_uop_robIdx_value : 8'h0;
    if (_s1_fire_T_1) begin
      s2_in_uop_exceptionVec_3 <= _storeTrigger_io_toStore_breakPointExp;
      s2_in_uop_exceptionVec_6 <= s1_in_uop_exceptionVec_6;
      s2_in_uop_exceptionVec_7 <= s1_out_uop_exceptionVec_7;
      s2_in_uop_exceptionVec_15 <= s1_out_uop_exceptionVec_15;
      s2_in_uop_exceptionVec_23 <= s1_out_uop_exceptionVec_23;
      s2_in_uop_trigger_backendHit_0 <= _storeTrigger_io_toStore_triggerHitVec_0;
      s2_in_uop_trigger_backendHit_1 <= _storeTrigger_io_toStore_triggerHitVec_1;
      s2_in_uop_trigger_backendHit_2 <= _storeTrigger_io_toStore_triggerHitVec_2;
      s2_in_uop_trigger_backendHit_3 <= _storeTrigger_io_toStore_triggerHitVec_3;
      s2_in_uop_trigger_backendCanFire_0 <= _storeTrigger_io_toStore_triggerCanFireVec_0;
      s2_in_uop_trigger_backendCanFire_1 <= _storeTrigger_io_toStore_triggerCanFireVec_1;
      s2_in_uop_trigger_backendCanFire_2 <= _storeTrigger_io_toStore_triggerCanFireVec_2;
      s2_in_uop_trigger_backendCanFire_3 <= _storeTrigger_io_toStore_triggerCanFireVec_3;
      s2_in_uop_fuType <= s1_in_uop_fuType;
      s2_in_uop_robIdx_flag <= s1_in_uop_robIdx_flag;
      s2_in_uop_robIdx_value <= s1_in_uop_robIdx_value;
      s2_in_vaddr <= s1_in_vaddr;
      s2_in_mask <= s1_in_mask;
      s2_in_mmio <= s1_out_mmio;
      s2_in_atomic <= s1_out_mmio;
      s2_in_isvec <= s1_in_isvec;
      s2_in_usSecondInv <= s1_in_usSecondInv;
      s2_in_elemIdx <= s1_in_elemIdx;
      s2_in_mbIndex <= s1_in_mbIndex;
    end
    s2_exception_REG <= ~io_tlb_resp_bits_miss;
    s2_mmio_REG <= ~io_tlb_resp_bits_miss;
    s2_out_uop_exceptionVec_7_REG <= ~io_tlb_resp_bits_miss;
    if (feedback_slow_valid) begin
      io_feedback_slow_bits_r_hit <= ~io_tlb_resp_bits_miss;
      io_feedback_slow_bits_r_sqIdx_flag <= s1_in_uop_sqIdx_flag;
      io_feedback_slow_bits_r_sqIdx_value <= s1_in_uop_sqIdx_value;
    end
    s2_vecFeedback_REG <=
      ~(io_redirect_valid
        & (io_redirect_bits_level
           & _s2_vecFeedback_flushItself_T_1 == _io_vecstout_valid_flushItself_T_2
           | s2_vecFeedback_differentFlag ^ s2_vecFeedback_compare))
      & ~io_tlb_resp_bits_miss;
    if (_s2_fire_T_1) begin
      s3_in_uop_exceptionVec_3 <= s2_in_uop_exceptionVec_3;
      s3_in_uop_exceptionVec_6 <= s2_in_uop_exceptionVec_6;
      s3_in_uop_exceptionVec_7 <= s2_exception_new_vec_7;
      s3_in_uop_exceptionVec_15 <= s2_in_uop_exceptionVec_15;
      s3_in_uop_exceptionVec_23 <= s2_in_uop_exceptionVec_23;
      s3_in_uop_trigger_backendHit_0 <= s2_in_uop_trigger_backendHit_0;
      s3_in_uop_trigger_backendHit_1 <= s2_in_uop_trigger_backendHit_1;
      s3_in_uop_trigger_backendHit_2 <= s2_in_uop_trigger_backendHit_2;
      s3_in_uop_trigger_backendHit_3 <= s2_in_uop_trigger_backendHit_3;
      s3_in_uop_trigger_backendCanFire_0 <= s2_in_uop_trigger_backendCanFire_0;
      s3_in_uop_trigger_backendCanFire_1 <= s2_in_uop_trigger_backendCanFire_1;
      s3_in_uop_trigger_backendCanFire_2 <= s2_in_uop_trigger_backendCanFire_2;
      s3_in_uop_trigger_backendCanFire_3 <= s2_in_uop_trigger_backendCanFire_3;
      s3_in_uop_fuType <= s2_in_uop_fuType;
      s3_in_uop_robIdx_flag <= s2_in_uop_robIdx_flag;
      s3_in_uop_robIdx_value <= s2_in_uop_robIdx_value;
      s3_in_vaddr <= s2_in_vaddr;
      s3_in_mask <= s2_in_mask;
      s3_in_usSecondInv <= s2_in_usSecondInv;
      s3_in_elemIdx <= s2_in_elemIdx;
      s3_in_mbIndex <= s2_in_mbIndex;
      s3_vecFeedback <= s2_vecFeedback_REG & s2_in_isvec;
    end
    if (_prev_fire_T_4) begin
      sx_in_1_r_output_uop_exceptionVec_3 <= s3_in_uop_exceptionVec_3;
      sx_in_1_r_output_uop_exceptionVec_6 <= s3_in_uop_exceptionVec_6;
      sx_in_1_r_output_uop_exceptionVec_7 <= s3_in_uop_exceptionVec_7;
      sx_in_1_r_output_uop_exceptionVec_15 <= s3_in_uop_exceptionVec_15;
      sx_in_1_r_output_uop_exceptionVec_23 <= s3_in_uop_exceptionVec_23;
      sx_in_1_r_output_uop_trigger_backendHit_0 <= s3_in_uop_trigger_backendHit_0;
      sx_in_1_r_output_uop_trigger_backendHit_1 <= s3_in_uop_trigger_backendHit_1;
      sx_in_1_r_output_uop_trigger_backendHit_2 <= s3_in_uop_trigger_backendHit_2;
      sx_in_1_r_output_uop_trigger_backendHit_3 <= s3_in_uop_trigger_backendHit_3;
      sx_in_1_r_output_uop_trigger_backendCanFire_0 <= s3_in_uop_trigger_backendCanFire_0;
      sx_in_1_r_output_uop_trigger_backendCanFire_1 <= s3_in_uop_trigger_backendCanFire_1;
      sx_in_1_r_output_uop_trigger_backendCanFire_2 <= s3_in_uop_trigger_backendCanFire_2;
      sx_in_1_r_output_uop_trigger_backendCanFire_3 <= s3_in_uop_trigger_backendCanFire_3;
      sx_in_1_r_output_uop_fuType <= s3_in_uop_fuType;
      sx_in_1_r_output_uop_robIdx_flag <= s3_in_uop_robIdx_flag;
      sx_in_1_r_output_uop_robIdx_value <= s3_in_uop_robIdx_value;
      sx_in_1_r_vecFeedback <= s3_vecFeedback;
      sx_in_1_r_usSecondInv <= s3_in_usSecondInv;
      sx_in_1_r_elemIdx <= s3_in_elemIdx;
      sx_in_1_r_mbIndex <= s3_in_mbIndex;
      sx_in_1_r_mask <= s3_in_mask;
      sx_in_1_r_vaddr <= s3_in_vaddr;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:315];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [8:0] i = 9'h0; i < 9'h13C; i += 9'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        s1_valid = _RANDOM[9'h2][0];
        s1_in_uop_exceptionVec_0 = _RANDOM[9'h4][20];
        s1_in_uop_exceptionVec_1 = _RANDOM[9'h4][21];
        s1_in_uop_exceptionVec_2 = _RANDOM[9'h4][22];
        s1_in_uop_exceptionVec_4 = _RANDOM[9'h4][24];
        s1_in_uop_exceptionVec_5 = _RANDOM[9'h4][25];
        s1_in_uop_exceptionVec_6 = _RANDOM[9'h4][26];
        s1_in_uop_exceptionVec_8 = _RANDOM[9'h4][28];
        s1_in_uop_exceptionVec_9 = _RANDOM[9'h4][29];
        s1_in_uop_exceptionVec_10 = _RANDOM[9'h4][30];
        s1_in_uop_exceptionVec_11 = _RANDOM[9'h4][31];
        s1_in_uop_exceptionVec_12 = _RANDOM[9'h5][0];
        s1_in_uop_exceptionVec_13 = _RANDOM[9'h5][1];
        s1_in_uop_exceptionVec_14 = _RANDOM[9'h5][2];
        s1_in_uop_exceptionVec_16 = _RANDOM[9'h5][4];
        s1_in_uop_exceptionVec_17 = _RANDOM[9'h5][5];
        s1_in_uop_exceptionVec_18 = _RANDOM[9'h5][6];
        s1_in_uop_exceptionVec_19 = _RANDOM[9'h5][7];
        s1_in_uop_exceptionVec_20 = _RANDOM[9'h5][8];
        s1_in_uop_exceptionVec_21 = _RANDOM[9'h5][9];
        s1_in_uop_exceptionVec_22 = _RANDOM[9'h5][10];
        s1_in_uop_fuType = {_RANDOM[9'h7][31:10], _RANDOM[9'h8][12:0]};
        s1_in_uop_fuOpType = _RANDOM[9'h8][21:13];
        s1_in_uop_uopIdx = {_RANDOM[9'h10][31:28], _RANDOM[9'h11][2:0]};
        s1_in_uop_lastUop = _RANDOM[9'h11][5];
        s1_in_uop_robIdx_flag = _RANDOM[9'h14][22];
        s1_in_uop_robIdx_value = _RANDOM[9'h14][30:23];
        s1_in_uop_sqIdx_flag = _RANDOM[9'h28][0];
        s1_in_uop_sqIdx_value = _RANDOM[9'h28][6:1];
        s1_in_vaddr = {_RANDOM[9'h28][31:14], _RANDOM[9'h29][22:0]};
        s1_in_mask = _RANDOM[9'h2C][19:4];
        s1_in_wlineflag = _RANDOM[9'h30][21];
        s1_in_isvec = _RANDOM[9'h35][14];
        s1_in_is128bit = _RANDOM[9'h35][16];
        s1_in_usSecondInv = _RANDOM[9'h35][18];
        s1_in_elemIdx = _RANDOM[9'h35][26:19];
        s1_in_mbIndex = {_RANDOM[9'h35][31:30], _RANDOM[9'h36][1:0]};
        s1_in_vecActive = _RANDOM[9'h36][14];
        s1_vecActive = _RANDOM[9'h37][20];
        s1_isvec = _RANDOM[9'h37][21];
        io_issue_bits_r_uop_robIdx_value = _RANDOM[9'h4A][19:12];
        s2_valid = _RANDOM[9'h66][8];
        s2_in_uop_exceptionVec_3 = _RANDOM[9'h68][31];
        s2_in_uop_exceptionVec_6 = _RANDOM[9'h69][2];
        s2_in_uop_exceptionVec_7 = _RANDOM[9'h69][3];
        s2_in_uop_exceptionVec_15 = _RANDOM[9'h69][11];
        s2_in_uop_exceptionVec_23 = _RANDOM[9'h69][19];
        s2_in_uop_trigger_backendHit_0 = _RANDOM[9'h69][29];
        s2_in_uop_trigger_backendHit_1 = _RANDOM[9'h69][30];
        s2_in_uop_trigger_backendHit_2 = _RANDOM[9'h69][31];
        s2_in_uop_trigger_backendHit_3 = _RANDOM[9'h6A][0];
        s2_in_uop_trigger_backendCanFire_0 = _RANDOM[9'h6A][1];
        s2_in_uop_trigger_backendCanFire_1 = _RANDOM[9'h6A][2];
        s2_in_uop_trigger_backendCanFire_2 = _RANDOM[9'h6A][3];
        s2_in_uop_trigger_backendCanFire_3 = _RANDOM[9'h6A][4];
        s2_in_uop_fuType = {_RANDOM[9'h6B][31:18], _RANDOM[9'h6C][20:0]};
        s2_in_uop_robIdx_flag = _RANDOM[9'h78][30];
        s2_in_uop_robIdx_value = {_RANDOM[9'h78][31], _RANDOM[9'h79][6:0]};
        s2_in_vaddr = {_RANDOM[9'h8C][31:22], _RANDOM[9'h8D][30:0]};
        s2_in_mask = _RANDOM[9'h90][27:12];
        s2_in_mmio = _RANDOM[9'h95][2];
        s2_in_atomic = _RANDOM[9'h95][3];
        s2_in_isvec = _RANDOM[9'h99][22];
        s2_in_usSecondInv = _RANDOM[9'h99][26];
        s2_in_elemIdx = {_RANDOM[9'h99][31:27], _RANDOM[9'h9A][2:0]};
        s2_in_mbIndex = _RANDOM[9'h9A][9:6];
        s2_vecActive = _RANDOM[9'h9B][28];
        s2_exception_REG = _RANDOM[9'h9B][29];
        s2_mmio_REG = _RANDOM[9'h9B][30];
        s2_out_uop_exceptionVec_7_REG = _RANDOM[9'h9B][31];
        io_feedback_slow_valid_last_REG = _RANDOM[9'h9C][0];
        io_feedback_slow_bits_r_hit = _RANDOM[9'h9C][10];
        io_feedback_slow_bits_r_sqIdx_flag = _RANDOM[9'h9C][23];
        io_feedback_slow_bits_r_sqIdx_value = _RANDOM[9'h9C][29:24];
        s2_vecFeedback_REG = _RANDOM[9'h9D][6];
        s3_valid = _RANDOM[9'hD2][0];
        s3_in_uop_exceptionVec_3 = _RANDOM[9'hD4][23];
        s3_in_uop_exceptionVec_6 = _RANDOM[9'hD4][26];
        s3_in_uop_exceptionVec_7 = _RANDOM[9'hD4][27];
        s3_in_uop_exceptionVec_15 = _RANDOM[9'hD5][3];
        s3_in_uop_exceptionVec_23 = _RANDOM[9'hD5][11];
        s3_in_uop_trigger_backendHit_0 = _RANDOM[9'hD5][21];
        s3_in_uop_trigger_backendHit_1 = _RANDOM[9'hD5][22];
        s3_in_uop_trigger_backendHit_2 = _RANDOM[9'hD5][23];
        s3_in_uop_trigger_backendHit_3 = _RANDOM[9'hD5][24];
        s3_in_uop_trigger_backendCanFire_0 = _RANDOM[9'hD5][25];
        s3_in_uop_trigger_backendCanFire_1 = _RANDOM[9'hD5][26];
        s3_in_uop_trigger_backendCanFire_2 = _RANDOM[9'hD5][27];
        s3_in_uop_trigger_backendCanFire_3 = _RANDOM[9'hD5][28];
        s3_in_uop_fuType = {_RANDOM[9'hD7][31:10], _RANDOM[9'hD8][12:0]};
        s3_in_uop_robIdx_flag = _RANDOM[9'hE4][22];
        s3_in_uop_robIdx_value = _RANDOM[9'hE4][30:23];
        s3_in_vaddr = {_RANDOM[9'hF8][31:14], _RANDOM[9'hF9][22:0]};
        s3_in_mask = _RANDOM[9'hFC][19:4];
        s3_in_usSecondInv = _RANDOM[9'h105][18];
        s3_in_elemIdx = _RANDOM[9'h105][26:19];
        s3_in_mbIndex = {_RANDOM[9'h105][31:30], _RANDOM[9'h106][1:0]};
        s3_vecFeedback = _RANDOM[9'h107][20];
        sx_valid_1_r = _RANDOM[9'h107][21];
        sx_in_1_r_output_uop_exceptionVec_3 = _RANDOM[9'h10A][12];
        sx_in_1_r_output_uop_exceptionVec_6 = _RANDOM[9'h10A][15];
        sx_in_1_r_output_uop_exceptionVec_7 = _RANDOM[9'h10A][16];
        sx_in_1_r_output_uop_exceptionVec_15 = _RANDOM[9'h10A][24];
        sx_in_1_r_output_uop_exceptionVec_23 = _RANDOM[9'h10B][0];
        sx_in_1_r_output_uop_trigger_backendHit_0 = _RANDOM[9'h10B][10];
        sx_in_1_r_output_uop_trigger_backendHit_1 = _RANDOM[9'h10B][11];
        sx_in_1_r_output_uop_trigger_backendHit_2 = _RANDOM[9'h10B][12];
        sx_in_1_r_output_uop_trigger_backendHit_3 = _RANDOM[9'h10B][13];
        sx_in_1_r_output_uop_trigger_backendCanFire_0 = _RANDOM[9'h10B][14];
        sx_in_1_r_output_uop_trigger_backendCanFire_1 = _RANDOM[9'h10B][15];
        sx_in_1_r_output_uop_trigger_backendCanFire_2 = _RANDOM[9'h10B][16];
        sx_in_1_r_output_uop_trigger_backendCanFire_3 = _RANDOM[9'h10B][17];
        sx_in_1_r_output_uop_fuType =
          {_RANDOM[9'h10C][31], _RANDOM[9'h10D], _RANDOM[9'h10E][1:0]};
        sx_in_1_r_output_uop_robIdx_flag = _RANDOM[9'h11A][11];
        sx_in_1_r_output_uop_robIdx_value = _RANDOM[9'h11A][19:12];
        sx_in_1_r_vecFeedback = _RANDOM[9'h138][24];
        sx_in_1_r_usSecondInv = _RANDOM[9'h138][26];
        sx_in_1_r_elemIdx = {_RANDOM[9'h138][31:27], _RANDOM[9'h139][2:0]};
        sx_in_1_r_mbIndex = _RANDOM[9'h139][9:6];
        sx_in_1_r_mask = _RANDOM[9'h139][25:10];
        sx_in_1_r_vaddr = {_RANDOM[9'h139][31:26], _RANDOM[9'h13A], _RANDOM[9'h13B][2:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        s1_valid = 1'h0;
        s1_vecActive = 1'h1;
        s1_isvec = 1'h0;
        s2_valid = 1'h0;
        s2_vecActive = 1'h1;
        io_feedback_slow_valid_last_REG = 1'h0;
        s3_valid = 1'h0;
        sx_valid_1_r = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  StoreTrigger storeTrigger (
    .io_fromCsrTrigger_tdataVec_0_matchType (io_fromCsrTrigger_tdataVec_0_matchType),
    .io_fromCsrTrigger_tdataVec_0_select    (io_fromCsrTrigger_tdataVec_0_select),
    .io_fromCsrTrigger_tdataVec_0_timing    (io_fromCsrTrigger_tdataVec_0_timing),
    .io_fromCsrTrigger_tdataVec_0_action    (io_fromCsrTrigger_tdataVec_0_action),
    .io_fromCsrTrigger_tdataVec_0_chain     (io_fromCsrTrigger_tdataVec_0_chain),
    .io_fromCsrTrigger_tdataVec_0_store     (io_fromCsrTrigger_tdataVec_0_store),
    .io_fromCsrTrigger_tdataVec_0_tdata2    (io_fromCsrTrigger_tdataVec_0_tdata2),
    .io_fromCsrTrigger_tdataVec_1_matchType (io_fromCsrTrigger_tdataVec_1_matchType),
    .io_fromCsrTrigger_tdataVec_1_select    (io_fromCsrTrigger_tdataVec_1_select),
    .io_fromCsrTrigger_tdataVec_1_timing    (io_fromCsrTrigger_tdataVec_1_timing),
    .io_fromCsrTrigger_tdataVec_1_action    (io_fromCsrTrigger_tdataVec_1_action),
    .io_fromCsrTrigger_tdataVec_1_chain     (io_fromCsrTrigger_tdataVec_1_chain),
    .io_fromCsrTrigger_tdataVec_1_store     (io_fromCsrTrigger_tdataVec_1_store),
    .io_fromCsrTrigger_tdataVec_1_tdata2    (io_fromCsrTrigger_tdataVec_1_tdata2),
    .io_fromCsrTrigger_tdataVec_2_matchType (io_fromCsrTrigger_tdataVec_2_matchType),
    .io_fromCsrTrigger_tdataVec_2_select    (io_fromCsrTrigger_tdataVec_2_select),
    .io_fromCsrTrigger_tdataVec_2_timing    (io_fromCsrTrigger_tdataVec_2_timing),
    .io_fromCsrTrigger_tdataVec_2_action    (io_fromCsrTrigger_tdataVec_2_action),
    .io_fromCsrTrigger_tdataVec_2_chain     (io_fromCsrTrigger_tdataVec_2_chain),
    .io_fromCsrTrigger_tdataVec_2_store     (io_fromCsrTrigger_tdataVec_2_store),
    .io_fromCsrTrigger_tdataVec_2_tdata2    (io_fromCsrTrigger_tdataVec_2_tdata2),
    .io_fromCsrTrigger_tdataVec_3_matchType (io_fromCsrTrigger_tdataVec_3_matchType),
    .io_fromCsrTrigger_tdataVec_3_select    (io_fromCsrTrigger_tdataVec_3_select),
    .io_fromCsrTrigger_tdataVec_3_timing    (io_fromCsrTrigger_tdataVec_3_timing),
    .io_fromCsrTrigger_tdataVec_3_action    (io_fromCsrTrigger_tdataVec_3_action),
    .io_fromCsrTrigger_tdataVec_3_chain     (io_fromCsrTrigger_tdataVec_3_chain),
    .io_fromCsrTrigger_tdataVec_3_store     (io_fromCsrTrigger_tdataVec_3_store),
    .io_fromCsrTrigger_tdataVec_3_tdata2    (io_fromCsrTrigger_tdataVec_3_tdata2),
    .io_fromCsrTrigger_tEnableVec_0         (io_fromCsrTrigger_tEnableVec_0),
    .io_fromCsrTrigger_tEnableVec_1         (io_fromCsrTrigger_tEnableVec_1),
    .io_fromCsrTrigger_tEnableVec_2         (io_fromCsrTrigger_tEnableVec_2),
    .io_fromCsrTrigger_tEnableVec_3         (io_fromCsrTrigger_tEnableVec_3),
    .io_fromCsrTrigger_triggerCanRaiseBpExp (io_fromCsrTrigger_triggerCanRaiseBpExp),
    .io_fromStore_vaddr                     (s1_in_vaddr),
    .io_toStore_triggerHitVec_0             (_storeTrigger_io_toStore_triggerHitVec_0),
    .io_toStore_triggerHitVec_1             (_storeTrigger_io_toStore_triggerHitVec_1),
    .io_toStore_triggerHitVec_2             (_storeTrigger_io_toStore_triggerHitVec_2),
    .io_toStore_triggerHitVec_3             (_storeTrigger_io_toStore_triggerHitVec_3),
    .io_toStore_triggerCanFireVec_0
      (_storeTrigger_io_toStore_triggerCanFireVec_0),
    .io_toStore_triggerCanFireVec_1
      (_storeTrigger_io_toStore_triggerCanFireVec_1),
    .io_toStore_triggerCanFireVec_2
      (_storeTrigger_io_toStore_triggerCanFireVec_2),
    .io_toStore_triggerCanFireVec_3
      (_storeTrigger_io_toStore_triggerCanFireVec_3),
    .io_toStore_breakPointExp               (_storeTrigger_io_toStore_breakPointExp)
  );
  assign io_stin_ready = io_stin_ready_0;
  assign io_issue_valid = s1_valid & ~io_tlb_resp_bits_miss & ~s1_isvec;
  assign io_issue_bits_uop_robIdx_value = io_issue_bits_r_uop_robIdx_value;
  assign io_tlb_req_valid = s0_valid;
  assign io_tlb_req_bits_vaddr = s0_vaddr;
  assign io_tlb_req_bits_hyperinst =
    s0_uop_fuOpType[4] & ~(s0_uop_fuOpType[5]) & s0_uop_fuOpType[8:7] == 2'h0;
  assign io_tlb_req_bits_debug_robIdx_flag = io_st_mask_out_valid_0 & s0_uop_robIdx_flag;
  assign io_tlb_req_bits_debug_robIdx_value =
    io_st_mask_out_valid_0 ? s0_uop_robIdx_value : 8'h0;
  assign io_lsq_valid = s1_valid;
  assign io_lsq_bits_uop_exceptionVec_0 = s1_in_uop_exceptionVec_0;
  assign io_lsq_bits_uop_exceptionVec_1 = s1_in_uop_exceptionVec_1;
  assign io_lsq_bits_uop_exceptionVec_2 = s1_in_uop_exceptionVec_2;
  assign io_lsq_bits_uop_exceptionVec_3 = _storeTrigger_io_toStore_breakPointExp;
  assign io_lsq_bits_uop_exceptionVec_4 = s1_in_uop_exceptionVec_4;
  assign io_lsq_bits_uop_exceptionVec_5 = s1_in_uop_exceptionVec_5;
  assign io_lsq_bits_uop_exceptionVec_6 = s1_in_uop_exceptionVec_6;
  assign io_lsq_bits_uop_exceptionVec_7 = s1_out_uop_exceptionVec_7;
  assign io_lsq_bits_uop_exceptionVec_8 = s1_in_uop_exceptionVec_8;
  assign io_lsq_bits_uop_exceptionVec_9 = s1_in_uop_exceptionVec_9;
  assign io_lsq_bits_uop_exceptionVec_10 = s1_in_uop_exceptionVec_10;
  assign io_lsq_bits_uop_exceptionVec_11 = s1_in_uop_exceptionVec_11;
  assign io_lsq_bits_uop_exceptionVec_12 = s1_in_uop_exceptionVec_12;
  assign io_lsq_bits_uop_exceptionVec_13 = s1_in_uop_exceptionVec_13;
  assign io_lsq_bits_uop_exceptionVec_14 = s1_in_uop_exceptionVec_14;
  assign io_lsq_bits_uop_exceptionVec_15 = s1_out_uop_exceptionVec_15;
  assign io_lsq_bits_uop_exceptionVec_16 = s1_in_uop_exceptionVec_16;
  assign io_lsq_bits_uop_exceptionVec_17 = s1_in_uop_exceptionVec_17;
  assign io_lsq_bits_uop_exceptionVec_18 = s1_in_uop_exceptionVec_18;
  assign io_lsq_bits_uop_exceptionVec_19 = s1_in_uop_exceptionVec_19;
  assign io_lsq_bits_uop_exceptionVec_20 = s1_in_uop_exceptionVec_20;
  assign io_lsq_bits_uop_exceptionVec_21 = s1_in_uop_exceptionVec_21;
  assign io_lsq_bits_uop_exceptionVec_22 = s1_in_uop_exceptionVec_22;
  assign io_lsq_bits_uop_exceptionVec_23 = s1_out_uop_exceptionVec_23;
  assign io_lsq_bits_uop_trigger_backendHit_0 = _storeTrigger_io_toStore_triggerHitVec_0;
  assign io_lsq_bits_uop_trigger_backendHit_1 = _storeTrigger_io_toStore_triggerHitVec_1;
  assign io_lsq_bits_uop_trigger_backendHit_2 = _storeTrigger_io_toStore_triggerHitVec_2;
  assign io_lsq_bits_uop_trigger_backendHit_3 = _storeTrigger_io_toStore_triggerHitVec_3;
  assign io_lsq_bits_uop_trigger_backendCanFire_0 =
    _storeTrigger_io_toStore_triggerCanFireVec_0;
  assign io_lsq_bits_uop_trigger_backendCanFire_1 =
    _storeTrigger_io_toStore_triggerCanFireVec_1;
  assign io_lsq_bits_uop_trigger_backendCanFire_2 =
    _storeTrigger_io_toStore_triggerCanFireVec_2;
  assign io_lsq_bits_uop_trigger_backendCanFire_3 =
    _storeTrigger_io_toStore_triggerCanFireVec_3;
  assign io_lsq_bits_uop_fuOpType = s1_in_uop_fuOpType;
  assign io_lsq_bits_uop_uopIdx = s1_in_uop_uopIdx;
  assign io_lsq_bits_uop_lastUop = s1_in_uop_lastUop;
  assign io_lsq_bits_uop_robIdx_flag = s1_in_uop_robIdx_flag;
  assign io_lsq_bits_uop_robIdx_value = s1_in_uop_robIdx_value;
  assign io_lsq_bits_uop_sqIdx_flag = s1_in_uop_sqIdx_flag;
  assign io_lsq_bits_uop_sqIdx_value = s1_in_uop_sqIdx_value;
  assign io_lsq_bits_vaddr = s1_in_vaddr;
  assign io_lsq_bits_paddr = io_tlb_resp_bits_paddr_0;
  assign io_lsq_bits_gpaddr = io_tlb_resp_bits_gpaddr_0;
  assign io_lsq_bits_mask = s1_in_mask;
  assign io_lsq_bits_wlineflag = s1_in_wlineflag;
  assign io_lsq_bits_miss = io_tlb_resp_bits_miss;
  assign io_lsq_bits_isvec = s1_in_isvec;
  assign io_lsq_replenish_af = io_pmp_st & ~s2_in_isvec & ~s2_kill;
  assign io_lsq_replenish_mmio = s2_mmio & ~s2_exception;
  assign io_lsq_replenish_atomic = s2_in_atomic | io_pmp_atomic;
  assign io_feedback_slow_valid = io_feedback_slow_valid_last_REG;
  assign io_feedback_slow_bits_hit = io_feedback_slow_bits_r_hit;
  assign io_feedback_slow_bits_sqIdx_flag = io_feedback_slow_bits_r_sqIdx_flag;
  assign io_feedback_slow_bits_sqIdx_value = io_feedback_slow_bits_r_sqIdx_value;
  assign io_stld_nuke_query_valid = s1_valid & ~io_tlb_resp_bits_miss;
  assign io_stld_nuke_query_bits_robIdx_flag = s1_in_uop_robIdx_flag;
  assign io_stld_nuke_query_bits_robIdx_value = s1_in_uop_robIdx_value;
  assign io_stld_nuke_query_bits_paddr = io_tlb_resp_bits_paddr_0;
  assign io_stld_nuke_query_bits_mask = s1_in_mask;
  assign io_stld_nuke_query_bits_matchLine = s1_in_isvec & s1_in_is128bit;
  assign io_stout_valid =
    sx_valid_1_r
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & _io_vecstout_valid_flushItself_T_1 == _io_vecstout_valid_flushItself_T_2
           | cur_kill_differentFlag ^ cur_kill_compare))
    & sx_in_1_r_output_uop_fuType[16];
  assign io_stout_bits_uop_exceptionVec_3 = sx_in_1_r_output_uop_exceptionVec_3;
  assign io_stout_bits_uop_exceptionVec_6 = sx_in_1_r_output_uop_exceptionVec_6;
  assign io_stout_bits_uop_exceptionVec_7 = sx_in_1_r_output_uop_exceptionVec_7;
  assign io_stout_bits_uop_exceptionVec_15 = sx_in_1_r_output_uop_exceptionVec_15;
  assign io_stout_bits_uop_exceptionVec_23 = sx_in_1_r_output_uop_exceptionVec_23;
  assign io_stout_bits_uop_trigger_backendHit_0 =
    sx_in_1_r_output_uop_trigger_backendHit_0;
  assign io_stout_bits_uop_trigger_backendHit_1 =
    sx_in_1_r_output_uop_trigger_backendHit_1;
  assign io_stout_bits_uop_trigger_backendHit_2 =
    sx_in_1_r_output_uop_trigger_backendHit_2;
  assign io_stout_bits_uop_trigger_backendHit_3 =
    sx_in_1_r_output_uop_trigger_backendHit_3;
  assign io_stout_bits_uop_trigger_backendCanFire_0 =
    sx_in_1_r_output_uop_trigger_backendCanFire_0;
  assign io_stout_bits_uop_trigger_backendCanFire_1 =
    sx_in_1_r_output_uop_trigger_backendCanFire_1;
  assign io_stout_bits_uop_trigger_backendCanFire_2 =
    sx_in_1_r_output_uop_trigger_backendCanFire_2;
  assign io_stout_bits_uop_trigger_backendCanFire_3 =
    sx_in_1_r_output_uop_trigger_backendCanFire_3;
  assign io_stout_bits_uop_robIdx_flag = sx_in_1_r_output_uop_robIdx_flag;
  assign io_stout_bits_uop_robIdx_value = sx_in_1_r_output_uop_robIdx_value;
  assign io_vecstout_valid =
    sx_valid_1_r
    & ~(io_redirect_valid
        & (io_redirect_bits_level
           & _io_vecstout_valid_flushItself_T_1 == _io_vecstout_valid_flushItself_T_2
           | cur_kill_differentFlag ^ cur_kill_compare))
    & (sx_in_1_r_output_uop_fuType[32] | sx_in_1_r_output_uop_fuType[34]);
  assign io_vecstout_bits_mBIndex = sx_in_1_r_mbIndex;
  assign io_vecstout_bits_hit = sx_in_1_r_vecFeedback;
  assign io_vecstout_bits_exceptionVec_6 = sx_in_1_r_output_uop_exceptionVec_6;
  assign io_vecstout_bits_exceptionVec_7 = sx_in_1_r_output_uop_exceptionVec_7;
  assign io_vecstout_bits_exceptionVec_15 = sx_in_1_r_output_uop_exceptionVec_15;
  assign io_vecstout_bits_exceptionVec_23 = sx_in_1_r_output_uop_exceptionVec_23;
  assign io_vecstout_bits_vaddr = sx_in_1_r_vaddr;
  assign io_vecstout_bits_usSecondInv = sx_in_1_r_usSecondInv;
  assign io_vecstout_bits_elemIdx = sx_in_1_r_elemIdx;
  assign io_vecstout_bits_mask = sx_in_1_r_mask;
  assign io_st_mask_out_valid = io_st_mask_out_valid_0;
  assign io_st_mask_out_bits_sqIdx_value = s0_uop_sqIdx_value;
  assign io_st_mask_out_bits_mask = s0_mask;
  assign io_vecstin_ready = io_vecstin_valid;
endmodule

