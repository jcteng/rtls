// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TrapEntryHSEventModule(
  input         valid,
  input         in_causeNO_Interrupt,
  input  [62:0] in_causeNO_ExceptionCode,
  input  [40:0] in_trapPc,
  input  [40:0] in_trapPcGPA,
  input         in_isCrossPageIPF,
  input         in_isHls,
  input  [1:0]  in_iMode_PRVM,
  input         in_iMode_V,
  input  [1:0]  in_dMode_PRVM,
  input         in_dMode_V,
  input  [1:0]  in_privState_PRVM,
  input         in_privState_V,
  input         in_hstatus_SPVP,
  input         in_sstatus_SIE,
  input  [40:0] in_pcFromXtvec,
  input  [3:0]  in_satp_MODE,
  input  [3:0]  in_vsatp_MODE,
  input  [3:0]  in_hgatp_MODE,
  input  [40:0] in_memExceptionVAddr,
  input  [40:0] in_memExceptionGPAddr,
  output        out_privState_valid,
  output [1:0]  out_privState_bits_PRVM,
  output        out_privState_bits_V,
  output        out_mstatus_valid,
  output        out_mstatus_bits_SIE,
  output        out_mstatus_bits_MIE,
  output        out_mstatus_bits_SPIE,
  output        out_mstatus_bits_UBE,
  output        out_mstatus_bits_MPIE,
  output        out_mstatus_bits_SPP,
  output [1:0]  out_mstatus_bits_VS,
  output [1:0]  out_mstatus_bits_MPP,
  output [1:0]  out_mstatus_bits_FS,
  output [1:0]  out_mstatus_bits_XS,
  output        out_mstatus_bits_MPRV,
  output        out_mstatus_bits_SUM,
  output        out_mstatus_bits_MXR,
  output        out_mstatus_bits_TVM,
  output        out_mstatus_bits_TW,
  output        out_mstatus_bits_TSR,
  output [1:0]  out_mstatus_bits_UXL,
  output [1:0]  out_mstatus_bits_SXL,
  output        out_mstatus_bits_SBE,
  output        out_mstatus_bits_MBE,
  output        out_mstatus_bits_GVA,
  output        out_mstatus_bits_MPV,
  output        out_mstatus_bits_SD,
  output        out_hstatus_valid,
  output        out_hstatus_bits_VSBE,
  output        out_hstatus_bits_GVA,
  output        out_hstatus_bits_SPV,
  output        out_hstatus_bits_SPVP,
  output        out_hstatus_bits_HU,
  output [5:0]  out_hstatus_bits_VGEIN,
  output        out_hstatus_bits_VTVM,
  output        out_hstatus_bits_VTW,
  output        out_hstatus_bits_VTSR,
  output [1:0]  out_hstatus_bits_VSXL,
  output        out_sepc_valid,
  output [62:0] out_sepc_bits_epc,
  output        out_scause_valid,
  output        out_scause_bits_Interrupt,
  output [62:0] out_scause_bits_ExceptionCode,
  output        out_stval_valid,
  output [63:0] out_stval_bits_ALL,
  output        out_htval_valid,
  output [63:0] out_htval_bits_ALL,
  output        out_htinst_valid,
  output [63:0] out_htinst_bits_ALL,
  output        out_targetPc_valid,
  output [40:0] out_targetPc_bits
);

  wire        trapPC_isBare_v_PrvmIsM = &in_iMode_PRVM;
  wire        trapPC_isBare_isModeM = trapPC_isBare_v_PrvmIsM;
  wire        trapPC_isBare_PrvmIsU = in_iMode_PRVM == 2'h0;
  wire        trapPC_isBare_PrvmIsS = in_iMode_PRVM == 2'h1;
  wire        _trapPC_isSv48_T = trapPC_isBare_PrvmIsU | trapPC_isBare_PrvmIsS;
  wire        _trapMemVA_isBare_T_5 = in_satp_MODE == 4'h0;
  wire        _trapMemVA_isSv48x4_T_2 = in_vsatp_MODE == 4'h0;
  wire        _trapMemVA_isBare_T_12 = in_hgatp_MODE == 4'h0;
  wire        _trapMemVA_isSv39_T_5 = in_satp_MODE == 4'h8;
  wire        _trapMemVA_isSv39_T_9 = in_vsatp_MODE == 4'h8;
  wire        _trapMemVA_isSv39x4_T_4 = in_hgatp_MODE == 4'h8;
  wire [63:0] trapPC =
    (trapPC_isBare_isModeM | _trapPC_isSv48_T & ~in_iMode_V & _trapMemVA_isBare_T_5
     | in_iMode_V & _trapMemVA_isSv48x4_T_2 & _trapMemVA_isBare_T_12
       ? {28'h0, in_trapPc[35:0]}
       : 64'h0)
    | (_trapPC_isSv48_T & ~in_iMode_V & _trapMemVA_isSv39_T_5 | in_iMode_V
       & _trapMemVA_isSv39_T_9
         ? {{25{in_trapPc[38]}}, in_trapPc[38:0]}
         : 64'h0)
    | (in_iMode_V & _trapMemVA_isSv48x4_T_2 & _trapMemVA_isSv39x4_T_4
         ? {{23{in_trapPc[40]}}, in_trapPc}
         : 64'h0);
  wire [22:0] _trapPCGPA_T = {23{in_trapPcGPA[40]}};
  wire        trapMemVA_isBare_v_PrvmIsM = &in_dMode_PRVM;
  wire        trapMemVA_isBare_isModeM = trapMemVA_isBare_v_PrvmIsM;
  wire        trapMemVA_isBare_PrvmIsU = in_dMode_PRVM == 2'h0;
  wire        trapMemVA_isBare_PrvmIsS = in_dMode_PRVM == 2'h1;
  wire        _trapMemVA_isSv48_T = trapMemVA_isBare_PrvmIsU | trapMemVA_isBare_PrvmIsS;
  wire [63:0] trapMemVA =
    (trapMemVA_isBare_isModeM | _trapMemVA_isSv48_T & ~in_dMode_V & _trapMemVA_isBare_T_5
     | in_dMode_V & _trapMemVA_isSv48x4_T_2 & _trapMemVA_isBare_T_12
       ? {28'h0, in_memExceptionVAddr[35:0]}
       : 64'h0)
    | (_trapMemVA_isSv48_T & ~in_dMode_V & _trapMemVA_isSv39_T_5 | in_dMode_V
       & _trapMemVA_isSv39_T_9
         ? {{25{in_memExceptionVAddr[38]}}, in_memExceptionVAddr[38:0]}
         : 64'h0)
    | (in_dMode_V & _trapMemVA_isSv48x4_T_2 & _trapMemVA_isSv39x4_T_4
         ? {{23{in_memExceptionVAddr[40]}}, in_memExceptionVAddr}
         : 64'h0);
  wire        isFetchExcp =
    ~in_causeNO_Interrupt
    & (in_causeNO_ExceptionCode == 63'h0 | in_causeNO_ExceptionCode == 63'h1
       | in_causeNO_ExceptionCode == 63'hC);
  wire        isMemExcp =
    ~in_causeNO_Interrupt
    & (in_causeNO_ExceptionCode == 63'h4 | in_causeNO_ExceptionCode == 63'h5
       | in_causeNO_ExceptionCode == 63'hD | in_causeNO_ExceptionCode == 63'h6
       | in_causeNO_ExceptionCode == 63'h7 | in_causeNO_ExceptionCode == 63'hF);
  wire        isBpExcp = ~in_causeNO_Interrupt & in_causeNO_ExceptionCode == 63'h3;
  wire        isLSGuestExcp =
    ~in_causeNO_Interrupt
    & (in_causeNO_ExceptionCode == 63'h15 | in_causeNO_ExceptionCode == 63'h17);
  wire        isFetchGuestExcp =
    ~in_causeNO_Interrupt & in_causeNO_ExceptionCode == 63'h14;
  wire        _tvalFillPcPlus2_T = isFetchExcp | isFetchGuestExcp;
  wire        _tval_T_4 = isMemExcp & in_dMode_V;
  wire        tvalFillGVA =
    ~in_causeNO_Interrupt & in_isHls & isMemExcp | isLSGuestExcp | isFetchGuestExcp
    | (isFetchExcp | isBpExcp) & in_iMode_V | _tval_T_4;
  wire [63:0] _tval2_T_1 = 64'({_trapPCGPA_T, in_trapPcGPA} + 64'h2);
  assign out_privState_valid = valid;
  assign out_privState_bits_PRVM = 2'h1;
  assign out_privState_bits_V = 1'h0;
  assign out_mstatus_valid = valid;
  assign out_mstatus_bits_SIE = 1'h0;
  assign out_mstatus_bits_MIE = 1'h0;
  assign out_mstatus_bits_SPIE = in_sstatus_SIE;
  assign out_mstatus_bits_UBE = 1'h0;
  assign out_mstatus_bits_MPIE = 1'h0;
  assign out_mstatus_bits_SPP = in_privState_PRVM[0];
  assign out_mstatus_bits_VS = 2'h0;
  assign out_mstatus_bits_MPP = 2'h0;
  assign out_mstatus_bits_FS = 2'h0;
  assign out_mstatus_bits_XS = 2'h0;
  assign out_mstatus_bits_MPRV = 1'h0;
  assign out_mstatus_bits_SUM = 1'h0;
  assign out_mstatus_bits_MXR = 1'h0;
  assign out_mstatus_bits_TVM = 1'h0;
  assign out_mstatus_bits_TW = 1'h0;
  assign out_mstatus_bits_TSR = 1'h0;
  assign out_mstatus_bits_UXL = 2'h0;
  assign out_mstatus_bits_SXL = 2'h0;
  assign out_mstatus_bits_SBE = 1'h0;
  assign out_mstatus_bits_MBE = 1'h0;
  assign out_mstatus_bits_GVA = 1'h0;
  assign out_mstatus_bits_MPV = 1'h0;
  assign out_mstatus_bits_SD = 1'h0;
  assign out_hstatus_valid = valid;
  assign out_hstatus_bits_VSBE = 1'h0;
  assign out_hstatus_bits_GVA = tvalFillGVA;
  assign out_hstatus_bits_SPV = in_privState_V;
  assign out_hstatus_bits_SPVP = in_privState_V ? in_privState_PRVM[0] : in_hstatus_SPVP;
  assign out_hstatus_bits_HU = 1'h0;
  assign out_hstatus_bits_VGEIN = 6'h0;
  assign out_hstatus_bits_VTVM = 1'h0;
  assign out_hstatus_bits_VTW = 1'h0;
  assign out_hstatus_bits_VTSR = 1'h0;
  assign out_hstatus_bits_VSXL = 2'h0;
  assign out_sepc_valid = valid;
  assign out_sepc_bits_epc = trapPC[63:1];
  assign out_scause_valid = valid;
  assign out_scause_bits_Interrupt = in_causeNO_Interrupt;
  assign out_scause_bits_ExceptionCode = in_causeNO_ExceptionCode;
  assign out_stval_valid = valid;
  assign out_stval_bits_ALL =
    (_tvalFillPcPlus2_T & ~in_isCrossPageIPF | isBpExcp ? trapPC : 64'h0)
    | (_tvalFillPcPlus2_T & in_isCrossPageIPF ? 64'(trapPC + 64'h2) : 64'h0)
    | (isMemExcp & ~in_dMode_V ? trapMemVA : 64'h0) | (_tval_T_4 ? trapMemVA : 64'h0)
    | (isLSGuestExcp ? trapMemVA : 64'h0);
  assign out_htval_valid = valid;
  assign out_htval_bits_ALL =
    {2'h0,
     (isFetchGuestExcp ? {_trapPCGPA_T, in_trapPcGPA[40:2]} : 62'h0)
       | (isFetchGuestExcp & in_isCrossPageIPF ? _tval2_T_1[63:2] : 62'h0)
       | (isLSGuestExcp
            ? {{23{in_memExceptionGPAddr[40]}}, in_memExceptionGPAddr[40:2]}
            : 62'h0)};
  assign out_htinst_valid = valid;
  assign out_htinst_bits_ALL = 64'h0;
  assign out_targetPc_valid = valid;
  assign out_targetPc_bits = in_pcFromXtvec;
endmodule

