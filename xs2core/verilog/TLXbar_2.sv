// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module TLXbar_2(
  input          clock,
  input          reset,
  output         auto_in_2_a_ready,
  input          auto_in_2_a_valid,
  input  [2:0]   auto_in_2_a_bits_opcode,
  input  [2:0]   auto_in_2_a_bits_param,
  input  [2:0]   auto_in_2_a_bits_size,
  input  [9:0]   auto_in_2_a_bits_source,
  input  [35:0]  auto_in_2_a_bits_address,
  input  [3:0]   auto_in_2_a_bits_user_reqSource,
  input  [31:0]  auto_in_2_a_bits_mask,
  input  [255:0] auto_in_2_a_bits_data,
  input          auto_in_2_a_bits_corrupt,
  input          auto_in_2_b_ready,
  output         auto_in_2_b_valid,
  output [2:0]   auto_in_2_b_bits_opcode,
  output [1:0]   auto_in_2_b_bits_param,
  output [2:0]   auto_in_2_b_bits_size,
  output [9:0]   auto_in_2_b_bits_source,
  output [35:0]  auto_in_2_b_bits_address,
  output [31:0]  auto_in_2_b_bits_mask,
  output [255:0] auto_in_2_b_bits_data,
  output         auto_in_2_c_ready,
  input          auto_in_2_c_valid,
  input  [2:0]   auto_in_2_c_bits_opcode,
  input  [2:0]   auto_in_2_c_bits_param,
  input  [2:0]   auto_in_2_c_bits_size,
  input  [9:0]   auto_in_2_c_bits_source,
  input  [35:0]  auto_in_2_c_bits_address,
  input          auto_in_2_c_bits_echo_blockisdirty,
  input  [255:0] auto_in_2_c_bits_data,
  input          auto_in_2_d_ready,
  output         auto_in_2_d_valid,
  output [2:0]   auto_in_2_d_bits_opcode,
  output [1:0]   auto_in_2_d_bits_param,
  output [2:0]   auto_in_2_d_bits_size,
  output [9:0]   auto_in_2_d_bits_source,
  output [5:0]   auto_in_2_d_bits_sink,
  output         auto_in_2_d_bits_denied,
  output         auto_in_2_d_bits_echo_blockisdirty,
  output [255:0] auto_in_2_d_bits_data,
  output         auto_in_2_d_bits_corrupt,
  output         auto_in_2_e_ready,
  input          auto_in_2_e_valid,
  input  [5:0]   auto_in_2_e_bits_sink,
  output         auto_in_1_a_ready,
  input          auto_in_1_a_valid,
  input  [2:0]   auto_in_1_a_bits_opcode,
  input  [2:0]   auto_in_1_a_bits_param,
  input  [2:0]   auto_in_1_a_bits_size,
  input  [9:0]   auto_in_1_a_bits_source,
  input  [35:0]  auto_in_1_a_bits_address,
  input  [3:0]   auto_in_1_a_bits_user_reqSource,
  input  [31:0]  auto_in_1_a_bits_mask,
  input  [255:0] auto_in_1_a_bits_data,
  input          auto_in_1_a_bits_corrupt,
  input          auto_in_1_b_ready,
  output         auto_in_1_b_valid,
  output [2:0]   auto_in_1_b_bits_opcode,
  output [1:0]   auto_in_1_b_bits_param,
  output [2:0]   auto_in_1_b_bits_size,
  output [9:0]   auto_in_1_b_bits_source,
  output [35:0]  auto_in_1_b_bits_address,
  output [31:0]  auto_in_1_b_bits_mask,
  output [255:0] auto_in_1_b_bits_data,
  output         auto_in_1_c_ready,
  input          auto_in_1_c_valid,
  input  [2:0]   auto_in_1_c_bits_opcode,
  input  [2:0]   auto_in_1_c_bits_param,
  input  [2:0]   auto_in_1_c_bits_size,
  input  [9:0]   auto_in_1_c_bits_source,
  input  [35:0]  auto_in_1_c_bits_address,
  input          auto_in_1_c_bits_echo_blockisdirty,
  input  [255:0] auto_in_1_c_bits_data,
  input          auto_in_1_d_ready,
  output         auto_in_1_d_valid,
  output [2:0]   auto_in_1_d_bits_opcode,
  output [1:0]   auto_in_1_d_bits_param,
  output [2:0]   auto_in_1_d_bits_size,
  output [9:0]   auto_in_1_d_bits_source,
  output [5:0]   auto_in_1_d_bits_sink,
  output         auto_in_1_d_bits_denied,
  output         auto_in_1_d_bits_echo_blockisdirty,
  output [255:0] auto_in_1_d_bits_data,
  output         auto_in_1_d_bits_corrupt,
  output         auto_in_1_e_ready,
  input          auto_in_1_e_valid,
  input  [5:0]   auto_in_1_e_bits_sink,
  output         auto_in_0_a_ready,
  input          auto_in_0_a_valid,
  input  [2:0]   auto_in_0_a_bits_opcode,
  input  [2:0]   auto_in_0_a_bits_param,
  input  [2:0]   auto_in_0_a_bits_size,
  input  [2:0]   auto_in_0_a_bits_source,
  input  [35:0]  auto_in_0_a_bits_address,
  input  [31:0]  auto_in_0_a_bits_mask,
  input  [255:0] auto_in_0_a_bits_data,
  input          auto_in_0_a_bits_corrupt,
  input          auto_in_0_d_ready,
  output         auto_in_0_d_valid,
  output [2:0]   auto_in_0_d_bits_opcode,
  output [1:0]   auto_in_0_d_bits_param,
  output [2:0]   auto_in_0_d_bits_size,
  output [2:0]   auto_in_0_d_bits_source,
  output [5:0]   auto_in_0_d_bits_sink,
  output         auto_in_0_d_bits_denied,
  output [255:0] auto_in_0_d_bits_data,
  output         auto_in_0_d_bits_corrupt,
  input          auto_out_3_a_ready,
  output         auto_out_3_a_valid,
  output [2:0]   auto_out_3_a_bits_opcode,
  output [2:0]   auto_out_3_a_bits_param,
  output [2:0]   auto_out_3_a_bits_size,
  output [11:0]  auto_out_3_a_bits_source,
  output [35:0]  auto_out_3_a_bits_address,
  output [3:0]   auto_out_3_a_bits_user_reqSource,
  output [31:0]  auto_out_3_a_bits_mask,
  output [255:0] auto_out_3_a_bits_data,
  output         auto_out_3_a_bits_corrupt,
  output         auto_out_3_b_ready,
  input          auto_out_3_b_valid,
  input  [1:0]   auto_out_3_b_bits_param,
  input  [11:0]  auto_out_3_b_bits_source,
  input  [35:0]  auto_out_3_b_bits_address,
  input  [255:0] auto_out_3_b_bits_data,
  input          auto_out_3_c_ready,
  output         auto_out_3_c_valid,
  output [2:0]   auto_out_3_c_bits_opcode,
  output [2:0]   auto_out_3_c_bits_param,
  output [2:0]   auto_out_3_c_bits_size,
  output [11:0]  auto_out_3_c_bits_source,
  output [35:0]  auto_out_3_c_bits_address,
  output         auto_out_3_c_bits_echo_blockisdirty,
  output [255:0] auto_out_3_c_bits_data,
  output         auto_out_3_d_ready,
  input          auto_out_3_d_valid,
  input  [2:0]   auto_out_3_d_bits_opcode,
  input  [1:0]   auto_out_3_d_bits_param,
  input  [2:0]   auto_out_3_d_bits_size,
  input  [11:0]  auto_out_3_d_bits_source,
  input  [3:0]   auto_out_3_d_bits_sink,
  input          auto_out_3_d_bits_denied,
  input          auto_out_3_d_bits_echo_blockisdirty,
  input  [255:0] auto_out_3_d_bits_data,
  input          auto_out_3_d_bits_corrupt,
  output         auto_out_3_e_valid,
  output [3:0]   auto_out_3_e_bits_sink,
  input          auto_out_2_a_ready,
  output         auto_out_2_a_valid,
  output [2:0]   auto_out_2_a_bits_opcode,
  output [2:0]   auto_out_2_a_bits_param,
  output [2:0]   auto_out_2_a_bits_size,
  output [11:0]  auto_out_2_a_bits_source,
  output [35:0]  auto_out_2_a_bits_address,
  output [3:0]   auto_out_2_a_bits_user_reqSource,
  output [31:0]  auto_out_2_a_bits_mask,
  output [255:0] auto_out_2_a_bits_data,
  output         auto_out_2_a_bits_corrupt,
  output         auto_out_2_b_ready,
  input          auto_out_2_b_valid,
  input  [1:0]   auto_out_2_b_bits_param,
  input  [11:0]  auto_out_2_b_bits_source,
  input  [35:0]  auto_out_2_b_bits_address,
  input  [255:0] auto_out_2_b_bits_data,
  input          auto_out_2_c_ready,
  output         auto_out_2_c_valid,
  output [2:0]   auto_out_2_c_bits_opcode,
  output [2:0]   auto_out_2_c_bits_param,
  output [2:0]   auto_out_2_c_bits_size,
  output [11:0]  auto_out_2_c_bits_source,
  output [35:0]  auto_out_2_c_bits_address,
  output         auto_out_2_c_bits_echo_blockisdirty,
  output [255:0] auto_out_2_c_bits_data,
  output         auto_out_2_d_ready,
  input          auto_out_2_d_valid,
  input  [2:0]   auto_out_2_d_bits_opcode,
  input  [1:0]   auto_out_2_d_bits_param,
  input  [2:0]   auto_out_2_d_bits_size,
  input  [11:0]  auto_out_2_d_bits_source,
  input  [3:0]   auto_out_2_d_bits_sink,
  input          auto_out_2_d_bits_denied,
  input          auto_out_2_d_bits_echo_blockisdirty,
  input  [255:0] auto_out_2_d_bits_data,
  input          auto_out_2_d_bits_corrupt,
  output         auto_out_2_e_valid,
  output [3:0]   auto_out_2_e_bits_sink,
  input          auto_out_1_a_ready,
  output         auto_out_1_a_valid,
  output [2:0]   auto_out_1_a_bits_opcode,
  output [2:0]   auto_out_1_a_bits_param,
  output [2:0]   auto_out_1_a_bits_size,
  output [11:0]  auto_out_1_a_bits_source,
  output [35:0]  auto_out_1_a_bits_address,
  output [3:0]   auto_out_1_a_bits_user_reqSource,
  output [31:0]  auto_out_1_a_bits_mask,
  output [255:0] auto_out_1_a_bits_data,
  output         auto_out_1_a_bits_corrupt,
  output         auto_out_1_b_ready,
  input          auto_out_1_b_valid,
  input  [1:0]   auto_out_1_b_bits_param,
  input  [11:0]  auto_out_1_b_bits_source,
  input  [35:0]  auto_out_1_b_bits_address,
  input  [255:0] auto_out_1_b_bits_data,
  input          auto_out_1_c_ready,
  output         auto_out_1_c_valid,
  output [2:0]   auto_out_1_c_bits_opcode,
  output [2:0]   auto_out_1_c_bits_param,
  output [2:0]   auto_out_1_c_bits_size,
  output [11:0]  auto_out_1_c_bits_source,
  output [35:0]  auto_out_1_c_bits_address,
  output         auto_out_1_c_bits_echo_blockisdirty,
  output [255:0] auto_out_1_c_bits_data,
  output         auto_out_1_d_ready,
  input          auto_out_1_d_valid,
  input  [2:0]   auto_out_1_d_bits_opcode,
  input  [1:0]   auto_out_1_d_bits_param,
  input  [2:0]   auto_out_1_d_bits_size,
  input  [11:0]  auto_out_1_d_bits_source,
  input  [3:0]   auto_out_1_d_bits_sink,
  input          auto_out_1_d_bits_denied,
  input          auto_out_1_d_bits_echo_blockisdirty,
  input  [255:0] auto_out_1_d_bits_data,
  input          auto_out_1_d_bits_corrupt,
  output         auto_out_1_e_valid,
  output [3:0]   auto_out_1_e_bits_sink,
  input          auto_out_0_a_ready,
  output         auto_out_0_a_valid,
  output [2:0]   auto_out_0_a_bits_opcode,
  output [2:0]   auto_out_0_a_bits_param,
  output [2:0]   auto_out_0_a_bits_size,
  output [11:0]  auto_out_0_a_bits_source,
  output [35:0]  auto_out_0_a_bits_address,
  output [3:0]   auto_out_0_a_bits_user_reqSource,
  output [31:0]  auto_out_0_a_bits_mask,
  output [255:0] auto_out_0_a_bits_data,
  output         auto_out_0_a_bits_corrupt,
  output         auto_out_0_b_ready,
  input          auto_out_0_b_valid,
  input  [1:0]   auto_out_0_b_bits_param,
  input  [11:0]  auto_out_0_b_bits_source,
  input  [35:0]  auto_out_0_b_bits_address,
  input  [255:0] auto_out_0_b_bits_data,
  input          auto_out_0_c_ready,
  output         auto_out_0_c_valid,
  output [2:0]   auto_out_0_c_bits_opcode,
  output [2:0]   auto_out_0_c_bits_param,
  output [2:0]   auto_out_0_c_bits_size,
  output [11:0]  auto_out_0_c_bits_source,
  output [35:0]  auto_out_0_c_bits_address,
  output         auto_out_0_c_bits_echo_blockisdirty,
  output [255:0] auto_out_0_c_bits_data,
  output         auto_out_0_d_ready,
  input          auto_out_0_d_valid,
  input  [2:0]   auto_out_0_d_bits_opcode,
  input  [1:0]   auto_out_0_d_bits_param,
  input  [2:0]   auto_out_0_d_bits_size,
  input  [11:0]  auto_out_0_d_bits_source,
  input  [3:0]   auto_out_0_d_bits_sink,
  input          auto_out_0_d_bits_denied,
  input          auto_out_0_d_bits_echo_blockisdirty,
  input  [255:0] auto_out_0_d_bits_data,
  input          auto_out_0_d_bits_corrupt,
  output         auto_out_0_e_valid,
  output [3:0]   auto_out_0_e_bits_sink
);

  wire        allowed_16_3;
  wire        allowed_16_2;
  wire        allowed_16_1;
  wire        allowed_16_0;
  wire        allowed_15_3;
  wire        allowed_15_2;
  wire        allowed_15_1;
  wire        allowed_15_0;
  wire        allowed_14_3;
  wire        allowed_14_2;
  wire        allowed_14_1;
  wire        allowed_14_0;
  wire        allowed_13_3;
  wire        allowed_13_2;
  wire        allowed_13_1;
  wire        allowed_13_0;
  wire        allowed_12_3;
  wire        allowed_12_2;
  wire        allowed_12_1;
  wire        allowed_12_0;
  wire        allowed_11_1;
  wire        allowed_11_0;
  wire        allowed_10_1;
  wire        allowed_10_0;
  wire        allowed_9_2;
  wire        allowed_9_1;
  wire        allowed_9_0;
  wire        allowed_8_1;
  wire        allowed_8_0;
  wire        allowed_7_1;
  wire        allowed_7_0;
  wire        allowed_6_2;
  wire        allowed_6_1;
  wire        allowed_6_0;
  wire        allowed_5_1;
  wire        allowed_5_0;
  wire        allowed_4_1;
  wire        allowed_4_0;
  wire        allowed_3_2;
  wire        allowed_3_1;
  wire        allowed_3_0;
  wire        allowed_2_1;
  wire        allowed_2_0;
  wire        allowed_1_1;
  wire        allowed_1_0;
  wire        allowed_2;
  wire        allowed_1;
  wire        allowed_0;
  wire [11:0] in_0_a_bits_source = {9'h100, auto_in_0_a_bits_source};
  wire [11:0] in_1_a_bits_source = {2'h1, auto_in_1_a_bits_source};
  wire [11:0] in_1_c_bits_source = {2'h1, auto_in_1_c_bits_source};
  wire [11:0] in_2_a_bits_source = {2'h0, auto_in_2_a_bits_source};
  wire [11:0] in_2_c_bits_source = {2'h0, auto_in_2_c_bits_source};
  wire [5:0]  out_0_d_bits_sink = {2'h3, auto_out_0_d_bits_sink};
  wire [5:0]  out_1_d_bits_sink = {2'h2, auto_out_1_d_bits_sink};
  wire [5:0]  out_2_d_bits_sink = {2'h1, auto_out_2_d_bits_sink};
  wire [5:0]  out_3_d_bits_sink = {2'h0, auto_out_3_d_bits_sink};
  wire        requestAIO_0_0 = auto_in_0_a_bits_address[7:6] == 2'h0;
  wire        requestAIO_0_1 =
    {auto_in_0_a_bits_address[7], ~(auto_in_0_a_bits_address[6])} == 2'h0;
  wire        requestAIO_0_2 = auto_in_0_a_bits_address[7:6] == 2'h2;
  wire        requestAIO_1_0 = auto_in_1_a_bits_address[7:6] == 2'h0;
  wire        requestAIO_1_1 =
    {auto_in_1_a_bits_address[7], ~(auto_in_1_a_bits_address[6])} == 2'h0;
  wire        requestAIO_1_2 = auto_in_1_a_bits_address[7:6] == 2'h2;
  wire        requestAIO_2_0 = auto_in_2_a_bits_address[7:6] == 2'h0;
  wire        requestAIO_2_1 =
    {auto_in_2_a_bits_address[7], ~(auto_in_2_a_bits_address[6])} == 2'h0;
  wire        requestAIO_2_2 = auto_in_2_a_bits_address[7:6] == 2'h2;
  wire        requestCIO_1_0 = auto_in_1_c_bits_address[7:6] == 2'h0;
  wire        requestCIO_1_1 =
    {auto_in_1_c_bits_address[7], ~(auto_in_1_c_bits_address[6])} == 2'h0;
  wire        requestCIO_1_2 = auto_in_1_c_bits_address[7:6] == 2'h2;
  wire        requestCIO_2_0 = auto_in_2_c_bits_address[7:6] == 2'h0;
  wire        requestCIO_2_1 =
    {auto_in_2_c_bits_address[7], ~(auto_in_2_c_bits_address[6])} == 2'h0;
  wire        requestCIO_2_2 = auto_in_2_c_bits_address[7:6] == 2'h2;
  wire        requestBOI_0_1 = auto_out_0_b_bits_source[11:10] == 2'h1;
  wire        requestBOI_0_2 = auto_out_0_b_bits_source[11:10] == 2'h0;
  wire        requestBOI_1_1 = auto_out_1_b_bits_source[11:10] == 2'h1;
  wire        requestBOI_1_2 = auto_out_1_b_bits_source[11:10] == 2'h0;
  wire        requestBOI_2_1 = auto_out_2_b_bits_source[11:10] == 2'h1;
  wire        requestBOI_2_2 = auto_out_2_b_bits_source[11:10] == 2'h0;
  wire        requestBOI_3_1 = auto_out_3_b_bits_source[11:10] == 2'h1;
  wire        requestBOI_3_2 = auto_out_3_b_bits_source[11:10] == 2'h0;
  wire        requestDOI_0_0 = auto_out_0_d_bits_source[11:3] == 9'h100;
  wire        requestDOI_0_1 = auto_out_0_d_bits_source[11:10] == 2'h1;
  wire        requestDOI_0_2 = auto_out_0_d_bits_source[11:10] == 2'h0;
  wire        requestDOI_1_0 = auto_out_1_d_bits_source[11:3] == 9'h100;
  wire        requestDOI_1_1 = auto_out_1_d_bits_source[11:10] == 2'h1;
  wire        requestDOI_1_2 = auto_out_1_d_bits_source[11:10] == 2'h0;
  wire        requestDOI_2_0 = auto_out_2_d_bits_source[11:3] == 9'h100;
  wire        requestDOI_2_1 = auto_out_2_d_bits_source[11:10] == 2'h1;
  wire        requestDOI_2_2 = auto_out_2_d_bits_source[11:10] == 2'h0;
  wire        requestDOI_3_0 = auto_out_3_d_bits_source[11:3] == 9'h100;
  wire        requestDOI_3_1 = auto_out_3_d_bits_source[11:10] == 2'h1;
  wire        requestDOI_3_2 = auto_out_3_d_bits_source[11:10] == 2'h0;
  wire        requestEIO_1_1 = auto_in_1_e_bits_sink[5:4] == 2'h2;
  wire        requestEIO_1_2 = auto_in_1_e_bits_sink[5:4] == 2'h1;
  wire        requestEIO_1_3 = auto_in_1_e_bits_sink[5:4] == 2'h0;
  wire        requestEIO_2_1 = auto_in_2_e_bits_sink[5:4] == 2'h2;
  wire        requestEIO_2_2 = auto_in_2_e_bits_sink[5:4] == 2'h1;
  wire        requestEIO_2_3 = auto_in_2_e_bits_sink[5:4] == 2'h0;
  wire        portsAOI_filtered_0_valid = auto_in_0_a_valid & requestAIO_0_0;
  wire        portsAOI_filtered_1_valid = auto_in_0_a_valid & requestAIO_0_1;
  wire        portsAOI_filtered_2_valid = auto_in_0_a_valid & requestAIO_0_2;
  wire        portsAOI_filtered_3_valid =
    auto_in_0_a_valid & (&(auto_in_0_a_bits_address[7:6]));
  wire        portsAOI_filtered_1_0_valid = auto_in_1_a_valid & requestAIO_1_0;
  wire        portsAOI_filtered_1_1_valid = auto_in_1_a_valid & requestAIO_1_1;
  wire        portsAOI_filtered_1_2_valid = auto_in_1_a_valid & requestAIO_1_2;
  wire        portsAOI_filtered_1_3_valid =
    auto_in_1_a_valid & (&(auto_in_1_a_bits_address[7:6]));
  wire        portsAOI_filtered_2_0_valid = auto_in_2_a_valid & requestAIO_2_0;
  wire        portsAOI_filtered_2_1_valid = auto_in_2_a_valid & requestAIO_2_1;
  wire        portsAOI_filtered_2_2_valid = auto_in_2_a_valid & requestAIO_2_2;
  wire        portsAOI_filtered_2_3_valid =
    auto_in_2_a_valid & (&(auto_in_2_a_bits_address[7:6]));
  wire        portsBIO_filtered_1_valid = auto_out_0_b_valid & requestBOI_0_1;
  wire        portsBIO_filtered_2_valid = auto_out_0_b_valid & requestBOI_0_2;
  wire        portsBIO_filtered_1_1_valid = auto_out_1_b_valid & requestBOI_1_1;
  wire        portsBIO_filtered_1_2_valid = auto_out_1_b_valid & requestBOI_1_2;
  wire        portsBIO_filtered_2_1_valid = auto_out_2_b_valid & requestBOI_2_1;
  wire        portsBIO_filtered_2_2_valid = auto_out_2_b_valid & requestBOI_2_2;
  wire        portsBIO_filtered_3_1_valid = auto_out_3_b_valid & requestBOI_3_1;
  wire        portsBIO_filtered_3_2_valid = auto_out_3_b_valid & requestBOI_3_2;
  wire        portsCOI_filtered_1_0_valid = auto_in_1_c_valid & requestCIO_1_0;
  wire        portsCOI_filtered_1_1_valid = auto_in_1_c_valid & requestCIO_1_1;
  wire        portsCOI_filtered_1_2_valid = auto_in_1_c_valid & requestCIO_1_2;
  wire        portsCOI_filtered_1_3_valid =
    auto_in_1_c_valid & (&(auto_in_1_c_bits_address[7:6]));
  wire        portsCOI_filtered_2_0_valid = auto_in_2_c_valid & requestCIO_2_0;
  wire        portsCOI_filtered_2_1_valid = auto_in_2_c_valid & requestCIO_2_1;
  wire        portsCOI_filtered_2_2_valid = auto_in_2_c_valid & requestCIO_2_2;
  wire        portsCOI_filtered_2_3_valid =
    auto_in_2_c_valid & (&(auto_in_2_c_bits_address[7:6]));
  wire        portsDIO_filtered_0_valid = auto_out_0_d_valid & requestDOI_0_0;
  wire        portsDIO_filtered_1_valid = auto_out_0_d_valid & requestDOI_0_1;
  wire        portsDIO_filtered_2_valid = auto_out_0_d_valid & requestDOI_0_2;
  wire        portsDIO_filtered_1_0_valid = auto_out_1_d_valid & requestDOI_1_0;
  wire        portsDIO_filtered_1_1_valid = auto_out_1_d_valid & requestDOI_1_1;
  wire        portsDIO_filtered_1_2_valid = auto_out_1_d_valid & requestDOI_1_2;
  wire        portsDIO_filtered_2_0_valid = auto_out_2_d_valid & requestDOI_2_0;
  wire        portsDIO_filtered_2_1_valid = auto_out_2_d_valid & requestDOI_2_1;
  wire        portsDIO_filtered_2_2_valid = auto_out_2_d_valid & requestDOI_2_2;
  wire        portsDIO_filtered_3_0_valid = auto_out_3_d_valid & requestDOI_3_0;
  wire        portsDIO_filtered_3_1_valid = auto_out_3_d_valid & requestDOI_3_1;
  wire        portsDIO_filtered_3_2_valid = auto_out_3_d_valid & requestDOI_3_2;
  wire        portsEOI_filtered_1_0_valid =
    auto_in_1_e_valid & (&(auto_in_1_e_bits_sink[5:4]));
  wire        portsEOI_filtered_1_1_valid = auto_in_1_e_valid & requestEIO_1_1;
  wire        portsEOI_filtered_1_2_valid = auto_in_1_e_valid & requestEIO_1_2;
  wire        portsEOI_filtered_1_3_valid = auto_in_1_e_valid & requestEIO_1_3;
  wire        portsEOI_filtered_2_0_valid =
    auto_in_2_e_valid & (&(auto_in_2_e_bits_sink[5:4]));
  wire        portsEOI_filtered_2_1_valid = auto_in_2_e_valid & requestEIO_2_1;
  wire        portsEOI_filtered_2_2_valid = auto_in_2_e_valid & requestEIO_2_2;
  wire        portsEOI_filtered_2_3_valid = auto_in_2_e_valid & requestEIO_2_3;
  reg         beatsLeft;
  wire [2:0]  readys_valid =
    {portsAOI_filtered_2_0_valid, portsAOI_filtered_1_0_valid, portsAOI_filtered_0_valid};
  reg  [2:0]  readys_mask;
  wire [2:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [3:0]  _GEN =
    {_readys_filter_T_1[1:0], portsAOI_filtered_2_0_valid, portsAOI_filtered_1_0_valid}
    | {_readys_filter_T_1, portsAOI_filtered_2_0_valid};
  wire [2:0]  readys_readys =
    ~({readys_mask[2], _readys_filter_T_1[2] | readys_mask[1], _GEN[3] | readys_mask[0]}
      & (_GEN[2:0] | {_readys_filter_T_1[2], _GEN[3:2]}));
  wire        winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire        winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  wire        winner_2 = readys_readys[2] & portsAOI_filtered_2_0_valid;
  reg         state_0;
  reg         state_1;
  reg         state_2;
  wire        muxState_0 = beatsLeft ? state_0 : winner_0;
  wire        muxState_1 = beatsLeft ? state_1 : winner_1;
  wire        muxState_2 = beatsLeft ? state_2 : winner_2;
  assign allowed_0 = beatsLeft ? state_0 : readys_readys[0];
  assign allowed_1 = beatsLeft ? state_1 : readys_readys[1];
  assign allowed_2 = beatsLeft ? state_2 : readys_readys[2];
  wire        out_0_a_valid =
    beatsLeft
      ? state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid
        | state_2 & portsAOI_filtered_2_0_valid
      : portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid
        | portsAOI_filtered_2_0_valid;
  reg         beatsLeft_1;
  wire [1:0]  readys_valid_1 = {portsCOI_filtered_2_0_valid, portsCOI_filtered_1_0_valid};
  reg  [1:0]  readys_mask_1;
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0]  readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & ({_readys_filter_T_3[0], portsCOI_filtered_2_0_valid} | _readys_filter_T_3));
  wire        winner_1_0 = readys_readys_1[0] & portsCOI_filtered_1_0_valid;
  wire        winner_1_1 = readys_readys_1[1] & portsCOI_filtered_2_0_valid;
  reg         state_1_0;
  reg         state_1_1;
  wire        muxState_1_0 = beatsLeft_1 ? state_1_0 : winner_1_0;
  wire        muxState_1_1 = beatsLeft_1 ? state_1_1 : winner_1_1;
  assign allowed_1_0 = beatsLeft_1 ? state_1_0 : readys_readys_1[0];
  assign allowed_1_1 = beatsLeft_1 ? state_1_1 : readys_readys_1[1];
  wire        out_0_c_valid =
    beatsLeft_1
      ? state_1_0 & portsCOI_filtered_1_0_valid | state_1_1 & portsCOI_filtered_2_0_valid
      : portsCOI_filtered_1_0_valid | portsCOI_filtered_2_0_valid;
  reg         beatsLeft_2;
  wire [1:0]  readys_valid_2 = {portsEOI_filtered_2_0_valid, portsEOI_filtered_1_0_valid};
  reg  [1:0]  readys_mask_2;
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [1:0]  readys_readys_2 =
    ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]}
      & ({_readys_filter_T_5[0], portsEOI_filtered_2_0_valid} | _readys_filter_T_5));
  wire        winner_2_0 = readys_readys_2[0] & portsEOI_filtered_1_0_valid;
  wire        winner_2_1 = readys_readys_2[1] & portsEOI_filtered_2_0_valid;
  reg         state_2_0;
  reg         state_2_1;
  assign allowed_2_0 = beatsLeft_2 ? state_2_0 : readys_readys_2[0];
  assign allowed_2_1 = beatsLeft_2 ? state_2_1 : readys_readys_2[1];
  wire        out_0_e_valid =
    beatsLeft_2
      ? state_2_0 & portsEOI_filtered_1_0_valid | state_2_1 & portsEOI_filtered_2_0_valid
      : portsEOI_filtered_1_0_valid | portsEOI_filtered_2_0_valid;
  reg         beatsLeft_3;
  wire [2:0]  readys_valid_3 =
    {portsAOI_filtered_2_1_valid, portsAOI_filtered_1_1_valid, portsAOI_filtered_1_valid};
  reg  [2:0]  readys_mask_3;
  wire [2:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [3:0]  _GEN_0 =
    {_readys_filter_T_7[1:0], portsAOI_filtered_2_1_valid, portsAOI_filtered_1_1_valid}
    | {_readys_filter_T_7, portsAOI_filtered_2_1_valid};
  wire [2:0]  readys_readys_3 =
    ~({readys_mask_3[2],
       _readys_filter_T_7[2] | readys_mask_3[1],
       _GEN_0[3] | readys_mask_3[0]}
      & (_GEN_0[2:0] | {_readys_filter_T_7[2], _GEN_0[3:2]}));
  wire        winner_3_0 = readys_readys_3[0] & portsAOI_filtered_1_valid;
  wire        winner_3_1 = readys_readys_3[1] & portsAOI_filtered_1_1_valid;
  wire        winner_3_2 = readys_readys_3[2] & portsAOI_filtered_2_1_valid;
  reg         state_3_0;
  reg         state_3_1;
  reg         state_3_2;
  wire        muxState_3_0 = beatsLeft_3 ? state_3_0 : winner_3_0;
  wire        muxState_3_1 = beatsLeft_3 ? state_3_1 : winner_3_1;
  wire        muxState_3_2 = beatsLeft_3 ? state_3_2 : winner_3_2;
  assign allowed_3_0 = beatsLeft_3 ? state_3_0 : readys_readys_3[0];
  assign allowed_3_1 = beatsLeft_3 ? state_3_1 : readys_readys_3[1];
  assign allowed_3_2 = beatsLeft_3 ? state_3_2 : readys_readys_3[2];
  wire        out_1_a_valid =
    beatsLeft_3
      ? state_3_0 & portsAOI_filtered_1_valid | state_3_1 & portsAOI_filtered_1_1_valid
        | state_3_2 & portsAOI_filtered_2_1_valid
      : portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid
        | portsAOI_filtered_2_1_valid;
  reg         beatsLeft_4;
  wire [1:0]  readys_valid_4 = {portsCOI_filtered_2_1_valid, portsCOI_filtered_1_1_valid};
  reg  [1:0]  readys_mask_4;
  wire [1:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [1:0]  readys_readys_4 =
    ~({readys_mask_4[1], _readys_filter_T_9[1] | readys_mask_4[0]}
      & ({_readys_filter_T_9[0], portsCOI_filtered_2_1_valid} | _readys_filter_T_9));
  wire        winner_4_0 = readys_readys_4[0] & portsCOI_filtered_1_1_valid;
  wire        winner_4_1 = readys_readys_4[1] & portsCOI_filtered_2_1_valid;
  reg         state_4_0;
  reg         state_4_1;
  wire        muxState_4_0 = beatsLeft_4 ? state_4_0 : winner_4_0;
  wire        muxState_4_1 = beatsLeft_4 ? state_4_1 : winner_4_1;
  assign allowed_4_0 = beatsLeft_4 ? state_4_0 : readys_readys_4[0];
  assign allowed_4_1 = beatsLeft_4 ? state_4_1 : readys_readys_4[1];
  wire        out_1_c_valid =
    beatsLeft_4
      ? state_4_0 & portsCOI_filtered_1_1_valid | state_4_1 & portsCOI_filtered_2_1_valid
      : portsCOI_filtered_1_1_valid | portsCOI_filtered_2_1_valid;
  reg         beatsLeft_5;
  wire [1:0]  readys_valid_5 = {portsEOI_filtered_2_1_valid, portsEOI_filtered_1_1_valid};
  reg  [1:0]  readys_mask_5;
  wire [1:0]  _readys_filter_T_11 = readys_valid_5 & ~readys_mask_5;
  wire [1:0]  readys_readys_5 =
    ~({readys_mask_5[1], _readys_filter_T_11[1] | readys_mask_5[0]}
      & ({_readys_filter_T_11[0], portsEOI_filtered_2_1_valid} | _readys_filter_T_11));
  wire        winner_5_0 = readys_readys_5[0] & portsEOI_filtered_1_1_valid;
  wire        winner_5_1 = readys_readys_5[1] & portsEOI_filtered_2_1_valid;
  reg         state_5_0;
  reg         state_5_1;
  assign allowed_5_0 = beatsLeft_5 ? state_5_0 : readys_readys_5[0];
  assign allowed_5_1 = beatsLeft_5 ? state_5_1 : readys_readys_5[1];
  wire        out_1_e_valid =
    beatsLeft_5
      ? state_5_0 & portsEOI_filtered_1_1_valid | state_5_1 & portsEOI_filtered_2_1_valid
      : portsEOI_filtered_1_1_valid | portsEOI_filtered_2_1_valid;
  reg         beatsLeft_6;
  wire [2:0]  readys_valid_6 =
    {portsAOI_filtered_2_2_valid, portsAOI_filtered_1_2_valid, portsAOI_filtered_2_valid};
  reg  [2:0]  readys_mask_6;
  wire [2:0]  _readys_filter_T_13 = readys_valid_6 & ~readys_mask_6;
  wire [3:0]  _GEN_1 =
    {_readys_filter_T_13[1:0], portsAOI_filtered_2_2_valid, portsAOI_filtered_1_2_valid}
    | {_readys_filter_T_13, portsAOI_filtered_2_2_valid};
  wire [2:0]  readys_readys_6 =
    ~({readys_mask_6[2],
       _readys_filter_T_13[2] | readys_mask_6[1],
       _GEN_1[3] | readys_mask_6[0]}
      & (_GEN_1[2:0] | {_readys_filter_T_13[2], _GEN_1[3:2]}));
  wire        winner_6_0 = readys_readys_6[0] & portsAOI_filtered_2_valid;
  wire        winner_6_1 = readys_readys_6[1] & portsAOI_filtered_1_2_valid;
  wire        winner_6_2 = readys_readys_6[2] & portsAOI_filtered_2_2_valid;
  reg         state_6_0;
  reg         state_6_1;
  reg         state_6_2;
  wire        muxState_6_0 = beatsLeft_6 ? state_6_0 : winner_6_0;
  wire        muxState_6_1 = beatsLeft_6 ? state_6_1 : winner_6_1;
  wire        muxState_6_2 = beatsLeft_6 ? state_6_2 : winner_6_2;
  assign allowed_6_0 = beatsLeft_6 ? state_6_0 : readys_readys_6[0];
  assign allowed_6_1 = beatsLeft_6 ? state_6_1 : readys_readys_6[1];
  assign allowed_6_2 = beatsLeft_6 ? state_6_2 : readys_readys_6[2];
  wire        out_2_a_valid =
    beatsLeft_6
      ? state_6_0 & portsAOI_filtered_2_valid | state_6_1 & portsAOI_filtered_1_2_valid
        | state_6_2 & portsAOI_filtered_2_2_valid
      : portsAOI_filtered_2_valid | portsAOI_filtered_1_2_valid
        | portsAOI_filtered_2_2_valid;
  reg         beatsLeft_7;
  wire [1:0]  readys_valid_7 = {portsCOI_filtered_2_2_valid, portsCOI_filtered_1_2_valid};
  reg  [1:0]  readys_mask_7;
  wire [1:0]  _readys_filter_T_15 = readys_valid_7 & ~readys_mask_7;
  wire [1:0]  readys_readys_7 =
    ~({readys_mask_7[1], _readys_filter_T_15[1] | readys_mask_7[0]}
      & ({_readys_filter_T_15[0], portsCOI_filtered_2_2_valid} | _readys_filter_T_15));
  wire        winner_7_0 = readys_readys_7[0] & portsCOI_filtered_1_2_valid;
  wire        winner_7_1 = readys_readys_7[1] & portsCOI_filtered_2_2_valid;
  reg         state_7_0;
  reg         state_7_1;
  wire        muxState_7_0 = beatsLeft_7 ? state_7_0 : winner_7_0;
  wire        muxState_7_1 = beatsLeft_7 ? state_7_1 : winner_7_1;
  assign allowed_7_0 = beatsLeft_7 ? state_7_0 : readys_readys_7[0];
  assign allowed_7_1 = beatsLeft_7 ? state_7_1 : readys_readys_7[1];
  wire        out_2_c_valid =
    beatsLeft_7
      ? state_7_0 & portsCOI_filtered_1_2_valid | state_7_1 & portsCOI_filtered_2_2_valid
      : portsCOI_filtered_1_2_valid | portsCOI_filtered_2_2_valid;
  reg         beatsLeft_8;
  wire [1:0]  readys_valid_8 = {portsEOI_filtered_2_2_valid, portsEOI_filtered_1_2_valid};
  reg  [1:0]  readys_mask_8;
  wire [1:0]  _readys_filter_T_17 = readys_valid_8 & ~readys_mask_8;
  wire [1:0]  readys_readys_8 =
    ~({readys_mask_8[1], _readys_filter_T_17[1] | readys_mask_8[0]}
      & ({_readys_filter_T_17[0], portsEOI_filtered_2_2_valid} | _readys_filter_T_17));
  wire        winner_8_0 = readys_readys_8[0] & portsEOI_filtered_1_2_valid;
  wire        winner_8_1 = readys_readys_8[1] & portsEOI_filtered_2_2_valid;
  reg         state_8_0;
  reg         state_8_1;
  assign allowed_8_0 = beatsLeft_8 ? state_8_0 : readys_readys_8[0];
  assign allowed_8_1 = beatsLeft_8 ? state_8_1 : readys_readys_8[1];
  wire        out_2_e_valid =
    beatsLeft_8
      ? state_8_0 & portsEOI_filtered_1_2_valid | state_8_1 & portsEOI_filtered_2_2_valid
      : portsEOI_filtered_1_2_valid | portsEOI_filtered_2_2_valid;
  reg         beatsLeft_9;
  wire [2:0]  readys_valid_9 =
    {portsAOI_filtered_2_3_valid, portsAOI_filtered_1_3_valid, portsAOI_filtered_3_valid};
  reg  [2:0]  readys_mask_9;
  wire [2:0]  _readys_filter_T_19 = readys_valid_9 & ~readys_mask_9;
  wire [3:0]  _GEN_2 =
    {_readys_filter_T_19[1:0], portsAOI_filtered_2_3_valid, portsAOI_filtered_1_3_valid}
    | {_readys_filter_T_19, portsAOI_filtered_2_3_valid};
  wire [2:0]  readys_readys_9 =
    ~({readys_mask_9[2],
       _readys_filter_T_19[2] | readys_mask_9[1],
       _GEN_2[3] | readys_mask_9[0]}
      & (_GEN_2[2:0] | {_readys_filter_T_19[2], _GEN_2[3:2]}));
  wire        winner_9_0 = readys_readys_9[0] & portsAOI_filtered_3_valid;
  wire        winner_9_1 = readys_readys_9[1] & portsAOI_filtered_1_3_valid;
  wire        winner_9_2 = readys_readys_9[2] & portsAOI_filtered_2_3_valid;
  reg         state_9_0;
  reg         state_9_1;
  reg         state_9_2;
  wire        muxState_9_0 = beatsLeft_9 ? state_9_0 : winner_9_0;
  wire        muxState_9_1 = beatsLeft_9 ? state_9_1 : winner_9_1;
  wire        muxState_9_2 = beatsLeft_9 ? state_9_2 : winner_9_2;
  assign allowed_9_0 = beatsLeft_9 ? state_9_0 : readys_readys_9[0];
  assign allowed_9_1 = beatsLeft_9 ? state_9_1 : readys_readys_9[1];
  assign allowed_9_2 = beatsLeft_9 ? state_9_2 : readys_readys_9[2];
  wire        out_3_a_valid =
    beatsLeft_9
      ? state_9_0 & portsAOI_filtered_3_valid | state_9_1 & portsAOI_filtered_1_3_valid
        | state_9_2 & portsAOI_filtered_2_3_valid
      : portsAOI_filtered_3_valid | portsAOI_filtered_1_3_valid
        | portsAOI_filtered_2_3_valid;
  reg         beatsLeft_10;
  wire [1:0]  readys_valid_10 =
    {portsCOI_filtered_2_3_valid, portsCOI_filtered_1_3_valid};
  reg  [1:0]  readys_mask_10;
  wire [1:0]  _readys_filter_T_21 = readys_valid_10 & ~readys_mask_10;
  wire [1:0]  readys_readys_10 =
    ~({readys_mask_10[1], _readys_filter_T_21[1] | readys_mask_10[0]}
      & ({_readys_filter_T_21[0], portsCOI_filtered_2_3_valid} | _readys_filter_T_21));
  wire        winner_10_0 = readys_readys_10[0] & portsCOI_filtered_1_3_valid;
  wire        winner_10_1 = readys_readys_10[1] & portsCOI_filtered_2_3_valid;
  reg         state_10_0;
  reg         state_10_1;
  wire        muxState_10_0 = beatsLeft_10 ? state_10_0 : winner_10_0;
  wire        muxState_10_1 = beatsLeft_10 ? state_10_1 : winner_10_1;
  assign allowed_10_0 = beatsLeft_10 ? state_10_0 : readys_readys_10[0];
  assign allowed_10_1 = beatsLeft_10 ? state_10_1 : readys_readys_10[1];
  wire        out_3_c_valid =
    beatsLeft_10
      ? state_10_0 & portsCOI_filtered_1_3_valid | state_10_1
        & portsCOI_filtered_2_3_valid
      : portsCOI_filtered_1_3_valid | portsCOI_filtered_2_3_valid;
  reg         beatsLeft_11;
  wire [1:0]  readys_valid_11 =
    {portsEOI_filtered_2_3_valid, portsEOI_filtered_1_3_valid};
  reg  [1:0]  readys_mask_11;
  wire [1:0]  _readys_filter_T_23 = readys_valid_11 & ~readys_mask_11;
  wire [1:0]  readys_readys_11 =
    ~({readys_mask_11[1], _readys_filter_T_23[1] | readys_mask_11[0]}
      & ({_readys_filter_T_23[0], portsEOI_filtered_2_3_valid} | _readys_filter_T_23));
  wire        winner_11_0 = readys_readys_11[0] & portsEOI_filtered_1_3_valid;
  wire        winner_11_1 = readys_readys_11[1] & portsEOI_filtered_2_3_valid;
  reg         state_11_0;
  reg         state_11_1;
  assign allowed_11_0 = beatsLeft_11 ? state_11_0 : readys_readys_11[0];
  assign allowed_11_1 = beatsLeft_11 ? state_11_1 : readys_readys_11[1];
  wire        out_3_e_valid =
    beatsLeft_11
      ? state_11_0 & portsEOI_filtered_1_3_valid | state_11_1
        & portsEOI_filtered_2_3_valid
      : portsEOI_filtered_1_3_valid | portsEOI_filtered_2_3_valid;
  reg         beatsLeft_12;
  wire [3:0]  readys_valid_12 =
    {portsDIO_filtered_3_0_valid,
     portsDIO_filtered_2_0_valid,
     portsDIO_filtered_1_0_valid,
     portsDIO_filtered_0_valid};
  reg  [3:0]  readys_mask_12;
  wire [3:0]  _readys_filter_T_25 = readys_valid_12 & ~readys_mask_12;
  wire [5:0]  _GEN_3 =
    {_readys_filter_T_25[2:0],
     portsDIO_filtered_3_0_valid,
     portsDIO_filtered_2_0_valid,
     portsDIO_filtered_1_0_valid}
    | {_readys_filter_T_25, portsDIO_filtered_3_0_valid, portsDIO_filtered_2_0_valid};
  wire [4:0]  _GEN_4 = _GEN_3[4:0] | {_readys_filter_T_25[3], _GEN_3[5:2]};
  wire [3:0]  readys_readys_12 =
    ~({readys_mask_12[3],
       _readys_filter_T_25[3] | readys_mask_12[2],
       _GEN_3[5] | readys_mask_12[1],
       _GEN_4[4] | readys_mask_12[0]} & _GEN_4[3:0]);
  wire        winner_12_0 = readys_readys_12[0] & portsDIO_filtered_0_valid;
  wire        winner_12_1 = readys_readys_12[1] & portsDIO_filtered_1_0_valid;
  wire        winner_12_2 = readys_readys_12[2] & portsDIO_filtered_2_0_valid;
  wire        winner_12_3 = readys_readys_12[3] & portsDIO_filtered_3_0_valid;
  reg         state_12_0;
  reg         state_12_1;
  reg         state_12_2;
  reg         state_12_3;
  wire        muxState_12_0 = beatsLeft_12 ? state_12_0 : winner_12_0;
  wire        muxState_12_1 = beatsLeft_12 ? state_12_1 : winner_12_1;
  wire        muxState_12_2 = beatsLeft_12 ? state_12_2 : winner_12_2;
  wire        muxState_12_3 = beatsLeft_12 ? state_12_3 : winner_12_3;
  assign allowed_12_0 = beatsLeft_12 ? state_12_0 : readys_readys_12[0];
  assign allowed_12_1 = beatsLeft_12 ? state_12_1 : readys_readys_12[1];
  assign allowed_12_2 = beatsLeft_12 ? state_12_2 : readys_readys_12[2];
  assign allowed_12_3 = beatsLeft_12 ? state_12_3 : readys_readys_12[3];
  wire        in_0_d_valid =
    beatsLeft_12
      ? state_12_0 & portsDIO_filtered_0_valid | state_12_1 & portsDIO_filtered_1_0_valid
        | state_12_2 & portsDIO_filtered_2_0_valid | state_12_3
        & portsDIO_filtered_3_0_valid
      : portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid
        | portsDIO_filtered_2_0_valid | portsDIO_filtered_3_0_valid;
  reg         beatsLeft_13;
  wire [3:0]  readys_valid_13 =
    {portsBIO_filtered_3_1_valid,
     portsBIO_filtered_2_1_valid,
     portsBIO_filtered_1_1_valid,
     portsBIO_filtered_1_valid};
  reg  [3:0]  readys_mask_13;
  wire [3:0]  _readys_filter_T_27 = readys_valid_13 & ~readys_mask_13;
  wire [5:0]  _GEN_5 =
    {_readys_filter_T_27[2:0],
     portsBIO_filtered_3_1_valid,
     portsBIO_filtered_2_1_valid,
     portsBIO_filtered_1_1_valid}
    | {_readys_filter_T_27, portsBIO_filtered_3_1_valid, portsBIO_filtered_2_1_valid};
  wire [4:0]  _GEN_6 = _GEN_5[4:0] | {_readys_filter_T_27[3], _GEN_5[5:2]};
  wire [3:0]  readys_readys_13 =
    ~({readys_mask_13[3],
       _readys_filter_T_27[3] | readys_mask_13[2],
       _GEN_5[5] | readys_mask_13[1],
       _GEN_6[4] | readys_mask_13[0]} & _GEN_6[3:0]);
  wire        winner_13_0 = readys_readys_13[0] & portsBIO_filtered_1_valid;
  wire        winner_13_1 = readys_readys_13[1] & portsBIO_filtered_1_1_valid;
  wire        winner_13_2 = readys_readys_13[2] & portsBIO_filtered_2_1_valid;
  wire        winner_13_3 = readys_readys_13[3] & portsBIO_filtered_3_1_valid;
  reg         state_13_0;
  reg         state_13_1;
  reg         state_13_2;
  reg         state_13_3;
  wire        muxState_13_0 = beatsLeft_13 ? state_13_0 : winner_13_0;
  wire        muxState_13_1 = beatsLeft_13 ? state_13_1 : winner_13_1;
  wire        muxState_13_2 = beatsLeft_13 ? state_13_2 : winner_13_2;
  wire        muxState_13_3 = beatsLeft_13 ? state_13_3 : winner_13_3;
  assign allowed_13_0 = beatsLeft_13 ? state_13_0 : readys_readys_13[0];
  assign allowed_13_1 = beatsLeft_13 ? state_13_1 : readys_readys_13[1];
  assign allowed_13_2 = beatsLeft_13 ? state_13_2 : readys_readys_13[2];
  assign allowed_13_3 = beatsLeft_13 ? state_13_3 : readys_readys_13[3];
  wire        in_1_b_valid =
    beatsLeft_13
      ? state_13_0 & portsBIO_filtered_1_valid | state_13_1 & portsBIO_filtered_1_1_valid
        | state_13_2 & portsBIO_filtered_2_1_valid | state_13_3
        & portsBIO_filtered_3_1_valid
      : portsBIO_filtered_1_valid | portsBIO_filtered_1_1_valid
        | portsBIO_filtered_2_1_valid | portsBIO_filtered_3_1_valid;
  wire        _GEN_7 = muxState_13_0 | muxState_13_1 | muxState_13_2 | muxState_13_3;
  reg         beatsLeft_14;
  wire [3:0]  readys_valid_14 =
    {portsDIO_filtered_3_1_valid,
     portsDIO_filtered_2_1_valid,
     portsDIO_filtered_1_1_valid,
     portsDIO_filtered_1_valid};
  reg  [3:0]  readys_mask_14;
  wire [3:0]  _readys_filter_T_29 = readys_valid_14 & ~readys_mask_14;
  wire [5:0]  _GEN_8 =
    {_readys_filter_T_29[2:0],
     portsDIO_filtered_3_1_valid,
     portsDIO_filtered_2_1_valid,
     portsDIO_filtered_1_1_valid}
    | {_readys_filter_T_29, portsDIO_filtered_3_1_valid, portsDIO_filtered_2_1_valid};
  wire [4:0]  _GEN_9 = _GEN_8[4:0] | {_readys_filter_T_29[3], _GEN_8[5:2]};
  wire [3:0]  readys_readys_14 =
    ~({readys_mask_14[3],
       _readys_filter_T_29[3] | readys_mask_14[2],
       _GEN_8[5] | readys_mask_14[1],
       _GEN_9[4] | readys_mask_14[0]} & _GEN_9[3:0]);
  wire        winner_14_0 = readys_readys_14[0] & portsDIO_filtered_1_valid;
  wire        winner_14_1 = readys_readys_14[1] & portsDIO_filtered_1_1_valid;
  wire        winner_14_2 = readys_readys_14[2] & portsDIO_filtered_2_1_valid;
  wire        winner_14_3 = readys_readys_14[3] & portsDIO_filtered_3_1_valid;
  reg         state_14_0;
  reg         state_14_1;
  reg         state_14_2;
  reg         state_14_3;
  wire        muxState_14_0 = beatsLeft_14 ? state_14_0 : winner_14_0;
  wire        muxState_14_1 = beatsLeft_14 ? state_14_1 : winner_14_1;
  wire        muxState_14_2 = beatsLeft_14 ? state_14_2 : winner_14_2;
  wire        muxState_14_3 = beatsLeft_14 ? state_14_3 : winner_14_3;
  assign allowed_14_0 = beatsLeft_14 ? state_14_0 : readys_readys_14[0];
  assign allowed_14_1 = beatsLeft_14 ? state_14_1 : readys_readys_14[1];
  assign allowed_14_2 = beatsLeft_14 ? state_14_2 : readys_readys_14[2];
  assign allowed_14_3 = beatsLeft_14 ? state_14_3 : readys_readys_14[3];
  wire        in_1_d_valid =
    beatsLeft_14
      ? state_14_0 & portsDIO_filtered_1_valid | state_14_1 & portsDIO_filtered_1_1_valid
        | state_14_2 & portsDIO_filtered_2_1_valid | state_14_3
        & portsDIO_filtered_3_1_valid
      : portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid
        | portsDIO_filtered_2_1_valid | portsDIO_filtered_3_1_valid;
  reg         beatsLeft_15;
  wire [3:0]  readys_valid_15 =
    {portsBIO_filtered_3_2_valid,
     portsBIO_filtered_2_2_valid,
     portsBIO_filtered_1_2_valid,
     portsBIO_filtered_2_valid};
  reg  [3:0]  readys_mask_15;
  wire [3:0]  _readys_filter_T_31 = readys_valid_15 & ~readys_mask_15;
  wire [5:0]  _GEN_10 =
    {_readys_filter_T_31[2:0],
     portsBIO_filtered_3_2_valid,
     portsBIO_filtered_2_2_valid,
     portsBIO_filtered_1_2_valid}
    | {_readys_filter_T_31, portsBIO_filtered_3_2_valid, portsBIO_filtered_2_2_valid};
  wire [4:0]  _GEN_11 = _GEN_10[4:0] | {_readys_filter_T_31[3], _GEN_10[5:2]};
  wire [3:0]  readys_readys_15 =
    ~({readys_mask_15[3],
       _readys_filter_T_31[3] | readys_mask_15[2],
       _GEN_10[5] | readys_mask_15[1],
       _GEN_11[4] | readys_mask_15[0]} & _GEN_11[3:0]);
  wire        winner_15_0 = readys_readys_15[0] & portsBIO_filtered_2_valid;
  wire        winner_15_1 = readys_readys_15[1] & portsBIO_filtered_1_2_valid;
  wire        winner_15_2 = readys_readys_15[2] & portsBIO_filtered_2_2_valid;
  wire        winner_15_3 = readys_readys_15[3] & portsBIO_filtered_3_2_valid;
  reg         state_15_0;
  reg         state_15_1;
  reg         state_15_2;
  reg         state_15_3;
  wire        muxState_15_0 = beatsLeft_15 ? state_15_0 : winner_15_0;
  wire        muxState_15_1 = beatsLeft_15 ? state_15_1 : winner_15_1;
  wire        muxState_15_2 = beatsLeft_15 ? state_15_2 : winner_15_2;
  wire        muxState_15_3 = beatsLeft_15 ? state_15_3 : winner_15_3;
  assign allowed_15_0 = beatsLeft_15 ? state_15_0 : readys_readys_15[0];
  assign allowed_15_1 = beatsLeft_15 ? state_15_1 : readys_readys_15[1];
  assign allowed_15_2 = beatsLeft_15 ? state_15_2 : readys_readys_15[2];
  assign allowed_15_3 = beatsLeft_15 ? state_15_3 : readys_readys_15[3];
  wire        in_2_b_valid =
    beatsLeft_15
      ? state_15_0 & portsBIO_filtered_2_valid | state_15_1 & portsBIO_filtered_1_2_valid
        | state_15_2 & portsBIO_filtered_2_2_valid | state_15_3
        & portsBIO_filtered_3_2_valid
      : portsBIO_filtered_2_valid | portsBIO_filtered_1_2_valid
        | portsBIO_filtered_2_2_valid | portsBIO_filtered_3_2_valid;
  wire        _GEN_12 = muxState_15_0 | muxState_15_1 | muxState_15_2 | muxState_15_3;
  reg         beatsLeft_16;
  wire [3:0]  readys_valid_16 =
    {portsDIO_filtered_3_2_valid,
     portsDIO_filtered_2_2_valid,
     portsDIO_filtered_1_2_valid,
     portsDIO_filtered_2_valid};
  reg  [3:0]  readys_mask_16;
  wire [3:0]  _readys_filter_T_33 = readys_valid_16 & ~readys_mask_16;
  wire [5:0]  _GEN_13 =
    {_readys_filter_T_33[2:0],
     portsDIO_filtered_3_2_valid,
     portsDIO_filtered_2_2_valid,
     portsDIO_filtered_1_2_valid}
    | {_readys_filter_T_33, portsDIO_filtered_3_2_valid, portsDIO_filtered_2_2_valid};
  wire [4:0]  _GEN_14 = _GEN_13[4:0] | {_readys_filter_T_33[3], _GEN_13[5:2]};
  wire [3:0]  readys_readys_16 =
    ~({readys_mask_16[3],
       _readys_filter_T_33[3] | readys_mask_16[2],
       _GEN_13[5] | readys_mask_16[1],
       _GEN_14[4] | readys_mask_16[0]} & _GEN_14[3:0]);
  wire        winner_16_0 = readys_readys_16[0] & portsDIO_filtered_2_valid;
  wire        winner_16_1 = readys_readys_16[1] & portsDIO_filtered_1_2_valid;
  wire        winner_16_2 = readys_readys_16[2] & portsDIO_filtered_2_2_valid;
  wire        winner_16_3 = readys_readys_16[3] & portsDIO_filtered_3_2_valid;
  reg         state_16_0;
  reg         state_16_1;
  reg         state_16_2;
  reg         state_16_3;
  wire        muxState_16_0 = beatsLeft_16 ? state_16_0 : winner_16_0;
  wire        muxState_16_1 = beatsLeft_16 ? state_16_1 : winner_16_1;
  wire        muxState_16_2 = beatsLeft_16 ? state_16_2 : winner_16_2;
  wire        muxState_16_3 = beatsLeft_16 ? state_16_3 : winner_16_3;
  assign allowed_16_0 = beatsLeft_16 ? state_16_0 : readys_readys_16[0];
  assign allowed_16_1 = beatsLeft_16 ? state_16_1 : readys_readys_16[1];
  assign allowed_16_2 = beatsLeft_16 ? state_16_2 : readys_readys_16[2];
  assign allowed_16_3 = beatsLeft_16 ? state_16_3 : readys_readys_16[3];
  wire        in_2_d_valid =
    beatsLeft_16
      ? state_16_0 & portsDIO_filtered_2_valid | state_16_1 & portsDIO_filtered_1_2_valid
        | state_16_2 & portsDIO_filtered_2_2_valid | state_16_3
        & portsDIO_filtered_3_2_valid
      : portsDIO_filtered_2_valid | portsDIO_filtered_1_2_valid
        | portsDIO_filtered_2_2_valid | portsDIO_filtered_3_2_valid;
  wire [2:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [2:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[1:0], 1'h0};
  wire [1:0]  _readys_mask_T_8 = readys_readys_1 & readys_valid_1;
  wire [1:0]  _readys_mask_T_13 = readys_readys_2 & readys_valid_2;
  wire [2:0]  _readys_mask_T_18 = readys_readys_3 & readys_valid_3;
  wire [2:0]  _readys_mask_T_21 = _readys_mask_T_18 | {_readys_mask_T_18[1:0], 1'h0};
  wire [1:0]  _readys_mask_T_26 = readys_readys_4 & readys_valid_4;
  wire [1:0]  _readys_mask_T_31 = readys_readys_5 & readys_valid_5;
  wire [2:0]  _readys_mask_T_36 = readys_readys_6 & readys_valid_6;
  wire [2:0]  _readys_mask_T_39 = _readys_mask_T_36 | {_readys_mask_T_36[1:0], 1'h0};
  wire [1:0]  _readys_mask_T_44 = readys_readys_7 & readys_valid_7;
  wire [1:0]  _readys_mask_T_49 = readys_readys_8 & readys_valid_8;
  wire [2:0]  _readys_mask_T_54 = readys_readys_9 & readys_valid_9;
  wire [2:0]  _readys_mask_T_57 = _readys_mask_T_54 | {_readys_mask_T_54[1:0], 1'h0};
  wire [1:0]  _readys_mask_T_62 = readys_readys_10 & readys_valid_10;
  wire [1:0]  _readys_mask_T_67 = readys_readys_11 & readys_valid_11;
  wire [3:0]  _readys_mask_T_72 = readys_readys_12 & readys_valid_12;
  wire [3:0]  _readys_mask_T_75 = _readys_mask_T_72 | {_readys_mask_T_72[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_80 = readys_readys_13 & readys_valid_13;
  wire [3:0]  _readys_mask_T_83 = _readys_mask_T_80 | {_readys_mask_T_80[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_88 = readys_readys_14 & readys_valid_14;
  wire [3:0]  _readys_mask_T_91 = _readys_mask_T_88 | {_readys_mask_T_88[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_96 = readys_readys_15 & readys_valid_15;
  wire [3:0]  _readys_mask_T_99 = _readys_mask_T_96 | {_readys_mask_T_96[2:0], 1'h0};
  wire [3:0]  _readys_mask_T_104 = readys_readys_16 & readys_valid_16;
  wire [3:0]  _readys_mask_T_107 = _readys_mask_T_104 | {_readys_mask_T_104[2:0], 1'h0};
  wire [12:0] _beatsAI_decode_T = 13'h3F << auto_in_0_a_bits_size;
  wire [12:0] _beatsAI_decode_T_3 = 13'h3F << auto_in_1_a_bits_size;
  wire [12:0] _beatsAI_decode_T_6 = 13'h3F << auto_in_2_a_bits_size;
  wire [12:0] _beatsCI_decode_T_3 = 13'h3F << auto_in_1_c_bits_size;
  wire [12:0] _beatsCI_decode_T_6 = 13'h3F << auto_in_2_c_bits_size;
  wire [12:0] _beatsDO_decode_T = 13'h3F << auto_out_0_d_bits_size;
  wire [12:0] _beatsDO_decode_T_3 = 13'h3F << auto_out_1_d_bits_size;
  wire [12:0] _beatsDO_decode_T_6 = 13'h3F << auto_out_2_d_bits_size;
  wire [12:0] _beatsDO_decode_T_9 = 13'h3F << auto_out_3_d_bits_size;
  wire        latch = ~beatsLeft & auto_out_0_a_ready;
  wire        latch_1 = ~beatsLeft_1 & auto_out_0_c_ready;
  wire        latch_3 = ~beatsLeft_3 & auto_out_1_a_ready;
  wire        latch_4 = ~beatsLeft_4 & auto_out_1_c_ready;
  wire        latch_6 = ~beatsLeft_6 & auto_out_2_a_ready;
  wire        latch_7 = ~beatsLeft_7 & auto_out_2_c_ready;
  wire        latch_9 = ~beatsLeft_9 & auto_out_3_a_ready;
  wire        latch_10 = ~beatsLeft_10 & auto_out_3_c_ready;
  wire        latch_12 = ~beatsLeft_12 & auto_in_0_d_ready;
  wire        latch_13 = ~beatsLeft_13 & auto_in_1_b_ready;
  wire        latch_14 = ~beatsLeft_14 & auto_in_1_d_ready;
  wire        latch_15 = ~beatsLeft_15 & auto_in_2_b_ready;
  wire        latch_16 = ~beatsLeft_16 & auto_in_2_d_ready;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 3'h7;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      beatsLeft_1 <= 1'h0;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      beatsLeft_2 <= 1'h0;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      beatsLeft_3 <= 1'h0;
      readys_mask_3 <= 3'h7;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
      state_3_2 <= 1'h0;
      beatsLeft_4 <= 1'h0;
      readys_mask_4 <= 2'h3;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      beatsLeft_5 <= 1'h0;
      readys_mask_5 <= 2'h3;
      state_5_0 <= 1'h0;
      state_5_1 <= 1'h0;
      beatsLeft_6 <= 1'h0;
      readys_mask_6 <= 3'h7;
      state_6_0 <= 1'h0;
      state_6_1 <= 1'h0;
      state_6_2 <= 1'h0;
      beatsLeft_7 <= 1'h0;
      readys_mask_7 <= 2'h3;
      state_7_0 <= 1'h0;
      state_7_1 <= 1'h0;
      beatsLeft_8 <= 1'h0;
      readys_mask_8 <= 2'h3;
      state_8_0 <= 1'h0;
      state_8_1 <= 1'h0;
      beatsLeft_9 <= 1'h0;
      readys_mask_9 <= 3'h7;
      state_9_0 <= 1'h0;
      state_9_1 <= 1'h0;
      state_9_2 <= 1'h0;
      beatsLeft_10 <= 1'h0;
      readys_mask_10 <= 2'h3;
      state_10_0 <= 1'h0;
      state_10_1 <= 1'h0;
      beatsLeft_11 <= 1'h0;
      readys_mask_11 <= 2'h3;
      state_11_0 <= 1'h0;
      state_11_1 <= 1'h0;
      beatsLeft_12 <= 1'h0;
      readys_mask_12 <= 4'hF;
      state_12_0 <= 1'h0;
      state_12_1 <= 1'h0;
      state_12_2 <= 1'h0;
      state_12_3 <= 1'h0;
      beatsLeft_13 <= 1'h0;
      readys_mask_13 <= 4'hF;
      state_13_0 <= 1'h0;
      state_13_1 <= 1'h0;
      state_13_2 <= 1'h0;
      state_13_3 <= 1'h0;
      beatsLeft_14 <= 1'h0;
      readys_mask_14 <= 4'hF;
      state_14_0 <= 1'h0;
      state_14_1 <= 1'h0;
      state_14_2 <= 1'h0;
      state_14_3 <= 1'h0;
      beatsLeft_15 <= 1'h0;
      readys_mask_15 <= 4'hF;
      state_15_0 <= 1'h0;
      state_15_1 <= 1'h0;
      state_15_2 <= 1'h0;
      state_15_3 <= 1'h0;
      beatsLeft_16 <= 1'h0;
      readys_mask_16 <= 4'hF;
      state_16_0 <= 1'h0;
      state_16_1 <= 1'h0;
      state_16_2 <= 1'h0;
      state_16_3 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          winner_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5]) | winner_1
          & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5]) | winner_2
          & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft <= 1'(beatsLeft - (auto_out_0_a_ready & out_0_a_valid));
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_3 | {_readys_mask_T_3[0], 2'h0};
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
      end
      if (latch_1)
        beatsLeft_1 <=
          winner_1_0 & auto_in_1_c_bits_opcode[0] & ~(_beatsCI_decode_T_3[5]) | winner_1_1
          & auto_in_2_c_bits_opcode[0] & ~(_beatsCI_decode_T_6[5]);
      else
        beatsLeft_1 <= 1'(beatsLeft_1 - (auto_out_0_c_ready & out_0_c_valid));
      if (latch_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_8 | {_readys_mask_T_8[0], 1'h0};
      if (beatsLeft_1) begin
      end
      else begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
      end
      beatsLeft_2 <= beatsLeft_2 & 1'(beatsLeft_2 - out_0_e_valid);
      if (~beatsLeft_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_13 | {_readys_mask_T_13[0], 1'h0};
      if (beatsLeft_2) begin
      end
      else begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
      end
      if (latch_3)
        beatsLeft_3 <=
          winner_3_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_3_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5])
          | winner_3_2 & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft_3 <= 1'(beatsLeft_3 - (auto_out_1_a_ready & out_1_a_valid));
      if (latch_3 & (|readys_valid_3))
        readys_mask_3 <= _readys_mask_T_21 | {_readys_mask_T_21[0], 2'h0};
      if (beatsLeft_3) begin
      end
      else begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
        state_3_2 <= winner_3_2;
      end
      if (latch_4)
        beatsLeft_4 <=
          winner_4_0 & auto_in_1_c_bits_opcode[0] & ~(_beatsCI_decode_T_3[5]) | winner_4_1
          & auto_in_2_c_bits_opcode[0] & ~(_beatsCI_decode_T_6[5]);
      else
        beatsLeft_4 <= 1'(beatsLeft_4 - (auto_out_1_c_ready & out_1_c_valid));
      if (latch_4 & (|readys_valid_4))
        readys_mask_4 <= _readys_mask_T_26 | {_readys_mask_T_26[0], 1'h0};
      if (beatsLeft_4) begin
      end
      else begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
      end
      beatsLeft_5 <= beatsLeft_5 & 1'(beatsLeft_5 - out_1_e_valid);
      if (~beatsLeft_5 & (|readys_valid_5))
        readys_mask_5 <= _readys_mask_T_31 | {_readys_mask_T_31[0], 1'h0};
      if (beatsLeft_5) begin
      end
      else begin
        state_5_0 <= winner_5_0;
        state_5_1 <= winner_5_1;
      end
      if (latch_6)
        beatsLeft_6 <=
          winner_6_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_6_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5])
          | winner_6_2 & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft_6 <= 1'(beatsLeft_6 - (auto_out_2_a_ready & out_2_a_valid));
      if (latch_6 & (|readys_valid_6))
        readys_mask_6 <= _readys_mask_T_39 | {_readys_mask_T_39[0], 2'h0};
      if (beatsLeft_6) begin
      end
      else begin
        state_6_0 <= winner_6_0;
        state_6_1 <= winner_6_1;
        state_6_2 <= winner_6_2;
      end
      if (latch_7)
        beatsLeft_7 <=
          winner_7_0 & auto_in_1_c_bits_opcode[0] & ~(_beatsCI_decode_T_3[5]) | winner_7_1
          & auto_in_2_c_bits_opcode[0] & ~(_beatsCI_decode_T_6[5]);
      else
        beatsLeft_7 <= 1'(beatsLeft_7 - (auto_out_2_c_ready & out_2_c_valid));
      if (latch_7 & (|readys_valid_7))
        readys_mask_7 <= _readys_mask_T_44 | {_readys_mask_T_44[0], 1'h0};
      if (beatsLeft_7) begin
      end
      else begin
        state_7_0 <= winner_7_0;
        state_7_1 <= winner_7_1;
      end
      beatsLeft_8 <= beatsLeft_8 & 1'(beatsLeft_8 - out_2_e_valid);
      if (~beatsLeft_8 & (|readys_valid_8))
        readys_mask_8 <= _readys_mask_T_49 | {_readys_mask_T_49[0], 1'h0};
      if (beatsLeft_8) begin
      end
      else begin
        state_8_0 <= winner_8_0;
        state_8_1 <= winner_8_1;
      end
      if (latch_9)
        beatsLeft_9 <=
          winner_9_0 & ~(auto_in_0_a_bits_opcode[2]) & ~(_beatsAI_decode_T[5])
          | winner_9_1 & ~(auto_in_1_a_bits_opcode[2]) & ~(_beatsAI_decode_T_3[5])
          | winner_9_2 & ~(auto_in_2_a_bits_opcode[2]) & ~(_beatsAI_decode_T_6[5]);
      else
        beatsLeft_9 <= 1'(beatsLeft_9 - (auto_out_3_a_ready & out_3_a_valid));
      if (latch_9 & (|readys_valid_9))
        readys_mask_9 <= _readys_mask_T_57 | {_readys_mask_T_57[0], 2'h0};
      if (beatsLeft_9) begin
      end
      else begin
        state_9_0 <= winner_9_0;
        state_9_1 <= winner_9_1;
        state_9_2 <= winner_9_2;
      end
      if (latch_10)
        beatsLeft_10 <=
          winner_10_0 & auto_in_1_c_bits_opcode[0] & ~(_beatsCI_decode_T_3[5])
          | winner_10_1 & auto_in_2_c_bits_opcode[0] & ~(_beatsCI_decode_T_6[5]);
      else
        beatsLeft_10 <= 1'(beatsLeft_10 - (auto_out_3_c_ready & out_3_c_valid));
      if (latch_10 & (|readys_valid_10))
        readys_mask_10 <= _readys_mask_T_62 | {_readys_mask_T_62[0], 1'h0};
      if (beatsLeft_10) begin
      end
      else begin
        state_10_0 <= winner_10_0;
        state_10_1 <= winner_10_1;
      end
      beatsLeft_11 <= beatsLeft_11 & 1'(beatsLeft_11 - out_3_e_valid);
      if (~beatsLeft_11 & (|readys_valid_11))
        readys_mask_11 <= _readys_mask_T_67 | {_readys_mask_T_67[0], 1'h0};
      if (beatsLeft_11) begin
      end
      else begin
        state_11_0 <= winner_11_0;
        state_11_1 <= winner_11_1;
      end
      if (latch_12)
        beatsLeft_12 <=
          winner_12_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5])
          | winner_12_1 & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5])
          | winner_12_2 & auto_out_2_d_bits_opcode[0] & ~(_beatsDO_decode_T_6[5])
          | winner_12_3 & auto_out_3_d_bits_opcode[0] & ~(_beatsDO_decode_T_9[5]);
      else
        beatsLeft_12 <= 1'(beatsLeft_12 - (auto_in_0_d_ready & in_0_d_valid));
      if (latch_12 & (|readys_valid_12))
        readys_mask_12 <= _readys_mask_T_75 | {_readys_mask_T_75[1:0], 2'h0};
      if (beatsLeft_12) begin
      end
      else begin
        state_12_0 <= winner_12_0;
        state_12_1 <= winner_12_1;
        state_12_2 <= winner_12_2;
        state_12_3 <= winner_12_3;
      end
      beatsLeft_13 <= ~latch_13 & 1'(beatsLeft_13 - (auto_in_1_b_ready & in_1_b_valid));
      if (latch_13 & (|readys_valid_13))
        readys_mask_13 <= _readys_mask_T_83 | {_readys_mask_T_83[1:0], 2'h0};
      if (beatsLeft_13) begin
      end
      else begin
        state_13_0 <= winner_13_0;
        state_13_1 <= winner_13_1;
        state_13_2 <= winner_13_2;
        state_13_3 <= winner_13_3;
      end
      if (latch_14)
        beatsLeft_14 <=
          winner_14_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5])
          | winner_14_1 & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5])
          | winner_14_2 & auto_out_2_d_bits_opcode[0] & ~(_beatsDO_decode_T_6[5])
          | winner_14_3 & auto_out_3_d_bits_opcode[0] & ~(_beatsDO_decode_T_9[5]);
      else
        beatsLeft_14 <= 1'(beatsLeft_14 - (auto_in_1_d_ready & in_1_d_valid));
      if (latch_14 & (|readys_valid_14))
        readys_mask_14 <= _readys_mask_T_91 | {_readys_mask_T_91[1:0], 2'h0};
      if (beatsLeft_14) begin
      end
      else begin
        state_14_0 <= winner_14_0;
        state_14_1 <= winner_14_1;
        state_14_2 <= winner_14_2;
        state_14_3 <= winner_14_3;
      end
      beatsLeft_15 <= ~latch_15 & 1'(beatsLeft_15 - (auto_in_2_b_ready & in_2_b_valid));
      if (latch_15 & (|readys_valid_15))
        readys_mask_15 <= _readys_mask_T_99 | {_readys_mask_T_99[1:0], 2'h0};
      if (beatsLeft_15) begin
      end
      else begin
        state_15_0 <= winner_15_0;
        state_15_1 <= winner_15_1;
        state_15_2 <= winner_15_2;
        state_15_3 <= winner_15_3;
      end
      if (latch_16)
        beatsLeft_16 <=
          winner_16_0 & auto_out_0_d_bits_opcode[0] & ~(_beatsDO_decode_T[5])
          | winner_16_1 & auto_out_1_d_bits_opcode[0] & ~(_beatsDO_decode_T_3[5])
          | winner_16_2 & auto_out_2_d_bits_opcode[0] & ~(_beatsDO_decode_T_6[5])
          | winner_16_3 & auto_out_3_d_bits_opcode[0] & ~(_beatsDO_decode_T_9[5]);
      else
        beatsLeft_16 <= 1'(beatsLeft_16 - (auto_in_2_d_ready & in_2_d_valid));
      if (latch_16 & (|readys_valid_16))
        readys_mask_16 <= _readys_mask_T_107 | {_readys_mask_T_107[1:0], 2'h0};
      if (beatsLeft_16) begin
      end
      else begin
        state_16_0 <= winner_16_0;
        state_16_1 <= winner_16_1;
        state_16_2 <= winner_16_2;
        state_16_3 <= winner_16_3;
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        beatsLeft = _RANDOM[2'h0][0];
        readys_mask = _RANDOM[2'h0][3:1];
        state_0 = _RANDOM[2'h0][4];
        state_1 = _RANDOM[2'h0][5];
        state_2 = _RANDOM[2'h0][6];
        beatsLeft_1 = _RANDOM[2'h0][7];
        readys_mask_1 = _RANDOM[2'h0][9:8];
        state_1_0 = _RANDOM[2'h0][10];
        state_1_1 = _RANDOM[2'h0][11];
        beatsLeft_2 = _RANDOM[2'h0][12];
        readys_mask_2 = _RANDOM[2'h0][14:13];
        state_2_0 = _RANDOM[2'h0][15];
        state_2_1 = _RANDOM[2'h0][16];
        beatsLeft_3 = _RANDOM[2'h0][17];
        readys_mask_3 = _RANDOM[2'h0][20:18];
        state_3_0 = _RANDOM[2'h0][21];
        state_3_1 = _RANDOM[2'h0][22];
        state_3_2 = _RANDOM[2'h0][23];
        beatsLeft_4 = _RANDOM[2'h0][24];
        readys_mask_4 = _RANDOM[2'h0][26:25];
        state_4_0 = _RANDOM[2'h0][27];
        state_4_1 = _RANDOM[2'h0][28];
        beatsLeft_5 = _RANDOM[2'h0][29];
        readys_mask_5 = _RANDOM[2'h0][31:30];
        state_5_0 = _RANDOM[2'h1][0];
        state_5_1 = _RANDOM[2'h1][1];
        beatsLeft_6 = _RANDOM[2'h1][2];
        readys_mask_6 = _RANDOM[2'h1][5:3];
        state_6_0 = _RANDOM[2'h1][6];
        state_6_1 = _RANDOM[2'h1][7];
        state_6_2 = _RANDOM[2'h1][8];
        beatsLeft_7 = _RANDOM[2'h1][9];
        readys_mask_7 = _RANDOM[2'h1][11:10];
        state_7_0 = _RANDOM[2'h1][12];
        state_7_1 = _RANDOM[2'h1][13];
        beatsLeft_8 = _RANDOM[2'h1][14];
        readys_mask_8 = _RANDOM[2'h1][16:15];
        state_8_0 = _RANDOM[2'h1][17];
        state_8_1 = _RANDOM[2'h1][18];
        beatsLeft_9 = _RANDOM[2'h1][19];
        readys_mask_9 = _RANDOM[2'h1][22:20];
        state_9_0 = _RANDOM[2'h1][23];
        state_9_1 = _RANDOM[2'h1][24];
        state_9_2 = _RANDOM[2'h1][25];
        beatsLeft_10 = _RANDOM[2'h1][26];
        readys_mask_10 = _RANDOM[2'h1][28:27];
        state_10_0 = _RANDOM[2'h1][29];
        state_10_1 = _RANDOM[2'h1][30];
        beatsLeft_11 = _RANDOM[2'h1][31];
        readys_mask_11 = _RANDOM[2'h2][1:0];
        state_11_0 = _RANDOM[2'h2][2];
        state_11_1 = _RANDOM[2'h2][3];
        beatsLeft_12 = _RANDOM[2'h2][4];
        readys_mask_12 = _RANDOM[2'h2][8:5];
        state_12_0 = _RANDOM[2'h2][9];
        state_12_1 = _RANDOM[2'h2][10];
        state_12_2 = _RANDOM[2'h2][11];
        state_12_3 = _RANDOM[2'h2][12];
        beatsLeft_13 = _RANDOM[2'h2][13];
        readys_mask_13 = _RANDOM[2'h2][17:14];
        state_13_0 = _RANDOM[2'h2][18];
        state_13_1 = _RANDOM[2'h2][19];
        state_13_2 = _RANDOM[2'h2][20];
        state_13_3 = _RANDOM[2'h2][21];
        beatsLeft_14 = _RANDOM[2'h2][22];
        readys_mask_14 = _RANDOM[2'h2][26:23];
        state_14_0 = _RANDOM[2'h2][27];
        state_14_1 = _RANDOM[2'h2][28];
        state_14_2 = _RANDOM[2'h2][29];
        state_14_3 = _RANDOM[2'h2][30];
        beatsLeft_15 = _RANDOM[2'h2][31];
        readys_mask_15 = _RANDOM[2'h3][3:0];
        state_15_0 = _RANDOM[2'h3][4];
        state_15_1 = _RANDOM[2'h3][5];
        state_15_2 = _RANDOM[2'h3][6];
        state_15_3 = _RANDOM[2'h3][7];
        beatsLeft_16 = _RANDOM[2'h3][8];
        readys_mask_16 = _RANDOM[2'h3][12:9];
        state_16_0 = _RANDOM[2'h3][13];
        state_16_1 = _RANDOM[2'h3][14];
        state_16_2 = _RANDOM[2'h3][15];
        state_16_3 = _RANDOM[2'h3][16];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        beatsLeft = 1'h0;
        readys_mask = 3'h7;
        state_0 = 1'h0;
        state_1 = 1'h0;
        state_2 = 1'h0;
        beatsLeft_1 = 1'h0;
        readys_mask_1 = 2'h3;
        state_1_0 = 1'h0;
        state_1_1 = 1'h0;
        beatsLeft_2 = 1'h0;
        readys_mask_2 = 2'h3;
        state_2_0 = 1'h0;
        state_2_1 = 1'h0;
        beatsLeft_3 = 1'h0;
        readys_mask_3 = 3'h7;
        state_3_0 = 1'h0;
        state_3_1 = 1'h0;
        state_3_2 = 1'h0;
        beatsLeft_4 = 1'h0;
        readys_mask_4 = 2'h3;
        state_4_0 = 1'h0;
        state_4_1 = 1'h0;
        beatsLeft_5 = 1'h0;
        readys_mask_5 = 2'h3;
        state_5_0 = 1'h0;
        state_5_1 = 1'h0;
        beatsLeft_6 = 1'h0;
        readys_mask_6 = 3'h7;
        state_6_0 = 1'h0;
        state_6_1 = 1'h0;
        state_6_2 = 1'h0;
        beatsLeft_7 = 1'h0;
        readys_mask_7 = 2'h3;
        state_7_0 = 1'h0;
        state_7_1 = 1'h0;
        beatsLeft_8 = 1'h0;
        readys_mask_8 = 2'h3;
        state_8_0 = 1'h0;
        state_8_1 = 1'h0;
        beatsLeft_9 = 1'h0;
        readys_mask_9 = 3'h7;
        state_9_0 = 1'h0;
        state_9_1 = 1'h0;
        state_9_2 = 1'h0;
        beatsLeft_10 = 1'h0;
        readys_mask_10 = 2'h3;
        state_10_0 = 1'h0;
        state_10_1 = 1'h0;
        beatsLeft_11 = 1'h0;
        readys_mask_11 = 2'h3;
        state_11_0 = 1'h0;
        state_11_1 = 1'h0;
        beatsLeft_12 = 1'h0;
        readys_mask_12 = 4'hF;
        state_12_0 = 1'h0;
        state_12_1 = 1'h0;
        state_12_2 = 1'h0;
        state_12_3 = 1'h0;
        beatsLeft_13 = 1'h0;
        readys_mask_13 = 4'hF;
        state_13_0 = 1'h0;
        state_13_1 = 1'h0;
        state_13_2 = 1'h0;
        state_13_3 = 1'h0;
        beatsLeft_14 = 1'h0;
        readys_mask_14 = 4'hF;
        state_14_0 = 1'h0;
        state_14_1 = 1'h0;
        state_14_2 = 1'h0;
        state_14_3 = 1'h0;
        beatsLeft_15 = 1'h0;
        readys_mask_15 = 4'hF;
        state_15_0 = 1'h0;
        state_15_1 = 1'h0;
        state_15_2 = 1'h0;
        state_15_3 = 1'h0;
        beatsLeft_16 = 1'h0;
        readys_mask_16 = 4'hF;
        state_16_0 = 1'h0;
        state_16_1 = 1'h0;
        state_16_2 = 1'h0;
        state_16_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign auto_in_2_a_ready =
    requestAIO_2_0 & auto_out_0_a_ready & allowed_2 | requestAIO_2_1 & auto_out_1_a_ready
    & allowed_3_2 | requestAIO_2_2 & auto_out_2_a_ready & allowed_6_2
    | (&(auto_in_2_a_bits_address[7:6])) & auto_out_3_a_ready & allowed_9_2;
  assign auto_in_2_b_valid = in_2_b_valid;
  assign auto_in_2_b_bits_opcode = _GEN_12 ? 3'h6 : 3'h0;
  assign auto_in_2_b_bits_param =
    (muxState_15_0 ? auto_out_0_b_bits_param : 2'h0)
    | (muxState_15_1 ? auto_out_1_b_bits_param : 2'h0)
    | (muxState_15_2 ? auto_out_2_b_bits_param : 2'h0)
    | (muxState_15_3 ? auto_out_3_b_bits_param : 2'h0);
  assign auto_in_2_b_bits_size = _GEN_12 ? 3'h6 : 3'h0;
  assign auto_in_2_b_bits_source =
    (muxState_15_0 ? auto_out_0_b_bits_source[9:0] : 10'h0)
    | (muxState_15_1 ? auto_out_1_b_bits_source[9:0] : 10'h0)
    | (muxState_15_2 ? auto_out_2_b_bits_source[9:0] : 10'h0)
    | (muxState_15_3 ? auto_out_3_b_bits_source[9:0] : 10'h0);
  assign auto_in_2_b_bits_address =
    (muxState_15_0 ? auto_out_0_b_bits_address : 36'h0)
    | (muxState_15_1 ? auto_out_1_b_bits_address : 36'h0)
    | (muxState_15_2 ? auto_out_2_b_bits_address : 36'h0)
    | (muxState_15_3 ? auto_out_3_b_bits_address : 36'h0);
  assign auto_in_2_b_bits_mask =
    {32{muxState_15_0}} | {32{muxState_15_1}} | {32{muxState_15_2}} | {32{muxState_15_3}};
  assign auto_in_2_b_bits_data =
    (muxState_15_0 ? auto_out_0_b_bits_data : 256'h0)
    | (muxState_15_1 ? auto_out_1_b_bits_data : 256'h0)
    | (muxState_15_2 ? auto_out_2_b_bits_data : 256'h0)
    | (muxState_15_3 ? auto_out_3_b_bits_data : 256'h0);
  assign auto_in_2_c_ready =
    requestCIO_2_0 & auto_out_0_c_ready & allowed_1_1 | requestCIO_2_1
    & auto_out_1_c_ready & allowed_4_1 | requestCIO_2_2 & auto_out_2_c_ready & allowed_7_1
    | (&(auto_in_2_c_bits_address[7:6])) & auto_out_3_c_ready & allowed_10_1;
  assign auto_in_2_d_valid = in_2_d_valid;
  assign auto_in_2_d_bits_opcode =
    (muxState_16_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_16_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_16_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_16_3 ? auto_out_3_d_bits_opcode : 3'h0);
  assign auto_in_2_d_bits_param =
    (muxState_16_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_16_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_16_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_16_3 ? auto_out_3_d_bits_param : 2'h0);
  assign auto_in_2_d_bits_size =
    (muxState_16_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_16_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_16_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_16_3 ? auto_out_3_d_bits_size : 3'h0);
  assign auto_in_2_d_bits_source =
    (muxState_16_0 ? auto_out_0_d_bits_source[9:0] : 10'h0)
    | (muxState_16_1 ? auto_out_1_d_bits_source[9:0] : 10'h0)
    | (muxState_16_2 ? auto_out_2_d_bits_source[9:0] : 10'h0)
    | (muxState_16_3 ? auto_out_3_d_bits_source[9:0] : 10'h0);
  assign auto_in_2_d_bits_sink =
    (muxState_16_0 ? out_0_d_bits_sink : 6'h0)
    | (muxState_16_1 ? out_1_d_bits_sink : 6'h0)
    | (muxState_16_2 ? out_2_d_bits_sink : 6'h0)
    | (muxState_16_3 ? out_3_d_bits_sink : 6'h0);
  assign auto_in_2_d_bits_denied =
    muxState_16_0 & auto_out_0_d_bits_denied | muxState_16_1 & auto_out_1_d_bits_denied
    | muxState_16_2 & auto_out_2_d_bits_denied | muxState_16_3 & auto_out_3_d_bits_denied;
  assign auto_in_2_d_bits_echo_blockisdirty =
    muxState_16_0 & auto_out_0_d_bits_echo_blockisdirty | muxState_16_1
    & auto_out_1_d_bits_echo_blockisdirty | muxState_16_2
    & auto_out_2_d_bits_echo_blockisdirty | muxState_16_3
    & auto_out_3_d_bits_echo_blockisdirty;
  assign auto_in_2_d_bits_data =
    (muxState_16_0 ? auto_out_0_d_bits_data : 256'h0)
    | (muxState_16_1 ? auto_out_1_d_bits_data : 256'h0)
    | (muxState_16_2 ? auto_out_2_d_bits_data : 256'h0)
    | (muxState_16_3 ? auto_out_3_d_bits_data : 256'h0);
  assign auto_in_2_d_bits_corrupt =
    muxState_16_0 & auto_out_0_d_bits_corrupt | muxState_16_1 & auto_out_1_d_bits_corrupt
    | muxState_16_2 & auto_out_2_d_bits_corrupt | muxState_16_3
    & auto_out_3_d_bits_corrupt;
  assign auto_in_2_e_ready =
    (&(auto_in_2_e_bits_sink[5:4])) & allowed_2_1 | requestEIO_2_1 & allowed_5_1
    | requestEIO_2_2 & allowed_8_1 | requestEIO_2_3 & allowed_11_1;
  assign auto_in_1_a_ready =
    requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | requestAIO_1_1 & auto_out_1_a_ready
    & allowed_3_1 | requestAIO_1_2 & auto_out_2_a_ready & allowed_6_1
    | (&(auto_in_1_a_bits_address[7:6])) & auto_out_3_a_ready & allowed_9_1;
  assign auto_in_1_b_valid = in_1_b_valid;
  assign auto_in_1_b_bits_opcode = _GEN_7 ? 3'h6 : 3'h0;
  assign auto_in_1_b_bits_param =
    (muxState_13_0 ? auto_out_0_b_bits_param : 2'h0)
    | (muxState_13_1 ? auto_out_1_b_bits_param : 2'h0)
    | (muxState_13_2 ? auto_out_2_b_bits_param : 2'h0)
    | (muxState_13_3 ? auto_out_3_b_bits_param : 2'h0);
  assign auto_in_1_b_bits_size = _GEN_7 ? 3'h6 : 3'h0;
  assign auto_in_1_b_bits_source =
    (muxState_13_0 ? auto_out_0_b_bits_source[9:0] : 10'h0)
    | (muxState_13_1 ? auto_out_1_b_bits_source[9:0] : 10'h0)
    | (muxState_13_2 ? auto_out_2_b_bits_source[9:0] : 10'h0)
    | (muxState_13_3 ? auto_out_3_b_bits_source[9:0] : 10'h0);
  assign auto_in_1_b_bits_address =
    (muxState_13_0 ? auto_out_0_b_bits_address : 36'h0)
    | (muxState_13_1 ? auto_out_1_b_bits_address : 36'h0)
    | (muxState_13_2 ? auto_out_2_b_bits_address : 36'h0)
    | (muxState_13_3 ? auto_out_3_b_bits_address : 36'h0);
  assign auto_in_1_b_bits_mask =
    {32{muxState_13_0}} | {32{muxState_13_1}} | {32{muxState_13_2}} | {32{muxState_13_3}};
  assign auto_in_1_b_bits_data =
    (muxState_13_0 ? auto_out_0_b_bits_data : 256'h0)
    | (muxState_13_1 ? auto_out_1_b_bits_data : 256'h0)
    | (muxState_13_2 ? auto_out_2_b_bits_data : 256'h0)
    | (muxState_13_3 ? auto_out_3_b_bits_data : 256'h0);
  assign auto_in_1_c_ready =
    requestCIO_1_0 & auto_out_0_c_ready & allowed_1_0 | requestCIO_1_1
    & auto_out_1_c_ready & allowed_4_0 | requestCIO_1_2 & auto_out_2_c_ready & allowed_7_0
    | (&(auto_in_1_c_bits_address[7:6])) & auto_out_3_c_ready & allowed_10_0;
  assign auto_in_1_d_valid = in_1_d_valid;
  assign auto_in_1_d_bits_opcode =
    (muxState_14_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_14_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_14_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_14_3 ? auto_out_3_d_bits_opcode : 3'h0);
  assign auto_in_1_d_bits_param =
    (muxState_14_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_14_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_14_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_14_3 ? auto_out_3_d_bits_param : 2'h0);
  assign auto_in_1_d_bits_size =
    (muxState_14_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_14_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_14_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_14_3 ? auto_out_3_d_bits_size : 3'h0);
  assign auto_in_1_d_bits_source =
    (muxState_14_0 ? auto_out_0_d_bits_source[9:0] : 10'h0)
    | (muxState_14_1 ? auto_out_1_d_bits_source[9:0] : 10'h0)
    | (muxState_14_2 ? auto_out_2_d_bits_source[9:0] : 10'h0)
    | (muxState_14_3 ? auto_out_3_d_bits_source[9:0] : 10'h0);
  assign auto_in_1_d_bits_sink =
    (muxState_14_0 ? out_0_d_bits_sink : 6'h0)
    | (muxState_14_1 ? out_1_d_bits_sink : 6'h0)
    | (muxState_14_2 ? out_2_d_bits_sink : 6'h0)
    | (muxState_14_3 ? out_3_d_bits_sink : 6'h0);
  assign auto_in_1_d_bits_denied =
    muxState_14_0 & auto_out_0_d_bits_denied | muxState_14_1 & auto_out_1_d_bits_denied
    | muxState_14_2 & auto_out_2_d_bits_denied | muxState_14_3 & auto_out_3_d_bits_denied;
  assign auto_in_1_d_bits_echo_blockisdirty =
    muxState_14_0 & auto_out_0_d_bits_echo_blockisdirty | muxState_14_1
    & auto_out_1_d_bits_echo_blockisdirty | muxState_14_2
    & auto_out_2_d_bits_echo_blockisdirty | muxState_14_3
    & auto_out_3_d_bits_echo_blockisdirty;
  assign auto_in_1_d_bits_data =
    (muxState_14_0 ? auto_out_0_d_bits_data : 256'h0)
    | (muxState_14_1 ? auto_out_1_d_bits_data : 256'h0)
    | (muxState_14_2 ? auto_out_2_d_bits_data : 256'h0)
    | (muxState_14_3 ? auto_out_3_d_bits_data : 256'h0);
  assign auto_in_1_d_bits_corrupt =
    muxState_14_0 & auto_out_0_d_bits_corrupt | muxState_14_1 & auto_out_1_d_bits_corrupt
    | muxState_14_2 & auto_out_2_d_bits_corrupt | muxState_14_3
    & auto_out_3_d_bits_corrupt;
  assign auto_in_1_e_ready =
    (&(auto_in_1_e_bits_sink[5:4])) & allowed_2_0 | requestEIO_1_1 & allowed_5_0
    | requestEIO_1_2 & allowed_8_0 | requestEIO_1_3 & allowed_11_0;
  assign auto_in_0_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | requestAIO_0_1 & auto_out_1_a_ready
    & allowed_3_0 | requestAIO_0_2 & auto_out_2_a_ready & allowed_6_0
    | (&(auto_in_0_a_bits_address[7:6])) & auto_out_3_a_ready & allowed_9_0;
  assign auto_in_0_d_valid = in_0_d_valid;
  assign auto_in_0_d_bits_opcode =
    (muxState_12_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_12_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_12_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_12_3 ? auto_out_3_d_bits_opcode : 3'h0);
  assign auto_in_0_d_bits_param =
    (muxState_12_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_12_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_12_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_12_3 ? auto_out_3_d_bits_param : 2'h0);
  assign auto_in_0_d_bits_size =
    (muxState_12_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_12_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_12_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_12_3 ? auto_out_3_d_bits_size : 3'h0);
  assign auto_in_0_d_bits_source =
    (muxState_12_0 ? auto_out_0_d_bits_source[2:0] : 3'h0)
    | (muxState_12_1 ? auto_out_1_d_bits_source[2:0] : 3'h0)
    | (muxState_12_2 ? auto_out_2_d_bits_source[2:0] : 3'h0)
    | (muxState_12_3 ? auto_out_3_d_bits_source[2:0] : 3'h0);
  assign auto_in_0_d_bits_sink =
    (muxState_12_0 ? out_0_d_bits_sink : 6'h0)
    | (muxState_12_1 ? out_1_d_bits_sink : 6'h0)
    | (muxState_12_2 ? out_2_d_bits_sink : 6'h0)
    | (muxState_12_3 ? out_3_d_bits_sink : 6'h0);
  assign auto_in_0_d_bits_denied =
    muxState_12_0 & auto_out_0_d_bits_denied | muxState_12_1 & auto_out_1_d_bits_denied
    | muxState_12_2 & auto_out_2_d_bits_denied | muxState_12_3 & auto_out_3_d_bits_denied;
  assign auto_in_0_d_bits_data =
    (muxState_12_0 ? auto_out_0_d_bits_data : 256'h0)
    | (muxState_12_1 ? auto_out_1_d_bits_data : 256'h0)
    | (muxState_12_2 ? auto_out_2_d_bits_data : 256'h0)
    | (muxState_12_3 ? auto_out_3_d_bits_data : 256'h0);
  assign auto_in_0_d_bits_corrupt =
    muxState_12_0 & auto_out_0_d_bits_corrupt | muxState_12_1 & auto_out_1_d_bits_corrupt
    | muxState_12_2 & auto_out_2_d_bits_corrupt | muxState_12_3
    & auto_out_3_d_bits_corrupt;
  assign auto_out_3_a_valid = out_3_a_valid;
  assign auto_out_3_a_bits_opcode =
    (muxState_9_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_9_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_opcode : 3'h0);
  assign auto_out_3_a_bits_param =
    (muxState_9_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_9_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_3_a_bits_size =
    (muxState_9_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_9_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_3_a_bits_source =
    (muxState_9_0 ? in_0_a_bits_source : 12'h0)
    | (muxState_9_1 ? in_1_a_bits_source : 12'h0)
    | (muxState_9_2 ? in_2_a_bits_source : 12'h0);
  assign auto_out_3_a_bits_address =
    (muxState_9_0 ? auto_in_0_a_bits_address : 36'h0)
    | (muxState_9_1 ? auto_in_1_a_bits_address : 36'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_address : 36'h0);
  assign auto_out_3_a_bits_user_reqSource =
    (muxState_9_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_3_a_bits_mask =
    (muxState_9_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_9_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_3_a_bits_data =
    (muxState_9_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_9_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_9_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_3_a_bits_corrupt =
    muxState_9_0 & auto_in_0_a_bits_corrupt | muxState_9_1 & auto_in_1_a_bits_corrupt
    | muxState_9_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_3_b_ready =
    requestBOI_3_1 & auto_in_1_b_ready & allowed_13_3 | requestBOI_3_2 & auto_in_2_b_ready
    & allowed_15_3;
  assign auto_out_3_c_valid = out_3_c_valid;
  assign auto_out_3_c_bits_opcode =
    (muxState_10_0 ? auto_in_1_c_bits_opcode : 3'h0)
    | (muxState_10_1 ? auto_in_2_c_bits_opcode : 3'h0);
  assign auto_out_3_c_bits_param =
    (muxState_10_0 ? auto_in_1_c_bits_param : 3'h0)
    | (muxState_10_1 ? auto_in_2_c_bits_param : 3'h0);
  assign auto_out_3_c_bits_size =
    (muxState_10_0 ? auto_in_1_c_bits_size : 3'h0)
    | (muxState_10_1 ? auto_in_2_c_bits_size : 3'h0);
  assign auto_out_3_c_bits_source =
    (muxState_10_0 ? in_1_c_bits_source : 12'h0)
    | (muxState_10_1 ? in_2_c_bits_source : 12'h0);
  assign auto_out_3_c_bits_address =
    (muxState_10_0 ? auto_in_1_c_bits_address : 36'h0)
    | (muxState_10_1 ? auto_in_2_c_bits_address : 36'h0);
  assign auto_out_3_c_bits_echo_blockisdirty =
    muxState_10_0 & auto_in_1_c_bits_echo_blockisdirty | muxState_10_1
    & auto_in_2_c_bits_echo_blockisdirty;
  assign auto_out_3_c_bits_data =
    (muxState_10_0 ? auto_in_1_c_bits_data : 256'h0)
    | (muxState_10_1 ? auto_in_2_c_bits_data : 256'h0);
  assign auto_out_3_d_ready =
    requestDOI_3_0 & auto_in_0_d_ready & allowed_12_3 | requestDOI_3_1 & auto_in_1_d_ready
    & allowed_14_3 | requestDOI_3_2 & auto_in_2_d_ready & allowed_16_3;
  assign auto_out_3_e_valid = out_3_e_valid;
  assign auto_out_3_e_bits_sink =
    ((beatsLeft_11 ? state_11_0 : winner_11_0) ? auto_in_1_e_bits_sink[3:0] : 4'h0)
    | ((beatsLeft_11 ? state_11_1 : winner_11_1) ? auto_in_2_e_bits_sink[3:0] : 4'h0);
  assign auto_out_2_a_valid = out_2_a_valid;
  assign auto_out_2_a_bits_opcode =
    (muxState_6_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_opcode : 3'h0);
  assign auto_out_2_a_bits_param =
    (muxState_6_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_2_a_bits_size =
    (muxState_6_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_2_a_bits_source =
    (muxState_6_0 ? in_0_a_bits_source : 12'h0)
    | (muxState_6_1 ? in_1_a_bits_source : 12'h0)
    | (muxState_6_2 ? in_2_a_bits_source : 12'h0);
  assign auto_out_2_a_bits_address =
    (muxState_6_0 ? auto_in_0_a_bits_address : 36'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_address : 36'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_address : 36'h0);
  assign auto_out_2_a_bits_user_reqSource =
    (muxState_6_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_2_a_bits_mask =
    (muxState_6_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_2_a_bits_data =
    (muxState_6_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_6_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_6_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_2_a_bits_corrupt =
    muxState_6_0 & auto_in_0_a_bits_corrupt | muxState_6_1 & auto_in_1_a_bits_corrupt
    | muxState_6_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_2_b_ready =
    requestBOI_2_1 & auto_in_1_b_ready & allowed_13_2 | requestBOI_2_2 & auto_in_2_b_ready
    & allowed_15_2;
  assign auto_out_2_c_valid = out_2_c_valid;
  assign auto_out_2_c_bits_opcode =
    (muxState_7_0 ? auto_in_1_c_bits_opcode : 3'h0)
    | (muxState_7_1 ? auto_in_2_c_bits_opcode : 3'h0);
  assign auto_out_2_c_bits_param =
    (muxState_7_0 ? auto_in_1_c_bits_param : 3'h0)
    | (muxState_7_1 ? auto_in_2_c_bits_param : 3'h0);
  assign auto_out_2_c_bits_size =
    (muxState_7_0 ? auto_in_1_c_bits_size : 3'h0)
    | (muxState_7_1 ? auto_in_2_c_bits_size : 3'h0);
  assign auto_out_2_c_bits_source =
    (muxState_7_0 ? in_1_c_bits_source : 12'h0)
    | (muxState_7_1 ? in_2_c_bits_source : 12'h0);
  assign auto_out_2_c_bits_address =
    (muxState_7_0 ? auto_in_1_c_bits_address : 36'h0)
    | (muxState_7_1 ? auto_in_2_c_bits_address : 36'h0);
  assign auto_out_2_c_bits_echo_blockisdirty =
    muxState_7_0 & auto_in_1_c_bits_echo_blockisdirty | muxState_7_1
    & auto_in_2_c_bits_echo_blockisdirty;
  assign auto_out_2_c_bits_data =
    (muxState_7_0 ? auto_in_1_c_bits_data : 256'h0)
    | (muxState_7_1 ? auto_in_2_c_bits_data : 256'h0);
  assign auto_out_2_d_ready =
    requestDOI_2_0 & auto_in_0_d_ready & allowed_12_2 | requestDOI_2_1 & auto_in_1_d_ready
    & allowed_14_2 | requestDOI_2_2 & auto_in_2_d_ready & allowed_16_2;
  assign auto_out_2_e_valid = out_2_e_valid;
  assign auto_out_2_e_bits_sink =
    ((beatsLeft_8 ? state_8_0 : winner_8_0) ? auto_in_1_e_bits_sink[3:0] : 4'h0)
    | ((beatsLeft_8 ? state_8_1 : winner_8_1) ? auto_in_2_e_bits_sink[3:0] : 4'h0);
  assign auto_out_1_a_valid = out_1_a_valid;
  assign auto_out_1_a_bits_opcode =
    (muxState_3_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_opcode : 3'h0);
  assign auto_out_1_a_bits_param =
    (muxState_3_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_1_a_bits_size =
    (muxState_3_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_1_a_bits_source =
    (muxState_3_0 ? in_0_a_bits_source : 12'h0)
    | (muxState_3_1 ? in_1_a_bits_source : 12'h0)
    | (muxState_3_2 ? in_2_a_bits_source : 12'h0);
  assign auto_out_1_a_bits_address =
    (muxState_3_0 ? auto_in_0_a_bits_address : 36'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_address : 36'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_address : 36'h0);
  assign auto_out_1_a_bits_user_reqSource =
    (muxState_3_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_1_a_bits_mask =
    (muxState_3_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_1_a_bits_data =
    (muxState_3_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_3_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_3_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_1_a_bits_corrupt =
    muxState_3_0 & auto_in_0_a_bits_corrupt | muxState_3_1 & auto_in_1_a_bits_corrupt
    | muxState_3_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_1_b_ready =
    requestBOI_1_1 & auto_in_1_b_ready & allowed_13_1 | requestBOI_1_2 & auto_in_2_b_ready
    & allowed_15_1;
  assign auto_out_1_c_valid = out_1_c_valid;
  assign auto_out_1_c_bits_opcode =
    (muxState_4_0 ? auto_in_1_c_bits_opcode : 3'h0)
    | (muxState_4_1 ? auto_in_2_c_bits_opcode : 3'h0);
  assign auto_out_1_c_bits_param =
    (muxState_4_0 ? auto_in_1_c_bits_param : 3'h0)
    | (muxState_4_1 ? auto_in_2_c_bits_param : 3'h0);
  assign auto_out_1_c_bits_size =
    (muxState_4_0 ? auto_in_1_c_bits_size : 3'h0)
    | (muxState_4_1 ? auto_in_2_c_bits_size : 3'h0);
  assign auto_out_1_c_bits_source =
    (muxState_4_0 ? in_1_c_bits_source : 12'h0)
    | (muxState_4_1 ? in_2_c_bits_source : 12'h0);
  assign auto_out_1_c_bits_address =
    (muxState_4_0 ? auto_in_1_c_bits_address : 36'h0)
    | (muxState_4_1 ? auto_in_2_c_bits_address : 36'h0);
  assign auto_out_1_c_bits_echo_blockisdirty =
    muxState_4_0 & auto_in_1_c_bits_echo_blockisdirty | muxState_4_1
    & auto_in_2_c_bits_echo_blockisdirty;
  assign auto_out_1_c_bits_data =
    (muxState_4_0 ? auto_in_1_c_bits_data : 256'h0)
    | (muxState_4_1 ? auto_in_2_c_bits_data : 256'h0);
  assign auto_out_1_d_ready =
    requestDOI_1_0 & auto_in_0_d_ready & allowed_12_1 | requestDOI_1_1 & auto_in_1_d_ready
    & allowed_14_1 | requestDOI_1_2 & auto_in_2_d_ready & allowed_16_1;
  assign auto_out_1_e_valid = out_1_e_valid;
  assign auto_out_1_e_bits_sink =
    ((beatsLeft_5 ? state_5_0 : winner_5_0) ? auto_in_1_e_bits_sink[3:0] : 4'h0)
    | ((beatsLeft_5 ? state_5_1 : winner_5_1) ? auto_in_2_e_bits_sink[3:0] : 4'h0);
  assign auto_out_0_a_valid = out_0_a_valid;
  assign auto_out_0_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_opcode : 3'h0);
  assign auto_out_0_a_bits_param =
    (muxState_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_param : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_param : 3'h0);
  assign auto_out_0_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_size : 3'h0)
    | (muxState_2 ? auto_in_2_a_bits_size : 3'h0);
  assign auto_out_0_a_bits_source =
    (muxState_0 ? in_0_a_bits_source : 12'h0) | (muxState_1 ? in_1_a_bits_source : 12'h0)
    | (muxState_2 ? in_2_a_bits_source : 12'h0);
  assign auto_out_0_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 36'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 36'h0)
    | (muxState_2 ? auto_in_2_a_bits_address : 36'h0);
  assign auto_out_0_a_bits_user_reqSource =
    (muxState_1 ? auto_in_1_a_bits_user_reqSource : 4'h0)
    | (muxState_2 ? auto_in_2_a_bits_user_reqSource : 4'h0);
  assign auto_out_0_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 32'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 32'h0)
    | (muxState_2 ? auto_in_2_a_bits_mask : 32'h0);
  assign auto_out_0_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 256'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 256'h0)
    | (muxState_2 ? auto_in_2_a_bits_data : 256'h0);
  assign auto_out_0_a_bits_corrupt =
    muxState_0 & auto_in_0_a_bits_corrupt | muxState_1 & auto_in_1_a_bits_corrupt
    | muxState_2 & auto_in_2_a_bits_corrupt;
  assign auto_out_0_b_ready =
    requestBOI_0_1 & auto_in_1_b_ready & allowed_13_0 | requestBOI_0_2 & auto_in_2_b_ready
    & allowed_15_0;
  assign auto_out_0_c_valid = out_0_c_valid;
  assign auto_out_0_c_bits_opcode =
    (muxState_1_0 ? auto_in_1_c_bits_opcode : 3'h0)
    | (muxState_1_1 ? auto_in_2_c_bits_opcode : 3'h0);
  assign auto_out_0_c_bits_param =
    (muxState_1_0 ? auto_in_1_c_bits_param : 3'h0)
    | (muxState_1_1 ? auto_in_2_c_bits_param : 3'h0);
  assign auto_out_0_c_bits_size =
    (muxState_1_0 ? auto_in_1_c_bits_size : 3'h0)
    | (muxState_1_1 ? auto_in_2_c_bits_size : 3'h0);
  assign auto_out_0_c_bits_source =
    (muxState_1_0 ? in_1_c_bits_source : 12'h0)
    | (muxState_1_1 ? in_2_c_bits_source : 12'h0);
  assign auto_out_0_c_bits_address =
    (muxState_1_0 ? auto_in_1_c_bits_address : 36'h0)
    | (muxState_1_1 ? auto_in_2_c_bits_address : 36'h0);
  assign auto_out_0_c_bits_echo_blockisdirty =
    muxState_1_0 & auto_in_1_c_bits_echo_blockisdirty | muxState_1_1
    & auto_in_2_c_bits_echo_blockisdirty;
  assign auto_out_0_c_bits_data =
    (muxState_1_0 ? auto_in_1_c_bits_data : 256'h0)
    | (muxState_1_1 ? auto_in_2_c_bits_data : 256'h0);
  assign auto_out_0_d_ready =
    requestDOI_0_0 & auto_in_0_d_ready & allowed_12_0 | requestDOI_0_1 & auto_in_1_d_ready
    & allowed_14_0 | requestDOI_0_2 & auto_in_2_d_ready & allowed_16_0;
  assign auto_out_0_e_valid = out_0_e_valid;
  assign auto_out_0_e_bits_sink =
    ((beatsLeft_2 ? state_2_0 : winner_2_0) ? auto_in_1_e_bits_sink[3:0] : 4'h0)
    | ((beatsLeft_2 ? state_2_1 : winner_2_1) ? auto_in_2_e_bits_sink[3:0] : 4'h0);
endmodule

