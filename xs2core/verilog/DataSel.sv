// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DataSel(
  input         clock,
  input         reset,
  input  [7:0]  io_ecc_in_0,
  input  [7:0]  io_ecc_in_1,
  input  [63:0] io_in_0,
  input  [63:0] io_in_1,
  input  [1:0]  io_sel_0,
  input  [1:0]  io_sel_1,
  input         io_en_0,
  input         io_en_1,
  output [63:0] io_out_0,
  output [63:0] io_out_1,
  output        io_err_out_0,
  output        io_err_out_1
);

  reg         en_REG;
  reg         en_REG_1;
  reg         en;
  reg  [1:0]  sel_r_REG;
  reg  [1:0]  sel_r_REG_1;
  reg  [1:0]  sel_r_REG_2;
  reg  [1:0]  sel_r;
  reg  [63:0] odata_0;
  reg  [63:0] odata_1;
  reg         io_out_0_REG;
  reg  [63:0] io_out_0_r;
  reg  [7:0]  oeccs_0;
  reg  [7:0]  oeccs_1;
  reg         io_err_out_0_REG;
  reg         io_err_out_0_r;
  reg         en_REG_2;
  reg         en_REG_3;
  reg         en_1;
  reg  [1:0]  sel_r_REG_3;
  reg  [1:0]  sel_r_REG_4;
  reg  [1:0]  sel_r_REG_5;
  reg  [1:0]  sel_r_1;
  reg  [63:0] odata_1_0;
  reg  [63:0] odata_1_1;
  reg         io_out_1_REG;
  reg  [63:0] io_out_1_r;
  reg  [7:0]  oeccs_1_0;
  reg  [7:0]  oeccs_1_1;
  reg         io_err_out_1_REG;
  reg         io_err_out_1_r;
  always @(posedge clock) begin
    en_REG <= io_en_0;
    en_REG_1 <= en_REG;
    en <= en_REG_1;
    sel_r_REG <= io_sel_0;
    sel_r_REG_1 <= sel_r_REG;
    sel_r_REG_2 <= sel_r_REG_1;
    sel_r <= sel_r_REG_2;
    if (en) begin
      odata_0 <= io_in_0;
      odata_1 <= io_in_1;
      oeccs_0 <= io_ecc_in_0;
      oeccs_1 <= io_ecc_in_1;
    end
    if (io_out_0_REG)
      io_out_0_r <= (sel_r[0] ? odata_0 : 64'h0) | (sel_r[1] ? odata_1 : 64'h0);
    en_REG_2 <= io_en_1;
    en_REG_3 <= en_REG_2;
    en_1 <= en_REG_3;
    sel_r_REG_3 <= io_sel_1;
    sel_r_REG_4 <= sel_r_REG_3;
    sel_r_REG_5 <= sel_r_REG_4;
    sel_r_1 <= sel_r_REG_5;
    if (en_1) begin
      odata_1_0 <= io_in_0;
      odata_1_1 <= io_in_1;
      oeccs_1_0 <= io_ecc_in_0;
      oeccs_1_1 <= io_ecc_in_1;
    end
    if (io_out_1_REG)
      io_out_1_r <= (sel_r_1[0] ? odata_1_0 : 64'h0) | (sel_r_1[1] ? odata_1_1 : 64'h0);
  end // always @(posedge)
  wire [71:0] _err_T = {oeccs_0, odata_0};
  wire [71:0] _err_T_2 = {oeccs_1, odata_1};
  wire [71:0] _err_T_4 = {oeccs_1_0, odata_1_0};
  wire [71:0] _err_T_6 = {oeccs_1_1, odata_1_1};
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      io_out_0_REG <= 1'h0;
      io_err_out_0_REG <= 1'h0;
      io_err_out_0_r <= 1'h0;
      io_out_1_REG <= 1'h0;
      io_err_out_1_REG <= 1'h0;
      io_err_out_1_r <= 1'h0;
    end
    else begin
      io_out_0_REG <= en;
      io_err_out_0_REG <= en;
      if (io_err_out_0_REG)
        io_err_out_0_r <=
          sel_r[0]
          & (^_err_T | ~(^_err_T)
             & (|{^({oeccs_0[6:0], odata_0} & 71'h40FE00000000000000),
                  ^({oeccs_0[5:0], odata_0} & 70'h2001FFFFFFFC000000),
                  ^({oeccs_0[4:0], odata_0} & 69'h1001FFFE0003FFF800),
                  ^({oeccs_0[3:0], odata_0} & 68'h801FE01FE03FC07F0),
                  ^({oeccs_0[2:0], odata_0} & 67'h4F1E1E1E1E3C3C78E),
                  ^({oeccs_0[1:0], odata_0} & 66'h2CD9999999B33366D),
                  ^({oeccs_0[0], odata_0} & 65'h1AB55555556AAAD5B)})) | sel_r[1]
          & (^_err_T_2 | ~(^_err_T_2)
             & (|{^({oeccs_1[6:0], odata_1} & 71'h40FE00000000000000),
                  ^({oeccs_1[5:0], odata_1} & 70'h2001FFFFFFFC000000),
                  ^({oeccs_1[4:0], odata_1} & 69'h1001FFFE0003FFF800),
                  ^({oeccs_1[3:0], odata_1} & 68'h801FE01FE03FC07F0),
                  ^({oeccs_1[2:0], odata_1} & 67'h4F1E1E1E1E3C3C78E),
                  ^({oeccs_1[1:0], odata_1} & 66'h2CD9999999B33366D),
                  ^({oeccs_1[0], odata_1} & 65'h1AB55555556AAAD5B)}));
      io_out_1_REG <= en_1;
      io_err_out_1_REG <= en_1;
      if (io_err_out_1_REG)
        io_err_out_1_r <=
          sel_r_1[0]
          & (^_err_T_4 | ~(^_err_T_4)
             & (|{^({oeccs_1_0[6:0], odata_1_0} & 71'h40FE00000000000000),
                  ^({oeccs_1_0[5:0], odata_1_0} & 70'h2001FFFFFFFC000000),
                  ^({oeccs_1_0[4:0], odata_1_0} & 69'h1001FFFE0003FFF800),
                  ^({oeccs_1_0[3:0], odata_1_0} & 68'h801FE01FE03FC07F0),
                  ^({oeccs_1_0[2:0], odata_1_0} & 67'h4F1E1E1E1E3C3C78E),
                  ^({oeccs_1_0[1:0], odata_1_0} & 66'h2CD9999999B33366D),
                  ^({oeccs_1_0[0], odata_1_0} & 65'h1AB55555556AAAD5B)})) | sel_r_1[1]
          & (^_err_T_6 | ~(^_err_T_6)
             & (|{^({oeccs_1_1[6:0], odata_1_1} & 71'h40FE00000000000000),
                  ^({oeccs_1_1[5:0], odata_1_1} & 70'h2001FFFFFFFC000000),
                  ^({oeccs_1_1[4:0], odata_1_1} & 69'h1001FFFE0003FFF800),
                  ^({oeccs_1_1[3:0], odata_1_1} & 68'h801FE01FE03FC07F0),
                  ^({oeccs_1_1[2:0], odata_1_1} & 67'h4F1E1E1E1E3C3C78E),
                  ^({oeccs_1_1[1:0], odata_1_1} & 66'h2CD9999999B33366D),
                  ^({oeccs_1_1[0], odata_1_1} & 65'h1AB55555556AAAD5B)}));
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:13];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hE; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        en_REG = _RANDOM[4'h0][0];
        en_REG_1 = _RANDOM[4'h0][1];
        en = _RANDOM[4'h0][2];
        sel_r_REG = _RANDOM[4'h0][4:3];
        sel_r_REG_1 = _RANDOM[4'h0][6:5];
        sel_r_REG_2 = _RANDOM[4'h0][8:7];
        sel_r = _RANDOM[4'h0][10:9];
        odata_0 = {_RANDOM[4'h0][31:11], _RANDOM[4'h1], _RANDOM[4'h2][10:0]};
        odata_1 = {_RANDOM[4'h2][31:11], _RANDOM[4'h3], _RANDOM[4'h4][10:0]};
        io_out_0_REG = _RANDOM[4'h4][11];
        io_out_0_r = {_RANDOM[4'h4][31:12], _RANDOM[4'h5], _RANDOM[4'h6][11:0]};
        oeccs_0 = _RANDOM[4'h6][19:12];
        oeccs_1 = _RANDOM[4'h6][27:20];
        io_err_out_0_REG = _RANDOM[4'h6][28];
        io_err_out_0_r = _RANDOM[4'h6][29];
        en_REG_2 = _RANDOM[4'h6][30];
        en_REG_3 = _RANDOM[4'h6][31];
        en_1 = _RANDOM[4'h7][0];
        sel_r_REG_3 = _RANDOM[4'h7][2:1];
        sel_r_REG_4 = _RANDOM[4'h7][4:3];
        sel_r_REG_5 = _RANDOM[4'h7][6:5];
        sel_r_1 = _RANDOM[4'h7][8:7];
        odata_1_0 = {_RANDOM[4'h7][31:9], _RANDOM[4'h8], _RANDOM[4'h9][8:0]};
        odata_1_1 = {_RANDOM[4'h9][31:9], _RANDOM[4'hA], _RANDOM[4'hB][8:0]};
        io_out_1_REG = _RANDOM[4'hB][9];
        io_out_1_r = {_RANDOM[4'hB][31:10], _RANDOM[4'hC], _RANDOM[4'hD][9:0]};
        oeccs_1_0 = _RANDOM[4'hD][17:10];
        oeccs_1_1 = _RANDOM[4'hD][25:18];
        io_err_out_1_REG = _RANDOM[4'hD][26];
        io_err_out_1_r = _RANDOM[4'hD][27];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        io_out_0_REG = 1'h0;
        io_err_out_0_REG = 1'h0;
        io_err_out_0_r = 1'h0;
        io_out_1_REG = 1'h0;
        io_err_out_1_REG = 1'h0;
        io_err_out_1_r = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_0 = io_out_0_r;
  assign io_out_1 = io_out_1_r;
  assign io_err_out_0 = io_err_out_0_r;
  assign io_err_out_1 = io_err_out_1_r;
endmodule

