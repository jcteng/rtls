// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module OverrideableQueue(
  input         clock,
  input         reset,
  input         io_in_valid,
  input  [4:0]  io_in_bits_pht_index,
  input  [12:0] io_in_bits_pht_tag,
  input  [30:0] io_in_bits_region_paddr,
  input  [30:0] io_in_bits_region_vaddr,
  input  [3:0]  io_in_bits_region_offset,
  input         io_out_ready,
  output        io_out_valid,
  output [4:0]  io_out_bits_pht_index,
  output [12:0] io_out_bits_pht_tag,
  output [30:0] io_out_bits_region_paddr,
  output [30:0] io_out_bits_region_vaddr,
  output [3:0]  io_out_bits_region_offset
);

  reg  [4:0]  entries_0_pht_index;
  reg  [12:0] entries_0_pht_tag;
  reg  [30:0] entries_0_region_paddr;
  reg  [30:0] entries_0_region_vaddr;
  reg  [3:0]  entries_0_region_offset;
  reg  [4:0]  entries_1_pht_index;
  reg  [12:0] entries_1_pht_tag;
  reg  [30:0] entries_1_region_paddr;
  reg  [30:0] entries_1_region_vaddr;
  reg  [3:0]  entries_1_region_offset;
  reg  [4:0]  entries_2_pht_index;
  reg  [12:0] entries_2_pht_tag;
  reg  [30:0] entries_2_region_paddr;
  reg  [30:0] entries_2_region_vaddr;
  reg  [3:0]  entries_2_region_offset;
  reg  [4:0]  entries_3_pht_index;
  reg  [12:0] entries_3_pht_tag;
  reg  [30:0] entries_3_region_paddr;
  reg  [30:0] entries_3_region_vaddr;
  reg  [3:0]  entries_3_region_offset;
  reg         valids_0;
  reg         valids_1;
  reg         valids_2;
  reg         valids_3;
  reg  [1:0]  rd_ptr;
  reg  [1:0]  wr_ptr;
  wire        r_mask_0 = rd_ptr == 2'h0;
  wire        r_mask_1 = rd_ptr == 2'h1;
  wire        r_mask_2 = rd_ptr == 2'h2;
  wire        _GEN = io_in_valid & wr_ptr == 2'h0;
  wire        _GEN_0 = io_in_valid & wr_ptr == 2'h1;
  wire        _GEN_1 = io_in_valid & wr_ptr == 2'h2;
  wire        _GEN_2 = io_in_valid & (&wr_ptr);
  wire        _io_out_valid_T_6 =
    r_mask_0 & valids_0 | r_mask_1 & valids_1 | r_mask_2 & valids_2 | (&rd_ptr)
    & valids_3;
  always @(posedge clock) begin
    if (_GEN) begin
      entries_0_pht_index <= io_in_bits_pht_index;
      entries_0_pht_tag <= io_in_bits_pht_tag;
      entries_0_region_paddr <= io_in_bits_region_paddr;
      entries_0_region_vaddr <= io_in_bits_region_vaddr;
      entries_0_region_offset <= io_in_bits_region_offset;
    end
    if (_GEN_0) begin
      entries_1_pht_index <= io_in_bits_pht_index;
      entries_1_pht_tag <= io_in_bits_pht_tag;
      entries_1_region_paddr <= io_in_bits_region_paddr;
      entries_1_region_vaddr <= io_in_bits_region_vaddr;
      entries_1_region_offset <= io_in_bits_region_offset;
    end
    if (_GEN_1) begin
      entries_2_pht_index <= io_in_bits_pht_index;
      entries_2_pht_tag <= io_in_bits_pht_tag;
      entries_2_region_paddr <= io_in_bits_region_paddr;
      entries_2_region_vaddr <= io_in_bits_region_vaddr;
      entries_2_region_offset <= io_in_bits_region_offset;
    end
    if (_GEN_2) begin
      entries_3_pht_index <= io_in_bits_pht_index;
      entries_3_pht_tag <= io_in_bits_pht_tag;
      entries_3_region_paddr <= io_in_bits_region_paddr;
      entries_3_region_vaddr <= io_in_bits_region_vaddr;
      entries_3_region_offset <= io_in_bits_region_offset;
    end
  end // always @(posedge)
  wire        _GEN_3 = io_out_ready & _io_out_valid_T_6;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      valids_0 <= 1'h0;
      valids_1 <= 1'h0;
      valids_2 <= 1'h0;
      valids_3 <= 1'h0;
      rd_ptr <= 2'h0;
      wr_ptr <= 2'h0;
    end
    else begin
      valids_0 <= _GEN | ~(r_mask_0 & _GEN_3) & valids_0;
      valids_1 <= _GEN_0 | ~(r_mask_1 & _GEN_3) & valids_1;
      valids_2 <= _GEN_1 | ~(r_mask_2 & _GEN_3) & valids_2;
      valids_3 <= _GEN_2 | ~((&rd_ptr) & _GEN_3) & valids_3;
      if (_GEN_3)
        rd_ptr <= 2'(rd_ptr + 2'h1);
      if (io_in_valid)
        wr_ptr <= 2'(wr_ptr + 2'h1);
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:10];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hB; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        entries_0_pht_index = _RANDOM[4'h0][4:0];
        entries_0_pht_tag = _RANDOM[4'h0][17:5];
        entries_0_region_paddr = {_RANDOM[4'h0][31:18], _RANDOM[4'h1][16:0]};
        entries_0_region_vaddr = {_RANDOM[4'h1][31:17], _RANDOM[4'h2][15:0]};
        entries_0_region_offset = _RANDOM[4'h2][19:16];
        entries_1_pht_index = _RANDOM[4'h2][24:20];
        entries_1_pht_tag = {_RANDOM[4'h2][31:25], _RANDOM[4'h3][5:0]};
        entries_1_region_paddr = {_RANDOM[4'h3][31:6], _RANDOM[4'h4][4:0]};
        entries_1_region_vaddr = {_RANDOM[4'h4][31:5], _RANDOM[4'h5][3:0]};
        entries_1_region_offset = _RANDOM[4'h5][7:4];
        entries_2_pht_index = _RANDOM[4'h5][12:8];
        entries_2_pht_tag = _RANDOM[4'h5][25:13];
        entries_2_region_paddr = {_RANDOM[4'h5][31:26], _RANDOM[4'h6][24:0]};
        entries_2_region_vaddr = {_RANDOM[4'h6][31:25], _RANDOM[4'h7][23:0]};
        entries_2_region_offset = _RANDOM[4'h7][27:24];
        entries_3_pht_index = {_RANDOM[4'h7][31:28], _RANDOM[4'h8][0]};
        entries_3_pht_tag = _RANDOM[4'h8][13:1];
        entries_3_region_paddr = {_RANDOM[4'h8][31:14], _RANDOM[4'h9][12:0]};
        entries_3_region_vaddr = {_RANDOM[4'h9][31:13], _RANDOM[4'hA][11:0]};
        entries_3_region_offset = _RANDOM[4'hA][15:12];
        valids_0 = _RANDOM[4'hA][16];
        valids_1 = _RANDOM[4'hA][17];
        valids_2 = _RANDOM[4'hA][18];
        valids_3 = _RANDOM[4'hA][19];
        rd_ptr = _RANDOM[4'hA][21:20];
        wr_ptr = _RANDOM[4'hA][23:22];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        valids_0 = 1'h0;
        valids_1 = 1'h0;
        valids_2 = 1'h0;
        valids_3 = 1'h0;
        rd_ptr = 2'h0;
        wr_ptr = 2'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = _io_out_valid_T_6;
  assign io_out_bits_pht_index =
    (r_mask_0 ? entries_0_pht_index : 5'h0) | (r_mask_1 ? entries_1_pht_index : 5'h0)
    | (r_mask_2 ? entries_2_pht_index : 5'h0) | ((&rd_ptr) ? entries_3_pht_index : 5'h0);
  assign io_out_bits_pht_tag =
    (r_mask_0 ? entries_0_pht_tag : 13'h0) | (r_mask_1 ? entries_1_pht_tag : 13'h0)
    | (r_mask_2 ? entries_2_pht_tag : 13'h0) | ((&rd_ptr) ? entries_3_pht_tag : 13'h0);
  assign io_out_bits_region_paddr =
    (r_mask_0 ? entries_0_region_paddr : 31'h0)
    | (r_mask_1 ? entries_1_region_paddr : 31'h0)
    | (r_mask_2 ? entries_2_region_paddr : 31'h0)
    | ((&rd_ptr) ? entries_3_region_paddr : 31'h0);
  assign io_out_bits_region_vaddr =
    (r_mask_0 ? entries_0_region_vaddr : 31'h0)
    | (r_mask_1 ? entries_1_region_vaddr : 31'h0)
    | (r_mask_2 ? entries_2_region_vaddr : 31'h0)
    | ((&rd_ptr) ? entries_3_region_vaddr : 31'h0);
  assign io_out_bits_region_offset =
    (r_mask_0 ? entries_0_region_offset : 4'h0)
    | (r_mask_1 ? entries_1_region_offset : 4'h0)
    | (r_mask_2 ? entries_2_region_offset : 4'h0)
    | ((&rd_ptr) ? entries_3_region_offset : 4'h0);
endmodule

