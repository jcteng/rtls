// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SourceB_8(
  input          clock,
  input          reset,
  input          io_b_ready,
  output         io_b_valid,
  output [1:0]   io_b_bits_param,
  output [11:0]  io_b_bits_source,
  output [35:0]  io_b_bits_address,
  output [255:0] io_b_bits_data,
  output         io_task_ready,
  input          io_task_valid,
  input  [11:0]  io_task_bits_set,
  input  [15:0]  io_task_bits_tag,
  input  [2:0]   io_task_bits_param,
  input  [1:0]   io_task_bits_clients,
  input          io_task_bits_needData
);

  reg  [1:0]  workVec;
  wire        _taskLatch_T_1 = ~(|workVec) & io_task_valid;
  wire [1:0]  pendingClient = (|workVec) ? workVec : io_task_bits_clients;
  reg  [11:0] taskLatch_r_set;
  reg  [15:0] taskLatch_r_tag;
  reg  [2:0]  taskLatch_r_param;
  reg         taskLatch_r_needData;
  wire        io_b_valid_0 = (|workVec) | io_task_valid;
  always @(posedge clock or posedge reset) begin
    if (reset)
      workVec <= 2'h0;
    else if (io_b_ready & io_b_valid_0)
      workVec <= pendingClient & ~(pendingClient[0] ? 2'h1 : 2'h2);
    else if (_taskLatch_T_1)
      workVec <= io_task_bits_clients;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_taskLatch_T_1) begin
      taskLatch_r_set <= io_task_bits_set;
      taskLatch_r_tag <= io_task_bits_tag;
      taskLatch_r_param <= io_task_bits_param;
      taskLatch_r_needData <= io_task_bits_needData;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        workVec = _RANDOM[1'h0][1:0];
        taskLatch_r_set = _RANDOM[1'h0][13:2];
        taskLatch_r_tag = _RANDOM[1'h0][29:14];
        taskLatch_r_param = {_RANDOM[1'h0][31:30], _RANDOM[1'h1][0]};
        taskLatch_r_needData = _RANDOM[1'h1][3];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        workVec = 2'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_b_valid = io_b_valid_0;
  assign io_b_bits_param = (|workVec) ? taskLatch_r_param[1:0] : io_task_bits_param[1:0];
  assign io_b_bits_source = {1'h0, pendingClient[0], 10'h0};
  assign io_b_bits_address =
    {2'h0,
     (|workVec) ? taskLatch_r_tag : io_task_bits_tag,
     (|workVec) ? taskLatch_r_set : io_task_bits_set,
     6'h0};
  assign io_b_bits_data =
    {255'h0, (|workVec) ? taskLatch_r_needData : io_task_bits_needData};
  assign io_task_ready = ~(|workVec);
endmodule

