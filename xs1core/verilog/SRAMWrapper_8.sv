// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SRAMWrapper_8(
  input         clock,
  input         reset,
  input         io_r_req_valid,
  input  [15:0] io_r_req_bits_setIdx,
  output [31:0] io_r_resp_data_0,
  input         io_w_req_valid,
  input  [15:0] io_w_req_bits_setIdx,
  input  [31:0] io_w_req_bits_data_0
);

  wire        _ClockGate_3_Q;
  wire        _banks_3_io_r_req_ready;
  wire [31:0] _banks_3_io_r_resp_data_0;
  wire        _ClockGate_2_Q;
  wire        _banks_2_io_r_req_ready;
  wire [31:0] _banks_2_io_r_resp_data_0;
  wire        _ClockGate_1_Q;
  wire        _banks_1_io_r_req_ready;
  wire [31:0] _banks_1_io_r_resp_data_0;
  wire        _ClockGate_Q;
  wire        _banks_0_io_r_req_ready;
  wire [31:0] _banks_0_io_r_resp_data_0;
  reg         clk_en;
  wire        _sram_io_r_req_valid_T = io_r_req_valid & io_r_req_bits_setIdx[1:0] == 2'h0;
  reg         clk_en_1;
  wire        _sram_io_r_req_valid_T_1 =
    io_r_req_valid & io_r_req_bits_setIdx[1:0] == 2'h1;
  reg         clk_en_2;
  wire        _sram_io_r_req_valid_T_2 =
    io_r_req_valid & io_r_req_bits_setIdx[1:0] == 2'h2;
  reg         clk_en_3;
  wire        _sram_io_r_req_valid_T_3 = io_r_req_valid & (&(io_r_req_bits_setIdx[1:0]));
  reg         ren_vec_1_0;
  reg         ren_vec_1_1;
  reg         ren_vec_1_2;
  reg         ren_vec_1_3;
  reg         ren_vec_0;
  reg         ren_vec_1;
  reg         ren_vec_2;
  reg         ren_vec_3;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      clk_en <= 1'h0;
      clk_en_1 <= 1'h0;
      clk_en_2 <= 1'h0;
      clk_en_3 <= 1'h0;
      ren_vec_1_0 <= 1'h0;
      ren_vec_1_1 <= 1'h0;
      ren_vec_1_2 <= 1'h0;
      ren_vec_1_3 <= 1'h0;
      ren_vec_0 <= 1'h0;
      ren_vec_1 <= 1'h0;
      ren_vec_2 <= 1'h0;
      ren_vec_3 <= 1'h0;
    end
    else begin
      clk_en <= ~clk_en;
      clk_en_1 <= ~clk_en_1;
      clk_en_2 <= ~clk_en_2;
      clk_en_3 <= ~clk_en_3;
      ren_vec_1_0 <= _banks_0_io_r_req_ready & _sram_io_r_req_valid_T;
      ren_vec_1_1 <= _banks_1_io_r_req_ready & _sram_io_r_req_valid_T_1;
      ren_vec_1_2 <= _banks_2_io_r_req_ready & _sram_io_r_req_valid_T_2;
      ren_vec_1_3 <= _banks_3_io_r_req_ready & _sram_io_r_req_valid_T_3;
      ren_vec_0 <= ren_vec_1_0;
      ren_vec_1 <= ren_vec_1_1;
      ren_vec_2 <= ren_vec_1_2;
      ren_vec_3 <= ren_vec_1_3;
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        clk_en = _RANDOM[/*Zero width*/ 1'b0][0];
        clk_en_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        clk_en_2 = _RANDOM[/*Zero width*/ 1'b0][2];
        clk_en_3 = _RANDOM[/*Zero width*/ 1'b0][3];
        ren_vec_1_0 = _RANDOM[/*Zero width*/ 1'b0][4];
        ren_vec_1_1 = _RANDOM[/*Zero width*/ 1'b0][5];
        ren_vec_1_2 = _RANDOM[/*Zero width*/ 1'b0][6];
        ren_vec_1_3 = _RANDOM[/*Zero width*/ 1'b0][7];
        ren_vec_0 = _RANDOM[/*Zero width*/ 1'b0][8];
        ren_vec_1 = _RANDOM[/*Zero width*/ 1'b0][9];
        ren_vec_2 = _RANDOM[/*Zero width*/ 1'b0][10];
        ren_vec_3 = _RANDOM[/*Zero width*/ 1'b0][11];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        clk_en = 1'h0;
        clk_en_1 = 1'h0;
        clk_en_2 = 1'h0;
        clk_en_3 = 1'h0;
        ren_vec_1_0 = 1'h0;
        ren_vec_1_1 = 1'h0;
        ren_vec_1_2 = 1'h0;
        ren_vec_1_3 = 1'h0;
        ren_vec_0 = 1'h0;
        ren_vec_1 = 1'h0;
        ren_vec_2 = 1'h0;
        ren_vec_3 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ClkDiv2SRAMTemplate_32 banks_0 (
    .clock                (_ClockGate_Q),
    .io_r_req_ready       (_banks_0_io_r_req_ready),
    .io_r_req_valid       (_sram_io_r_req_valid_T),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx[15:2]),
    .io_r_resp_data_0     (_banks_0_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid & io_w_req_bits_setIdx[1:0] == 2'h0),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx[15:2]),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0)
  );
  ClockGate ClockGate (
    .TE (1'h0),
    .E  (clk_en),
    .CK (clock),
    .Q  (_ClockGate_Q)
  );
  ClkDiv2SRAMTemplate_32 banks_1 (
    .clock                (_ClockGate_1_Q),
    .io_r_req_ready       (_banks_1_io_r_req_ready),
    .io_r_req_valid       (_sram_io_r_req_valid_T_1),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx[15:2]),
    .io_r_resp_data_0     (_banks_1_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid & io_w_req_bits_setIdx[1:0] == 2'h1),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx[15:2]),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0)
  );
  ClockGate ClockGate_1 (
    .TE (1'h0),
    .E  (clk_en_1),
    .CK (clock),
    .Q  (_ClockGate_1_Q)
  );
  ClkDiv2SRAMTemplate_32 banks_2 (
    .clock                (_ClockGate_2_Q),
    .io_r_req_ready       (_banks_2_io_r_req_ready),
    .io_r_req_valid       (_sram_io_r_req_valid_T_2),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx[15:2]),
    .io_r_resp_data_0     (_banks_2_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid & io_w_req_bits_setIdx[1:0] == 2'h2),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx[15:2]),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0)
  );
  ClockGate ClockGate_2 (
    .TE (1'h0),
    .E  (clk_en_2),
    .CK (clock),
    .Q  (_ClockGate_2_Q)
  );
  ClkDiv2SRAMTemplate_32 banks_3 (
    .clock                (_ClockGate_3_Q),
    .io_r_req_ready       (_banks_3_io_r_req_ready),
    .io_r_req_valid       (_sram_io_r_req_valid_T_3),
    .io_r_req_bits_setIdx (io_r_req_bits_setIdx[15:2]),
    .io_r_resp_data_0     (_banks_3_io_r_resp_data_0),
    .io_w_req_valid       (io_w_req_valid & (&(io_w_req_bits_setIdx[1:0]))),
    .io_w_req_bits_setIdx (io_w_req_bits_setIdx[15:2]),
    .io_w_req_bits_data_0 (io_w_req_bits_data_0)
  );
  ClockGate ClockGate_3 (
    .TE (1'h0),
    .E  (clk_en_3),
    .CK (clock),
    .Q  (_ClockGate_3_Q)
  );
  assign io_r_resp_data_0 =
    (ren_vec_0 ? _banks_0_io_r_resp_data_0 : 32'h0)
    | (ren_vec_1 ? _banks_1_io_r_resp_data_0 : 32'h0)
    | (ren_vec_2 ? _banks_2_io_r_resp_data_0 : 32'h0)
    | (ren_vec_3 ? _banks_3_io_r_resp_data_0 : 32'h0);
endmodule

