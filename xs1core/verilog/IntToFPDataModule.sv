// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module IntToFPDataModule(
  input         clock,
  input  [63:0] io_in_src_0,
  input         io_in_fpCtrl_typeTagOut,
  input         io_in_fpCtrl_wflags,
  input  [1:0]  io_in_fpCtrl_typ,
  input  [2:0]  io_in_fpCtrl_rm,
  input  [2:0]  io_in_rm,
  output [63:0] io_out_data,
  output [4:0]  io_out_fflags,
  input         regEnables_0,
  input         regEnables_1
);

  wire [63:0] _i2fResults_i2f_1_io_result;
  wire [4:0]  _i2fResults_i2f_1_io_fflags;
  wire [31:0] _i2fResults_i2f_io_result;
  wire [4:0]  _i2fResults_i2f_io_fflags;
  reg  [63:0] intValue;
  reg         ctrlReg_typeTagOut;
  reg         ctrlReg_wflags;
  reg  [1:0]  ctrlReg_typ;
  reg  [2:0]  rmReg;
  reg  [63:0] s3_out_data;
  reg  [4:0]  s3_out_exc;
  reg         s3_tag;
  always @(posedge clock) begin
    if (regEnables_0) begin
      intValue <=
        ~io_in_fpCtrl_wflags | io_in_fpCtrl_typ[1]
          ? io_in_src_0
          : {io_in_fpCtrl_typ[0] ? 32'h0 : {32{io_in_src_0[31]}}, io_in_src_0[31:0]};
      ctrlReg_typeTagOut <= io_in_fpCtrl_typeTagOut;
      ctrlReg_wflags <= io_in_fpCtrl_wflags;
      ctrlReg_typ <= io_in_fpCtrl_typ;
      rmReg <= (&io_in_fpCtrl_rm) ? io_in_rm : io_in_fpCtrl_rm;
    end
    if (regEnables_1) begin
      s3_out_data <=
        ctrlReg_wflags
          ? (ctrlReg_typeTagOut
               ? _i2fResults_i2f_1_io_result
               : {32'h0, _i2fResults_i2f_io_result})
          : intValue;
      s3_out_exc <=
        ctrlReg_wflags
          ? (ctrlReg_typeTagOut ? _i2fResults_i2f_1_io_fflags : _i2fResults_i2f_io_fflags)
          : 5'h0;
      s3_tag <= ctrlReg_typeTagOut;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:4];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        intValue = {_RANDOM[3'h0], _RANDOM[3'h1]};
        ctrlReg_typeTagOut = _RANDOM[3'h2][2];
        ctrlReg_wflags = _RANDOM[3'h2][4];
        ctrlReg_typ = _RANDOM[3'h2][12:11];
        rmReg = _RANDOM[3'h2][21:19];
        s3_out_data = {_RANDOM[3'h2][31:22], _RANDOM[3'h3], _RANDOM[3'h4][21:0]};
        s3_out_exc = _RANDOM[3'h4][26:22];
        s3_tag = _RANDOM[3'h4][27];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  IntToFP i2fResults_i2f (
    .io_int    (intValue),
    .io_sign   (~(ctrlReg_typ[0])),
    .io_long   (ctrlReg_typ[1]),
    .io_rm     (rmReg),
    .io_result (_i2fResults_i2f_io_result),
    .io_fflags (_i2fResults_i2f_io_fflags)
  );
  IntToFP_1 i2fResults_i2f_1 (
    .io_int    (intValue),
    .io_sign   (~(ctrlReg_typ[0])),
    .io_long   (ctrlReg_typ[1]),
    .io_rm     (rmReg),
    .io_result (_i2fResults_i2f_1_io_result),
    .io_fflags (_i2fResults_i2f_1_io_fflags)
  );
  assign io_out_data = s3_tag ? s3_out_data : {32'hFFFFFFFF, s3_out_data[31:0]};
  assign io_out_fflags = s3_out_exc;
endmodule

