// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DcsrModule(
  input         clock,
  input         reset,
  input         w_wen,
  input  [63:0] w_wdata,
  output [31:0] rdata,
  output        regOut_EBREAKVS,
  output        regOut_EBREAKVU,
  output        regOut_EBREAKM,
  output        regOut_EBREAKS,
  output        regOut_EBREAKU,
  output        regOut_STEPIE,
  output [2:0]  regOut_CAUSE,
  output        regOut_V,
  output        regOut_MPRVEN,
  output        regOut_STEP,
  output [1:0]  regOut_PRV,
  input         trapToD_dcsr_valid,
  input  [2:0]  trapToD_dcsr_bits_CAUSE,
  input         trapToD_dcsr_bits_V,
  input  [1:0]  trapToD_dcsr_bits_PRV,
  input         retFromD_dcsr_valid,
  input         retFromD_dcsr_bits_V,
  input  [1:0]  retFromD_dcsr_bits_PRV
);

  reg       reg_EBREAKVS;
  reg       reg_EBREAKVU;
  reg       reg_EBREAKM;
  reg       reg_EBREAKS;
  reg       reg_EBREAKU;
  reg       reg_STEPIE;
  reg [2:0] reg_CAUSE;
  reg       reg_V;
  reg       reg_MPRVEN;
  reg       reg_STEP;
  reg [1:0] reg_PRV;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      reg_EBREAKVS <= 1'h0;
      reg_EBREAKVU <= 1'h0;
      reg_EBREAKM <= 1'h0;
      reg_EBREAKS <= 1'h0;
      reg_EBREAKU <= 1'h0;
      reg_STEPIE <= 1'h0;
      reg_CAUSE <= 3'h0;
      reg_V <= 1'h0;
      reg_MPRVEN <= 1'h0;
      reg_STEP <= 1'h0;
      reg_PRV <= 2'h3;
    end
    else begin
      if (w_wen) begin
        reg_EBREAKVS <= w_wdata[17];
        reg_EBREAKVU <= w_wdata[16];
        reg_EBREAKM <= w_wdata[15];
        reg_EBREAKS <= w_wdata[13];
        reg_EBREAKU <= w_wdata[12];
        reg_STEPIE <= w_wdata[11];
        reg_MPRVEN <= w_wdata[4];
        reg_STEP <= w_wdata[2];
      end
      if (trapToD_dcsr_valid)
        reg_CAUSE <= trapToD_dcsr_bits_CAUSE;
      if (retFromD_dcsr_valid) begin
        reg_V <= retFromD_dcsr_bits_V;
        reg_PRV <= retFromD_dcsr_bits_PRV;
      end
      else if (trapToD_dcsr_valid) begin
        reg_V <= trapToD_dcsr_bits_V;
        reg_PRV <= trapToD_dcsr_bits_PRV;
      end
      else if (w_wen) begin
        reg_V <= w_wdata[5];
        reg_PRV <= w_wdata[1:0];
      end
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        reg_EBREAKVS = _RANDOM[/*Zero width*/ 1'b0][4];
        reg_EBREAKVU = _RANDOM[/*Zero width*/ 1'b0][5];
        reg_EBREAKM = _RANDOM[/*Zero width*/ 1'b0][6];
        reg_EBREAKS = _RANDOM[/*Zero width*/ 1'b0][7];
        reg_EBREAKU = _RANDOM[/*Zero width*/ 1'b0][8];
        reg_STEPIE = _RANDOM[/*Zero width*/ 1'b0][9];
        reg_CAUSE = _RANDOM[/*Zero width*/ 1'b0][14:12];
        reg_V = _RANDOM[/*Zero width*/ 1'b0][15];
        reg_MPRVEN = _RANDOM[/*Zero width*/ 1'b0][16];
        reg_STEP = _RANDOM[/*Zero width*/ 1'b0][18];
        reg_PRV = _RANDOM[/*Zero width*/ 1'b0][20:19];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        reg_EBREAKVS = 1'h0;
        reg_EBREAKVU = 1'h0;
        reg_EBREAKM = 1'h0;
        reg_EBREAKS = 1'h0;
        reg_EBREAKU = 1'h0;
        reg_STEPIE = 1'h0;
        reg_CAUSE = 3'h0;
        reg_V = 1'h0;
        reg_MPRVEN = 1'h0;
        reg_STEP = 1'h0;
        reg_PRV = 2'h3;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign rdata =
    {14'h1000,
     reg_EBREAKVS,
     reg_EBREAKVU,
     reg_EBREAKM,
     1'h0,
     reg_EBREAKS,
     reg_EBREAKU,
     reg_STEPIE,
     2'h0,
     reg_CAUSE,
     reg_V,
     reg_MPRVEN,
     1'h0,
     reg_STEP,
     reg_PRV};
  assign regOut_EBREAKVS = reg_EBREAKVS;
  assign regOut_EBREAKVU = reg_EBREAKVU;
  assign regOut_EBREAKM = reg_EBREAKM;
  assign regOut_EBREAKS = reg_EBREAKS;
  assign regOut_EBREAKU = reg_EBREAKU;
  assign regOut_STEPIE = reg_STEPIE;
  assign regOut_CAUSE = reg_CAUSE;
  assign regOut_V = reg_V;
  assign regOut_MPRVEN = reg_MPRVEN;
  assign regOut_STEP = reg_STEP;
  assign regOut_PRV = reg_PRV;
endmodule

