// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RedirectGenerator(
  input         clock,
  input         reset,
  input         io_oldestExuRedirect_valid,
  input         io_oldestExuRedirect_bits_robIdx_flag,
  input  [7:0]  io_oldestExuRedirect_bits_robIdx_value,
  input         io_oldestExuRedirect_bits_ftqIdx_flag,
  input  [5:0]  io_oldestExuRedirect_bits_ftqIdx_value,
  input  [3:0]  io_oldestExuRedirect_bits_ftqOffset,
  input         io_oldestExuRedirect_bits_level,
  input  [40:0] io_oldestExuRedirect_bits_cfiUpdate_pc,
  input  [40:0] io_oldestExuRedirect_bits_cfiUpdate_target,
  input         io_oldestExuRedirect_bits_cfiUpdate_taken,
  input         io_oldestExuRedirect_bits_cfiUpdate_isMisPred,
  input         io_oldestExuOutPredecode_isRVC,
  input  [1:0]  io_oldestExuOutPredecode_brType,
  input         io_oldestExuOutPredecode_isCall,
  input         io_oldestExuOutPredecode_isRet,
  input         io_loadReplay_valid,
  input         io_loadReplay_bits_robIdx_flag,
  input  [7:0]  io_loadReplay_bits_robIdx_value,
  input         io_loadReplay_bits_ftqIdx_flag,
  input  [5:0]  io_loadReplay_bits_ftqIdx_value,
  input  [3:0]  io_loadReplay_bits_ftqOffset,
  input         io_loadReplay_bits_level,
  input  [40:0] io_loadReplay_bits_cfiUpdate_pc,
  input  [40:0] io_loadReplay_bits_cfiUpdate_target,
  input         io_robFlush_valid,
  input         io_robFlush_bits_robIdx_flag,
  input  [7:0]  io_robFlush_bits_robIdx_value,
  input         io_robFlush_bits_level,
  output        io_stage2Redirect_valid,
  output        io_stage2Redirect_bits_robIdx_flag,
  output [7:0]  io_stage2Redirect_bits_robIdx_value,
  output        io_stage2Redirect_bits_ftqIdx_flag,
  output [5:0]  io_stage2Redirect_bits_ftqIdx_value,
  output [3:0]  io_stage2Redirect_bits_ftqOffset,
  output        io_stage2Redirect_bits_level,
  output [40:0] io_stage2Redirect_bits_cfiUpdate_pc,
  output        io_stage2Redirect_bits_cfiUpdate_pd_isRVC,
  output [1:0]  io_stage2Redirect_bits_cfiUpdate_pd_brType,
  output        io_stage2Redirect_bits_cfiUpdate_pd_isCall,
  output        io_stage2Redirect_bits_cfiUpdate_pd_isRet,
  output [40:0] io_stage2Redirect_bits_cfiUpdate_target,
  output        io_stage2Redirect_bits_cfiUpdate_taken,
  output        io_stage2Redirect_bits_cfiUpdate_isMisPred,
  output [1:0]  io_stage2oldestOH
);

  wire        oldestOneHot_compareVec_1_0 =
    io_oldestExuRedirect_bits_robIdx_flag ^ io_loadReplay_bits_robIdx_flag
    ^ io_oldestExuRedirect_bits_robIdx_value > io_loadReplay_bits_robIdx_value;
  wire [1:0]  _oldestOneHot_resultOnehot_T_3 =
    {io_oldestExuRedirect_valid, ~io_loadReplay_valid | ~oldestOneHot_compareVec_1_0};
  wire [1:0]  _oldestOneHot_resultOnehot_T_7 =
    {~io_oldestExuRedirect_valid | oldestOneHot_compareVec_1_0, io_loadReplay_valid};
  reg         flushAfter_valid;
  reg         flushAfter_bits_robIdx_flag;
  reg  [7:0]  flushAfter_bits_robIdx_value;
  reg         flushAfter_bits_level;
  wire [8:0]  _needFlushVec_flushItself_T_6 =
    {flushAfter_bits_robIdx_flag, flushAfter_bits_robIdx_value};
  wire [1:0]  _oldestValid_T_4 =
    {(&_oldestOneHot_resultOnehot_T_7)
       & ~(flushAfter_valid
           & (flushAfter_bits_level
              & {io_loadReplay_bits_robIdx_flag,
                 io_loadReplay_bits_robIdx_value} == _needFlushVec_flushItself_T_6
              | io_loadReplay_bits_robIdx_flag ^ flushAfter_bits_robIdx_flag
              ^ io_loadReplay_bits_robIdx_value > flushAfter_bits_robIdx_value)
           | io_robFlush_valid),
     (&_oldestOneHot_resultOnehot_T_3)
       & ~(flushAfter_valid
           & (flushAfter_bits_level
              & {io_oldestExuRedirect_bits_robIdx_flag,
                 io_oldestExuRedirect_bits_robIdx_value} == _needFlushVec_flushItself_T_6
              | io_oldestExuRedirect_bits_robIdx_flag ^ flushAfter_bits_robIdx_flag
              ^ io_oldestExuRedirect_bits_robIdx_value > flushAfter_bits_robIdx_value)
           | io_robFlush_valid)};
  wire        _oldestRedirect_T_239 =
    (&_oldestOneHot_resultOnehot_T_3) & io_oldestExuRedirect_bits_level
    | (&_oldestOneHot_resultOnehot_T_7) & io_loadReplay_bits_level;
  wire [7:0]  _oldestRedirect_T_251 =
    ((&_oldestOneHot_resultOnehot_T_3) ? io_oldestExuRedirect_bits_robIdx_value : 8'h0)
    | ((&_oldestOneHot_resultOnehot_T_7) ? io_loadReplay_bits_robIdx_value : 8'h0);
  wire        _oldestRedirect_T_254 =
    (&_oldestOneHot_resultOnehot_T_3) & io_oldestExuRedirect_bits_robIdx_flag
    | (&_oldestOneHot_resultOnehot_T_7) & io_loadReplay_bits_robIdx_flag;
  reg         s1_redirect_bits_reg_robIdx_flag;
  reg  [7:0]  s1_redirect_bits_reg_robIdx_value;
  reg         s1_redirect_bits_reg_ftqIdx_flag;
  reg  [5:0]  s1_redirect_bits_reg_ftqIdx_value;
  reg  [3:0]  s1_redirect_bits_reg_ftqOffset;
  reg         s1_redirect_bits_reg_level;
  reg  [40:0] s1_redirect_bits_reg_cfiUpdate_pc;
  reg  [40:0] s1_redirect_bits_reg_cfiUpdate_target;
  reg         s1_redirect_bits_reg_cfiUpdate_taken;
  reg         s1_redirect_bits_reg_cfiUpdate_isMisPred;
  reg         s1_redirect_valid_reg_last_REG;
  reg         s1_redirect_onehot_last_REG;
  reg         s1_redirect_onehot_last_REG_1;
  reg  [2:0]  flushAfterCounter;
  wire        robFlushOrExuFlushValid = (|_oldestValid_T_4) | io_robFlush_valid;
  reg         io_stage2Redirect_bits_cfiUpdate_pd_r_isRVC;
  reg  [1:0]  io_stage2Redirect_bits_cfiUpdate_pd_r_brType;
  reg         io_stage2Redirect_bits_cfiUpdate_pd_r_isCall;
  reg         io_stage2Redirect_bits_cfiUpdate_pd_r_isRet;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      flushAfter_valid <= 1'h0;
      flushAfter_bits_robIdx_flag <= 1'h0;
      flushAfter_bits_robIdx_value <= 8'h0;
      flushAfter_bits_level <= 1'h0;
      s1_redirect_valid_reg_last_REG <= 1'h0;
      s1_redirect_onehot_last_REG <= 1'h0;
      s1_redirect_onehot_last_REG_1 <= 1'h0;
    end
    else begin
      flushAfter_valid <=
        robFlushOrExuFlushValid | flushAfterCounter[0] & flushAfter_valid;
      if (robFlushOrExuFlushValid) begin
        flushAfter_bits_robIdx_flag <=
          io_robFlush_valid ? io_robFlush_bits_robIdx_flag : _oldestRedirect_T_254;
        flushAfter_bits_robIdx_value <=
          io_robFlush_valid ? io_robFlush_bits_robIdx_value : _oldestRedirect_T_251;
        flushAfter_bits_level <=
          io_robFlush_valid ? io_robFlush_bits_level : _oldestRedirect_T_239;
      end
      s1_redirect_valid_reg_last_REG <= |_oldestValid_T_4;
      s1_redirect_onehot_last_REG <= &_oldestOneHot_resultOnehot_T_3;
      s1_redirect_onehot_last_REG_1 <= &_oldestOneHot_resultOnehot_T_7;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (|_oldestValid_T_4) begin
      s1_redirect_bits_reg_robIdx_flag <= _oldestRedirect_T_254;
      s1_redirect_bits_reg_robIdx_value <= _oldestRedirect_T_251;
      s1_redirect_bits_reg_ftqIdx_flag <=
        (&_oldestOneHot_resultOnehot_T_3) & io_oldestExuRedirect_bits_ftqIdx_flag
        | (&_oldestOneHot_resultOnehot_T_7) & io_loadReplay_bits_ftqIdx_flag;
      s1_redirect_bits_reg_ftqIdx_value <=
        ((&_oldestOneHot_resultOnehot_T_3)
           ? io_oldestExuRedirect_bits_ftqIdx_value
           : 6'h0)
        | ((&_oldestOneHot_resultOnehot_T_7) ? io_loadReplay_bits_ftqIdx_value : 6'h0);
      s1_redirect_bits_reg_ftqOffset <=
        ((&_oldestOneHot_resultOnehot_T_3) ? io_oldestExuRedirect_bits_ftqOffset : 4'h0)
        | ((&_oldestOneHot_resultOnehot_T_7) ? io_loadReplay_bits_ftqOffset : 4'h0);
      s1_redirect_bits_reg_level <= _oldestRedirect_T_239;
      s1_redirect_bits_reg_cfiUpdate_pc <=
        ((&_oldestOneHot_resultOnehot_T_3)
           ? io_oldestExuRedirect_bits_cfiUpdate_pc
           : 41'h0)
        | ((&_oldestOneHot_resultOnehot_T_7) ? io_loadReplay_bits_cfiUpdate_pc : 41'h0);
      s1_redirect_bits_reg_cfiUpdate_target <=
        ((&_oldestOneHot_resultOnehot_T_3)
           ? io_oldestExuRedirect_bits_cfiUpdate_target
           : 41'h0)
        | ((&_oldestOneHot_resultOnehot_T_7)
             ? io_loadReplay_bits_cfiUpdate_target
             : 41'h0);
      s1_redirect_bits_reg_cfiUpdate_taken <=
        (&_oldestOneHot_resultOnehot_T_3) & io_oldestExuRedirect_bits_cfiUpdate_taken;
      s1_redirect_bits_reg_cfiUpdate_isMisPred <=
        (&_oldestOneHot_resultOnehot_T_3) & io_oldestExuRedirect_bits_cfiUpdate_isMisPred;
      io_stage2Redirect_bits_cfiUpdate_pd_r_isRVC <= io_oldestExuOutPredecode_isRVC;
      io_stage2Redirect_bits_cfiUpdate_pd_r_brType <= io_oldestExuOutPredecode_brType;
      io_stage2Redirect_bits_cfiUpdate_pd_r_isCall <= io_oldestExuOutPredecode_isCall;
      io_stage2Redirect_bits_cfiUpdate_pd_r_isRet <= io_oldestExuOutPredecode_isRet;
    end
    if (robFlushOrExuFlushValid)
      flushAfterCounter <= 3'h7;
    else if (flushAfterCounter[0])
      flushAfterCounter <= {1'h0, flushAfterCounter[2:1]};
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:29];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h1E; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        flushAfter_valid = _RANDOM[5'h0][0];
        flushAfter_bits_robIdx_flag = _RANDOM[5'h0][2];
        flushAfter_bits_robIdx_value = _RANDOM[5'h0][10:3];
        flushAfter_bits_level = _RANDOM[5'h0][22];
        s1_redirect_bits_reg_robIdx_flag = _RANDOM[5'hE][25];
        s1_redirect_bits_reg_robIdx_value = {_RANDOM[5'hE][31:26], _RANDOM[5'hF][1:0]};
        s1_redirect_bits_reg_ftqIdx_flag = _RANDOM[5'hF][2];
        s1_redirect_bits_reg_ftqIdx_value = _RANDOM[5'hF][8:3];
        s1_redirect_bits_reg_ftqOffset = _RANDOM[5'hF][12:9];
        s1_redirect_bits_reg_level = _RANDOM[5'hF][13];
        s1_redirect_bits_reg_cfiUpdate_pc = {_RANDOM[5'hF][31:15], _RANDOM[5'h10][23:0]};
        s1_redirect_bits_reg_cfiUpdate_target =
          {_RANDOM[5'h19][31:20], _RANDOM[5'h1A][28:0]};
        s1_redirect_bits_reg_cfiUpdate_taken = _RANDOM[5'h1A][29];
        s1_redirect_bits_reg_cfiUpdate_isMisPred = _RANDOM[5'h1A][30];
        s1_redirect_valid_reg_last_REG = _RANDOM[5'h1D][15];
        s1_redirect_onehot_last_REG = _RANDOM[5'h1D][16];
        s1_redirect_onehot_last_REG_1 = _RANDOM[5'h1D][17];
        flushAfterCounter = _RANDOM[5'h1D][20:18];
        io_stage2Redirect_bits_cfiUpdate_pd_r_isRVC = _RANDOM[5'h1D][22];
        io_stage2Redirect_bits_cfiUpdate_pd_r_brType = _RANDOM[5'h1D][24:23];
        io_stage2Redirect_bits_cfiUpdate_pd_r_isCall = _RANDOM[5'h1D][25];
        io_stage2Redirect_bits_cfiUpdate_pd_r_isRet = _RANDOM[5'h1D][26];
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        flushAfter_valid = 1'h0;
        flushAfter_bits_robIdx_flag = 1'h0;
        flushAfter_bits_robIdx_value = 8'h0;
        flushAfter_bits_level = 1'h0;
        s1_redirect_valid_reg_last_REG = 1'h0;
        s1_redirect_onehot_last_REG = 1'h0;
        s1_redirect_onehot_last_REG_1 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_stage2Redirect_valid = s1_redirect_valid_reg_last_REG & ~io_robFlush_valid;
  assign io_stage2Redirect_bits_robIdx_flag = s1_redirect_bits_reg_robIdx_flag;
  assign io_stage2Redirect_bits_robIdx_value = s1_redirect_bits_reg_robIdx_value;
  assign io_stage2Redirect_bits_ftqIdx_flag = s1_redirect_bits_reg_ftqIdx_flag;
  assign io_stage2Redirect_bits_ftqIdx_value = s1_redirect_bits_reg_ftqIdx_value;
  assign io_stage2Redirect_bits_ftqOffset = s1_redirect_bits_reg_ftqOffset;
  assign io_stage2Redirect_bits_level = s1_redirect_bits_reg_level;
  assign io_stage2Redirect_bits_cfiUpdate_pc = s1_redirect_bits_reg_cfiUpdate_pc;
  assign io_stage2Redirect_bits_cfiUpdate_pd_isRVC =
    io_stage2Redirect_bits_cfiUpdate_pd_r_isRVC;
  assign io_stage2Redirect_bits_cfiUpdate_pd_brType =
    io_stage2Redirect_bits_cfiUpdate_pd_r_brType;
  assign io_stage2Redirect_bits_cfiUpdate_pd_isCall =
    io_stage2Redirect_bits_cfiUpdate_pd_r_isCall;
  assign io_stage2Redirect_bits_cfiUpdate_pd_isRet =
    io_stage2Redirect_bits_cfiUpdate_pd_r_isRet;
  assign io_stage2Redirect_bits_cfiUpdate_target = s1_redirect_bits_reg_cfiUpdate_target;
  assign io_stage2Redirect_bits_cfiUpdate_taken = s1_redirect_bits_reg_cfiUpdate_taken;
  assign io_stage2Redirect_bits_cfiUpdate_isMisPred =
    s1_redirect_bits_reg_cfiUpdate_isMisPred;
  assign io_stage2oldestOH = {s1_redirect_onehot_last_REG_1, s1_redirect_onehot_last_REG};
endmodule

