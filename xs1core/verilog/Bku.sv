// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Bku(
  input         clock,
  input         reset,
  input         io_flush_valid,
  input         io_flush_bits_robIdx_flag,
  input  [7:0]  io_flush_bits_robIdx_value,
  input         io_flush_bits_level,
  input         io_in_valid,
  input  [8:0]  io_in_bits_ctrl_fuOpType,
  input         io_in_bits_ctrl_robIdx_flag,
  input  [7:0]  io_in_bits_ctrl_robIdx_value,
  input  [7:0]  io_in_bits_ctrl_pdest,
  input         io_in_bits_ctrl_rfWen,
  input  [63:0] io_in_bits_data_src_1,
  input  [63:0] io_in_bits_data_src_0,
  output        io_out_valid,
  output        io_out_bits_ctrl_robIdx_flag,
  output [7:0]  io_out_bits_ctrl_robIdx_value,
  output [7:0]  io_out_bits_ctrl_pdest,
  output        io_out_bits_ctrl_rfWen,
  output [63:0] io_out_bits_res_data
);

  wire [63:0] _cryptoModule_io_out;
  wire [63:0] _miscModule_io_out;
  wire [63:0] _clmulModule_io_out;
  wire [63:0] _countModule_io_out;
  reg         validVec_1;
  reg         validVec_2;
  reg         ctrlVec_1_robIdx_flag;
  reg  [7:0]  ctrlVec_1_robIdx_value;
  reg  [7:0]  ctrlVec_1_pdest;
  reg         ctrlVec_1_rfWen;
  reg         ctrlVec_2_robIdx_flag;
  reg  [7:0]  ctrlVec_2_robIdx_value;
  reg  [7:0]  ctrlVec_2_pdest;
  reg         ctrlVec_2_rfWen;
  wire [8:0]  _fixflushVec_flushItself_T_2 =
    {io_flush_bits_robIdx_flag, io_flush_bits_robIdx_value};
  wire        _GEN =
    io_in_valid
    & ~(io_in_valid & io_flush_valid
        & (io_flush_bits_level
           & {io_in_bits_ctrl_robIdx_flag,
              io_in_bits_ctrl_robIdx_value} == _fixflushVec_flushItself_T_2
           | io_in_bits_ctrl_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ io_in_bits_ctrl_robIdx_value > io_flush_bits_robIdx_value));
  wire        _GEN_0 =
    validVec_1
    & ~(validVec_1 & io_flush_valid
        & (io_flush_bits_level
           & {ctrlVec_1_robIdx_flag,
              ctrlVec_1_robIdx_value} == _fixflushVec_flushItself_T_2
           | ctrlVec_1_robIdx_flag ^ io_flush_bits_robIdx_flag
           ^ ctrlVec_1_robIdx_value > io_flush_bits_robIdx_value));
  wire        pipeflushVec_0 =
    io_in_valid & io_flush_valid
    & (io_flush_bits_level
       & {io_in_bits_ctrl_robIdx_flag,
          io_in_bits_ctrl_robIdx_value} == _fixflushVec_flushItself_T_2
       | io_in_bits_ctrl_robIdx_flag ^ io_flush_bits_robIdx_flag
       ^ io_in_bits_ctrl_robIdx_value > io_flush_bits_robIdx_value);
  reg  [8:0]  funcReg;
  reg  [63:0] io_out_bits_res_data_r;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      validVec_1 <= 1'h0;
      validVec_2 <= 1'h0;
    end
    else begin
      validVec_1 <= _GEN & io_in_valid;
      validVec_2 <= _GEN_0 & validVec_1;
    end
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_GEN) begin
      ctrlVec_1_robIdx_flag <= io_in_bits_ctrl_robIdx_flag;
      ctrlVec_1_robIdx_value <= io_in_bits_ctrl_robIdx_value;
      ctrlVec_1_pdest <= io_in_bits_ctrl_pdest;
      ctrlVec_1_rfWen <= io_in_bits_ctrl_rfWen;
    end
    if (_GEN_0) begin
      ctrlVec_2_robIdx_flag <= ctrlVec_1_robIdx_flag;
      ctrlVec_2_robIdx_value <= ctrlVec_1_robIdx_value;
      ctrlVec_2_pdest <= ctrlVec_1_pdest;
      ctrlVec_2_rfWen <= ctrlVec_1_rfWen;
    end
    if (io_in_valid)
      funcReg <= io_in_bits_ctrl_fuOpType;
    if (validVec_1
        & ~(validVec_1 & io_flush_valid
            & (io_flush_bits_level
               & {ctrlVec_1_robIdx_flag,
                  ctrlVec_1_robIdx_value} == _fixflushVec_flushItself_T_2
               | ctrlVec_1_robIdx_flag ^ io_flush_bits_robIdx_flag
               ^ ctrlVec_1_robIdx_value > io_flush_bits_robIdx_value)))
      io_out_bits_res_data_r <=
        funcReg[5]
          ? _cryptoModule_io_out
          : funcReg[3]
              ? _countModule_io_out
              : funcReg[2] ? _miscModule_io_out : _clmulModule_io_out;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:52];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h35; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        validVec_1 = _RANDOM[6'h0][0];
        validVec_2 = _RANDOM[6'h0][1];
        ctrlVec_1_robIdx_flag = _RANDOM[6'h0][11];
        ctrlVec_1_robIdx_value = _RANDOM[6'h0][19:12];
        ctrlVec_1_pdest = _RANDOM[6'h0][27:20];
        ctrlVec_1_rfWen = _RANDOM[6'h0][28];
        ctrlVec_2_robIdx_flag = _RANDOM[6'h1][6];
        ctrlVec_2_robIdx_value = _RANDOM[6'h1][14:7];
        ctrlVec_2_pdest = _RANDOM[6'h1][22:15];
        ctrlVec_2_rfWen = _RANDOM[6'h1][23];
        funcReg = {_RANDOM[6'h31][31:26], _RANDOM[6'h32][2:0]};
        io_out_bits_res_data_r =
          {_RANDOM[6'h32][31:3], _RANDOM[6'h33], _RANDOM[6'h34][2:0]};
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin
        validVec_1 = 1'h0;
        validVec_2 = 1'h0;
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  CountModule countModule (
    .clock        (clock),
    .io_src       (io_in_bits_data_src_0),
    .io_func      (io_in_bits_ctrl_fuOpType),
    .io_regEnable (io_in_valid & ~pipeflushVec_0),
    .io_out       (_countModule_io_out)
  );
  ClmulModule clmulModule (
    .clock        (clock),
    .io_src_0     (io_in_bits_data_src_0),
    .io_src_1     (io_in_bits_data_src_1),
    .io_func      (io_in_bits_ctrl_fuOpType),
    .io_regEnable (io_in_valid & ~pipeflushVec_0),
    .io_out       (_clmulModule_io_out)
  );
  MiscModule miscModule (
    .clock        (clock),
    .io_src_0     (io_in_bits_data_src_0),
    .io_src_1     (io_in_bits_data_src_1),
    .io_func      (io_in_bits_ctrl_fuOpType),
    .io_regEnable (io_in_valid & ~pipeflushVec_0),
    .io_out       (_miscModule_io_out)
  );
  CryptoModule cryptoModule (
    .clock        (clock),
    .io_src_0     (io_in_bits_data_src_0),
    .io_src_1     (io_in_bits_data_src_1),
    .io_func      (io_in_bits_ctrl_fuOpType),
    .io_regEnable (io_in_valid & ~pipeflushVec_0),
    .io_out       (_cryptoModule_io_out)
  );
  assign io_out_valid = validVec_2;
  assign io_out_bits_ctrl_robIdx_flag = ctrlVec_2_robIdx_flag;
  assign io_out_bits_ctrl_robIdx_value = ctrlVec_2_robIdx_value;
  assign io_out_bits_ctrl_pdest = ctrlVec_2_pdest;
  assign io_out_bits_ctrl_rfWen = ctrlVec_2_rfWen;
  assign io_out_bits_res_data = io_out_bits_res_data_r;
endmodule

