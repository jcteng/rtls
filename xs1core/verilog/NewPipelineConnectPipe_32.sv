// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module NewPipelineConnectPipe_32(
  input         clock,
  input         reset,
  output        io_in_ready,
  input         io_in_valid,
  input  [40:0] io_in_bits_vaddr,
  input  [15:0] io_in_bits_mask,
  input  [3:0]  io_in_bits_reg_offset,
  input  [2:0]  io_in_bits_alignedType,
  input         io_in_bits_vecActive,
  input         io_in_bits_uop_exceptionVec_4,
  input         io_in_bits_uop_exceptionVec_5,
  input         io_in_bits_uop_exceptionVec_13,
  input         io_in_bits_uop_exceptionVec_21,
  input         io_in_bits_uop_preDecodeInfo_isRVC,
  input         io_in_bits_uop_ftqPtr_flag,
  input  [5:0]  io_in_bits_uop_ftqPtr_value,
  input  [3:0]  io_in_bits_uop_ftqOffset,
  input  [34:0] io_in_bits_uop_fuType,
  input  [8:0]  io_in_bits_uop_fuOpType,
  input         io_in_bits_uop_rfWen,
  input         io_in_bits_uop_fpWen,
  input  [31:0] io_in_bits_uop_imm,
  input  [6:0]  io_in_bits_uop_uopIdx,
  input         io_in_bits_uop_lastUop,
  input  [7:0]  io_in_bits_uop_pdest,
  input         io_in_bits_uop_robIdx_flag,
  input  [7:0]  io_in_bits_uop_robIdx_value,
  input         io_in_bits_uop_storeSetHit,
  input         io_in_bits_uop_waitForRobIdx_flag,
  input  [7:0]  io_in_bits_uop_waitForRobIdx_value,
  input         io_in_bits_uop_loadWaitBit,
  input         io_in_bits_uop_loadWaitStrict,
  input         io_in_bits_uop_lqIdx_flag,
  input  [6:0]  io_in_bits_uop_lqIdx_value,
  input         io_in_bits_uop_sqIdx_flag,
  input  [5:0]  io_in_bits_uop_sqIdx_value,
  input         io_in_bits_usSecondInv,
  input  [3:0]  io_in_bits_mBIndex,
  input  [7:0]  io_in_bits_elemIdx,
  input  [7:0]  io_in_bits_elemIdxInsideVd,
  input         io_out_ready,
  output        io_out_valid,
  output [40:0] io_out_bits_vaddr,
  output [15:0] io_out_bits_mask,
  output [3:0]  io_out_bits_reg_offset,
  output [2:0]  io_out_bits_alignedType,
  output        io_out_bits_vecActive,
  output        io_out_bits_uop_exceptionVec_4,
  output        io_out_bits_uop_exceptionVec_5,
  output        io_out_bits_uop_exceptionVec_13,
  output        io_out_bits_uop_exceptionVec_21,
  output        io_out_bits_uop_preDecodeInfo_isRVC,
  output        io_out_bits_uop_ftqPtr_flag,
  output [5:0]  io_out_bits_uop_ftqPtr_value,
  output [3:0]  io_out_bits_uop_ftqOffset,
  output [34:0] io_out_bits_uop_fuType,
  output [8:0]  io_out_bits_uop_fuOpType,
  output        io_out_bits_uop_rfWen,
  output        io_out_bits_uop_fpWen,
  output [31:0] io_out_bits_uop_imm,
  output [6:0]  io_out_bits_uop_uopIdx,
  output        io_out_bits_uop_lastUop,
  output [7:0]  io_out_bits_uop_pdest,
  output        io_out_bits_uop_robIdx_flag,
  output [7:0]  io_out_bits_uop_robIdx_value,
  output        io_out_bits_uop_storeSetHit,
  output        io_out_bits_uop_waitForRobIdx_flag,
  output [7:0]  io_out_bits_uop_waitForRobIdx_value,
  output        io_out_bits_uop_loadWaitBit,
  output        io_out_bits_uop_loadWaitStrict,
  output        io_out_bits_uop_lqIdx_flag,
  output [6:0]  io_out_bits_uop_lqIdx_value,
  output        io_out_bits_uop_sqIdx_flag,
  output [5:0]  io_out_bits_uop_sqIdx_value,
  output        io_out_bits_usSecondInv,
  output [3:0]  io_out_bits_mBIndex,
  output [7:0]  io_out_bits_elemIdx,
  output [7:0]  io_out_bits_elemIdxInsideVd,
  input         io_rightOutFire,
  input         io_isFlush
);

  reg         valid;
  wire        io_in_ready_0 = io_out_ready | ~valid;
  wire        _data_T = io_in_ready_0 & io_in_valid;
  reg  [40:0] data_vaddr;
  reg  [15:0] data_mask;
  reg  [3:0]  data_reg_offset;
  reg  [2:0]  data_alignedType;
  reg         data_vecActive;
  reg         data_uop_exceptionVec_4;
  reg         data_uop_exceptionVec_5;
  reg         data_uop_exceptionVec_13;
  reg         data_uop_exceptionVec_21;
  reg         data_uop_preDecodeInfo_isRVC;
  reg         data_uop_ftqPtr_flag;
  reg  [5:0]  data_uop_ftqPtr_value;
  reg  [3:0]  data_uop_ftqOffset;
  reg  [34:0] data_uop_fuType;
  reg  [8:0]  data_uop_fuOpType;
  reg         data_uop_rfWen;
  reg         data_uop_fpWen;
  reg  [31:0] data_uop_imm;
  reg  [6:0]  data_uop_uopIdx;
  reg         data_uop_lastUop;
  reg  [7:0]  data_uop_pdest;
  reg         data_uop_robIdx_flag;
  reg  [7:0]  data_uop_robIdx_value;
  reg         data_uop_storeSetHit;
  reg         data_uop_waitForRobIdx_flag;
  reg  [7:0]  data_uop_waitForRobIdx_value;
  reg         data_uop_loadWaitBit;
  reg         data_uop_loadWaitStrict;
  reg         data_uop_lqIdx_flag;
  reg  [6:0]  data_uop_lqIdx_value;
  reg         data_uop_sqIdx_flag;
  reg  [5:0]  data_uop_sqIdx_value;
  reg         data_usSecondInv;
  reg  [3:0]  data_mBIndex;
  reg  [7:0]  data_elemIdx;
  reg  [7:0]  data_elemIdxInsideVd;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid <= 1'h0;
    else
      valid <= ~io_isFlush & (_data_T | ~io_rightOutFire & valid);
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (_data_T) begin
      data_vaddr <= io_in_bits_vaddr;
      data_mask <= io_in_bits_mask;
      data_reg_offset <= io_in_bits_reg_offset;
      data_alignedType <= io_in_bits_alignedType;
      data_vecActive <= io_in_bits_vecActive;
      data_uop_exceptionVec_4 <= io_in_bits_uop_exceptionVec_4;
      data_uop_exceptionVec_5 <= io_in_bits_uop_exceptionVec_5;
      data_uop_exceptionVec_13 <= io_in_bits_uop_exceptionVec_13;
      data_uop_exceptionVec_21 <= io_in_bits_uop_exceptionVec_21;
      data_uop_preDecodeInfo_isRVC <= io_in_bits_uop_preDecodeInfo_isRVC;
      data_uop_ftqPtr_flag <= io_in_bits_uop_ftqPtr_flag;
      data_uop_ftqPtr_value <= io_in_bits_uop_ftqPtr_value;
      data_uop_ftqOffset <= io_in_bits_uop_ftqOffset;
      data_uop_fuType <= io_in_bits_uop_fuType;
      data_uop_fuOpType <= io_in_bits_uop_fuOpType;
      data_uop_rfWen <= io_in_bits_uop_rfWen;
      data_uop_fpWen <= io_in_bits_uop_fpWen;
      data_uop_imm <= io_in_bits_uop_imm;
      data_uop_uopIdx <= io_in_bits_uop_uopIdx;
      data_uop_lastUop <= io_in_bits_uop_lastUop;
      data_uop_pdest <= io_in_bits_uop_pdest;
      data_uop_robIdx_flag <= io_in_bits_uop_robIdx_flag;
      data_uop_robIdx_value <= io_in_bits_uop_robIdx_value;
      data_uop_storeSetHit <= io_in_bits_uop_storeSetHit;
      data_uop_waitForRobIdx_flag <= io_in_bits_uop_waitForRobIdx_flag;
      data_uop_waitForRobIdx_value <= io_in_bits_uop_waitForRobIdx_value;
      data_uop_loadWaitBit <= io_in_bits_uop_loadWaitBit;
      data_uop_loadWaitStrict <= io_in_bits_uop_loadWaitStrict;
      data_uop_lqIdx_flag <= io_in_bits_uop_lqIdx_flag;
      data_uop_lqIdx_value <= io_in_bits_uop_lqIdx_value;
      data_uop_sqIdx_flag <= io_in_bits_uop_sqIdx_flag;
      data_uop_sqIdx_value <= io_in_bits_uop_sqIdx_value;
      data_usSecondInv <= io_in_bits_usSecondInv;
      data_mBIndex <= io_in_bits_mBIndex;
      data_elemIdx <= io_in_bits_elemIdx;
      data_elemIdxInsideVd <= io_in_bits_elemIdxInsideVd;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:41];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [5:0] i = 6'h0; i < 6'h2A; i += 6'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        valid = _RANDOM[6'h0][0];
        data_vaddr = {_RANDOM[6'h0][31:1], _RANDOM[6'h1][9:0]};
        data_mask = _RANDOM[6'h1][25:10];
        data_reg_offset = _RANDOM[6'h1][31:28];
        data_alignedType = _RANDOM[6'h2][2:0];
        data_vecActive = _RANDOM[6'h2][3];
        data_uop_exceptionVec_4 = _RANDOM[6'h4][29];
        data_uop_exceptionVec_5 = _RANDOM[6'h4][30];
        data_uop_exceptionVec_13 = _RANDOM[6'h5][6];
        data_uop_exceptionVec_21 = _RANDOM[6'h5][14];
        data_uop_preDecodeInfo_isRVC = _RANDOM[6'h6][3];
        data_uop_ftqPtr_flag = _RANDOM[6'h6][10];
        data_uop_ftqPtr_value = _RANDOM[6'h6][16:11];
        data_uop_ftqOffset = _RANDOM[6'h6][20:17];
        data_uop_fuType = {_RANDOM[6'h7][31:15], _RANDOM[6'h8][17:0]};
        data_uop_fuOpType = _RANDOM[6'h8][26:18];
        data_uop_rfWen = _RANDOM[6'h8][27];
        data_uop_fpWen = _RANDOM[6'h8][28];
        data_uop_imm = {_RANDOM[6'h9][31:9], _RANDOM[6'hA][8:0]};
        data_uop_uopIdx = _RANDOM[6'h11][7:1];
        data_uop_lastUop = _RANDOM[6'h11][10];
        data_uop_pdest = _RANDOM[6'h14][14:7];
        data_uop_robIdx_flag = _RANDOM[6'h14][27];
        data_uop_robIdx_value = {_RANDOM[6'h14][31:28], _RANDOM[6'h15][3:0]};
        data_uop_storeSetHit = _RANDOM[6'h27][12];
        data_uop_waitForRobIdx_flag = _RANDOM[6'h27][13];
        data_uop_waitForRobIdx_value = _RANDOM[6'h27][21:14];
        data_uop_loadWaitBit = _RANDOM[6'h27][22];
        data_uop_loadWaitStrict = _RANDOM[6'h27][23];
        data_uop_lqIdx_flag = _RANDOM[6'h27][29];
        data_uop_lqIdx_value = {_RANDOM[6'h27][31:30], _RANDOM[6'h28][4:0]};
        data_uop_sqIdx_flag = _RANDOM[6'h28][5];
        data_uop_sqIdx_value = _RANDOM[6'h28][11:6];
        data_usSecondInv = _RANDOM[6'h28][19];
        data_mBIndex = _RANDOM[6'h28][23:20];
        data_elemIdx = _RANDOM[6'h28][31:24];
        data_elemIdxInsideVd = _RANDOM[6'h29][7:0];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = valid;
  assign io_out_bits_vaddr = data_vaddr;
  assign io_out_bits_mask = data_mask;
  assign io_out_bits_reg_offset = data_reg_offset;
  assign io_out_bits_alignedType = data_alignedType;
  assign io_out_bits_vecActive = data_vecActive;
  assign io_out_bits_uop_exceptionVec_4 = data_uop_exceptionVec_4;
  assign io_out_bits_uop_exceptionVec_5 = data_uop_exceptionVec_5;
  assign io_out_bits_uop_exceptionVec_13 = data_uop_exceptionVec_13;
  assign io_out_bits_uop_exceptionVec_21 = data_uop_exceptionVec_21;
  assign io_out_bits_uop_preDecodeInfo_isRVC = data_uop_preDecodeInfo_isRVC;
  assign io_out_bits_uop_ftqPtr_flag = data_uop_ftqPtr_flag;
  assign io_out_bits_uop_ftqPtr_value = data_uop_ftqPtr_value;
  assign io_out_bits_uop_ftqOffset = data_uop_ftqOffset;
  assign io_out_bits_uop_fuType = data_uop_fuType;
  assign io_out_bits_uop_fuOpType = data_uop_fuOpType;
  assign io_out_bits_uop_rfWen = data_uop_rfWen;
  assign io_out_bits_uop_fpWen = data_uop_fpWen;
  assign io_out_bits_uop_imm = data_uop_imm;
  assign io_out_bits_uop_uopIdx = data_uop_uopIdx;
  assign io_out_bits_uop_lastUop = data_uop_lastUop;
  assign io_out_bits_uop_pdest = data_uop_pdest;
  assign io_out_bits_uop_robIdx_flag = data_uop_robIdx_flag;
  assign io_out_bits_uop_robIdx_value = data_uop_robIdx_value;
  assign io_out_bits_uop_storeSetHit = data_uop_storeSetHit;
  assign io_out_bits_uop_waitForRobIdx_flag = data_uop_waitForRobIdx_flag;
  assign io_out_bits_uop_waitForRobIdx_value = data_uop_waitForRobIdx_value;
  assign io_out_bits_uop_loadWaitBit = data_uop_loadWaitBit;
  assign io_out_bits_uop_loadWaitStrict = data_uop_loadWaitStrict;
  assign io_out_bits_uop_lqIdx_flag = data_uop_lqIdx_flag;
  assign io_out_bits_uop_lqIdx_value = data_uop_lqIdx_value;
  assign io_out_bits_uop_sqIdx_flag = data_uop_sqIdx_flag;
  assign io_out_bits_uop_sqIdx_value = data_uop_sqIdx_value;
  assign io_out_bits_usSecondInv = data_usSecondInv;
  assign io_out_bits_mBIndex = data_mBIndex;
  assign io_out_bits_elemIdx = data_elemIdx;
  assign io_out_bits_elemIdxInsideVd = data_elemIdxInsideVd;
endmodule

